<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[设计模式]]></title>
      <url>/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h2><h3 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h3><p><strong>适用场景：</strong></p>
<ul>
<li>工厂类负责创建的对象较少；</li>
<li>客户端只需要传入工厂类的参数，对于如何船舰对象的逻辑不需要关心。</li>
<li><em>优点：*</em></li>
<li>只需要传入一个正确的参数，就可以获取你所需要的对象，无须知道其创建的细节。</li>
<li><em>缺点：*</em></li>
<li>不易于扩展过于复杂的产品结构。<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public interface ILanguages &#123;</span><br><span class="line">    void out();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class JavaLanguage implements ILanguages &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void out() &#123;</span><br><span class="line">        System.out.println(&quot;JavaLanguage--------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PythonLanguage implements ILanguages &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void out() &#123;</span><br><span class="line">        System.out.println(&quot;PythonLanguage--------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class LanaguageFactory &#123;</span><br><span class="line">    public ILanguages create(Class&lt;?extends ILanguages&gt; clsName)&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (null != clsName)&#123;</span><br><span class="line">                return clsName.newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;pattern----------------start&quot;);</span><br><span class="line">        ILanguages language = new LanaguageFactory().create(PythonLanguage.class);</span><br><span class="line">        language.out();</span><br><span class="line">        System.out.println(&quot;pattern----------------end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h3><p>工厂方法模式,Factory Method Pattern，指定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类中进行。属于创建型设计模式。<br><strong>适用场景：</strong> </p>
<ul>
<li>创建对象需要大量重复的代码。</li>
<li>客户端(应用层)不依赖产品类实例如何被创建、实现等细节。</li>
<li>一个类通过其子类来指定创建哪个对象。</li>
<li><em>优点：*</em> </li>
<li>用户只需关心所需产品对应的工厂，无需关心创建细节。</li>
<li>加入新产品需求符合开闭原则，提高了系统的可扩展性。</li>
<li><em>缺点：*</em> </li>
<li>类的个数容易过多，增加了代码的复杂度。</li>
<li>增加了系统的抽象性和理解难度。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public interface ILanguages &#123;</span><br><span class="line">    void out();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class JavaLanguage implements ILanguages &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void out() &#123;</span><br><span class="line">        System.out.println(&quot;JavaLanguage--------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PythonLanguage implements ILanguages &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void out() &#123;</span><br><span class="line">        System.out.println(&quot;PythonLanguage--------------&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface ILanaguageFactory &#123;</span><br><span class="line">     ILanguages create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class JavaLanguageFactory implements ILanaguageFactory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public ILanguages create() &#123;</span><br><span class="line">        return new JavaLanguage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PythonLanguageFactory implements ILanaguageFactory &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public ILanguages create() &#123;</span><br><span class="line">        return new PythonLanguage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;pattern----------------start&quot;);</span><br><span class="line">        ILanaguageFactory languageFactory = new JavaLanguageFactory();</span><br><span class="line">        ILanguages languages = languageFactory.create();</span><br><span class="line">        languages.out();</span><br><span class="line">        System.out.println(&quot;pattern----------------end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>抽象工厂模式(Abastract Factory Pattern)是指提供一个创建一系列相关或相互依赖对象的接口，无须指定他们具体的类。属于创建型设计模式。<br><img src="http://nunu03.github.io/2022/06/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/pattern-factory.png" alt><br>产品族：一系列的相关的产品，整合到一起有关联性。<br>产品等级：同一个继承体系。<br><strong>适用场景：</strong> </p>
<ul>
<li>客户端(应用层)不依赖产品类实例如何被创建、实现等细节。</li>
<li>强调一系列相关的产品对象(属于同一产品族)一起使用创建对象需要大量重复的代码。</li>
<li>提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li>
<li><em>优点：*</em> </li>
<li>具体产品在应用层代码隔离，无须关心创建细节。</li>
<li>将一个系列的产品族统一到一起创建。</li>
<li><em>缺点：*</em> </li>
<li>规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口。</li>
<li>增加了系统的抽象性和理解难度。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">public interface IFile &#123;</span><br><span class="line">    void setParams();</span><br><span class="line">&#125;</span><br><span class="line">public interface IMethod &#123;</span><br><span class="line">    void setValue();</span><br><span class="line">&#125;</span><br><span class="line">public abstract class LanguageFactory &#123;</span><br><span class="line">    public void init()&#123;</span><br><span class="line">        System.out.println(&quot;初始化&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected  abstract IFile createFile();</span><br><span class="line"></span><br><span class="line">    protected  abstract IMethod createMethod();</span><br><span class="line">&#125;</span><br><span class="line">.......................................................</span><br><span class="line">public class JavaFile implements IFile&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void setParams() &#123;</span><br><span class="line">        System.out.println(&quot;JavaFile-----setParams&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class JavaMethod implements  IMethod&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void setValue() &#123;</span><br><span class="line">        System.out.println(&quot;JavaMethod-----setValue&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class JavaLanguageFactory extends LanguageFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected IFile createFile() &#123;</span><br><span class="line">        super.init();</span><br><span class="line">        return new JavaFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected IMethod createMethod() &#123;</span><br><span class="line">        super.init();</span><br><span class="line">        return new JavaMethod();</span><br><span class="line">&#125;</span><br><span class="line">.......................................................</span><br><span class="line">public class PythonFile implements IFile &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void setParams() &#123;</span><br><span class="line">        System.out.println(&quot;PythonFile-----setParams&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class PythonMethod implements IMethod &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void setValue() &#123;</span><br><span class="line">        System.out.println(&quot;PythonMethod-----setValue&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class PythonLanguageFactory extends LanguageFactory &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected IFile createFile() &#123;</span><br><span class="line">        super.init();</span><br><span class="line">        return new PythonFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected IMethod createMethod() &#123;</span><br><span class="line">        super.init();</span><br><span class="line">        return new PythonMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.......................................................</span><br><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        System.out.println(&quot;pattern----------------start&quot;);</span><br><span class="line">        LanguageFactory factory = new JavaLanguageFactory();</span><br><span class="line">        factory.createFile().setParams();</span><br><span class="line">        factory.createMethod().setValue();</span><br><span class="line">        System.out.println(&quot;pattern----------------end&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>比如在58同城IM source体系中，具体的业务实现，可以分为交友与同镇，同城等，三者大部分业务相同，但是也有不同的业务卡片。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式(Singleton Pattern) 是指确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。隐藏其所有的构造方法。属于创建型模式。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.bilibili.com/video/BV1L5411R7BP?p=4&spm_id_from=pageDriver&vd_source=5442b4c25ece27e33e3aeca4f29ec7f6" target="_blank" rel="noopener">从未见过如此通俗易懂的Java设计模式教程</a></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[手写实现ARouter]]></title>
      <url>/2022/06/09/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0ARouter/</url>
      <content type="html"><![CDATA[<h2 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h2><p>可以理解为解耦复杂系统时将多个功能模块拆分，重组的过程。在Android工程中，表现就是把app按照其业务的不同，划分为不同的Module。举例一点，比如我在开发58同城时，具有很多个业务，房产，招聘，新车，每一个业务线都是独立的，可以单独运行，相互之间并不依赖，但是在平台中，可以做到横向的互相跳转。所以组件化有点有很多：</p>
<ul>
<li>1.各组件只关系自己功能开发，模块内代码高度聚合，只负责一项任务；</li>
<li>2.业务之间不干扰，提升协作的效率；</li>
<li>3.业务组件可插拔，比如招聘，可以随时集成到58同镇平台；</li>
<li>4.业务之间不直接依赖，各个业务更独立，降低了耦合；</li>
<li>5.可以单独编译，加快编译速度，提高开发效率；<a id="more"></a></li>
<li>6.。。。。。。</li>
</ul>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>ARouter，阿里开源，一个用于帮助 Android App 进行组件化改造的框架 —— 支持模块间的路由、通信、解耦</p>
<h2 id="手写实现简单ARouter"><a href="#手写实现简单ARouter" class="headerlink" title="手写实现简单ARouter"></a>手写实现简单ARouter</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p><img src="http://nunu03.github.io/2022/06/09/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0ARouter/router-ml.png" alt></p>
<h3 id="router实现"><a href="#router实现" class="headerlink" title="router实现"></a>router实现</h3><p>具体原理，就是在我们router有一个单例，这个单例保存了一个Map，而这个map存了key-value,key是我们的自定义的字符串，value就是我们的Activity.class。然后我们的业务模块就可以把自己的Activity，put到这个map里，而其他的业务就可以根据key拿到Activity，从而就可以实现Intent跳转了。路由代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">private static volatile CRouter mInstance;</span><br><span class="line">    // 存储所有的注册Activity</span><br><span class="line">    private  static Map&lt;String,Class&lt;? extends Activity&gt;&gt; routers = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    private CRouter()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static  CRouter getInstance()&#123;</span><br><span class="line">        if (mInstance == null)&#123;</span><br><span class="line">            synchronized (CRouter.class)&#123;</span><br><span class="line">                if (mInstance == null)&#123;</span><br><span class="line">                    mInstance = new CRouter();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void init(Application application)&#123;</span><br><span class="line">//        new JobRouter().loadRouters(routers);</span><br><span class="line">//        new CarRouter().loadRouters(routers);</span><br><span class="line">        //这里可以用ClassLoader和DexFile便利拿到所有com.example.router包下的类，再通过反射,拿到Router并调用loadRouters注册所有Activity，// 就不可以不用手动执行new JobRouter().loadRouters(routers);当然我们也拿不到JobRouter，CarRouter；</span><br><span class="line">        try &#123;</span><br><span class="line">            Set&lt;String&gt; classNames = ClassUtils.getFileNameByPackageName(application,&quot;com.example.routers&quot;);</span><br><span class="line">            for (String clsName : classNames) &#123;</span><br><span class="line">                Class&lt;?&gt; cls = Class.forName(clsName);</span><br><span class="line">                if (IRouteLoad.class.isAssignableFrom(cls))&#123;</span><br><span class="line">                    IRouteLoad iRouteLoad = (IRouteLoad)cls.newInstance();</span><br><span class="line">                    iRouteLoad.loadRouters(routers);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void startActivity(Activity activity,String path)&#123;</span><br><span class="line">        Class&lt;? extends Activity&gt; cls = routers.get(path);</span><br><span class="line">        if (cls != null)&#123;</span><br><span class="line">            Intent intent = new Intent(activity,cls);</span><br><span class="line">            activity.startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public void register(String path,Class&lt;? extends Activity&gt; cls )&#123;</span><br><span class="line">        routers.put(path,cls);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>工具类如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class ClassUtils &#123;</span><br><span class="line">    //获取程序所欲apk</span><br><span class="line">    public static List&lt;String&gt; getSourcePaths(Context context) throws PackageManager.NameNotFoundException &#123;</span><br><span class="line">        ApplicationInfo applicationInfo = context.getPackageManager()</span><br><span class="line">                .getApplicationInfo(context.getPackageName(),0);</span><br><span class="line">        List&lt;String&gt; sourcePaths = new ArrayList&lt;&gt;();</span><br><span class="line">        //当前应用的apk</span><br><span class="line">        sourcePaths.add(applicationInfo.sourceDir);</span><br><span class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP)&#123;</span><br><span class="line">            if (null != applicationInfo.splitSourceDirs)&#123;</span><br><span class="line">                sourcePaths.addAll(Arrays.asList(applicationInfo.splitSourceDirs));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sourcePaths;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Set&lt;String&gt; getFileNameByPackageName(Application context, String packagename) throws PackageManager.NameNotFoundException&#123;</span><br><span class="line">        Set&lt;String&gt; classNames = new HashSet&lt;&gt;();</span><br><span class="line">        List&lt;String&gt; paths = getSourcePaths(context);</span><br><span class="line">        for (String path: paths)&#123;</span><br><span class="line">            DexFile dexFile = null;</span><br><span class="line">            try&#123;</span><br><span class="line">                //加载apk中dex，并便利获得所有的packageName的类</span><br><span class="line">                dexFile = new DexFile(path);</span><br><span class="line">                Enumeration&lt;String&gt; dexEntries = dexFile.entries();</span><br><span class="line">                //遍历整个apk中的所有类</span><br><span class="line">                while (dexEntries.hasMoreElements())&#123;</span><br><span class="line">                    String className = dexEntries.nextElement();</span><br><span class="line">                    if (className.startsWith(packagename))&#123;</span><br><span class="line">                        classNames.add(className);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;catch (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                if (null!= dexFile)&#123;</span><br><span class="line">                    try&#123;</span><br><span class="line">                        dexFile.getClass();</span><br><span class="line">                    &#125;catch (Exception e)&#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return classNames;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>业务模块注册：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 车业务</span><br><span class="line">package com.example.router;</span><br><span class="line"></span><br><span class="line">public class CarRouter implements IRouteLoad &#123;</span><br><span class="line">    public void loadRouters(Map&lt;String,Class&lt;? extends Activity&gt;&gt; routers)&#123;</span><br><span class="line">        routers.put(&quot;/path/car&quot;, CarActivity.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 招聘业务</span><br><span class="line">package com.example.router;</span><br><span class="line"></span><br><span class="line">public class JobRouter implements IRouteLoad &#123;</span><br><span class="line">    public void loadRouters(Map&lt;String,Class&lt;? extends Activity&gt;&gt; routers)&#123;</span><br><span class="line">        routers.put(&quot;/path/job&quot;, JobActivity.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注册好了，这样我们就可以跳转了：在车跳转到招聘业务，完成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CRouter.getInstance().startActivity(this,&quot;/path/job&quot;);</span><br></pre></td></tr></table></figure>

<p>然后我们发现，注册的时候，需要每个业务线，都要手动注册put自己的key-value；而且注册的保命，类名不一样外，其他的代码实现都差不多。那有没有一种方式，动态生成呢？</p>
<h3 id="APT注解"><a href="#APT注解" class="headerlink" title="APT注解"></a>APT注解</h3><p><strong>注解的两个实现模块，都不能是android module。</strong><br>注解类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 用在什么地方</span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">//注解保留到：源码</span><br><span class="line">@Retention(RetentionPolicy.SOURCE)</span><br><span class="line">public @interface CRouterAnnotation &#123;</span><br><span class="line">    String value();// 我们需要的时字符串</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义注解实现：自动生成的类，是什么？就是一个.java文件.所以我们其实就是拿到内容，生成一个文件。<br>写入依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &quot;com.google.auto.service:auto-service:1.0-rc7&quot;</span><br><span class="line">    annotationProcessor &quot;com.google.auto.service:auto-service:1.0-rc7&quot;</span><br><span class="line">    implementation &apos;com.squareup:javapoet:1.13.0&apos;</span><br><span class="line"></span><br><span class="line">    implementation project(&quot;:apt-annotation&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">@AutoService(Processor.class)</span><br><span class="line">//指定我们自己的注解处理器：CRouterAnnotation，全路径</span><br><span class="line">@SupportedAnnotationTypes(&quot;com.example.apt_annotation.CRouterAnnotation&quot;)</span><br><span class="line">@SupportedOptions(&quot;AROUTER_MODULE_NAME&quot;)</span><br><span class="line">public class RouterProcessor extends AbstractProcessor &#123;</span><br><span class="line">    private Messager messager;//打印日志</span><br><span class="line">    private Filer filer;//文件持有，管理者</span><br><span class="line">    private String moduleName;//业务线的名称</span><br><span class="line">    @Override</span><br><span class="line">    public synchronized void init(ProcessingEnvironment processingEnv) &#123;</span><br><span class="line">        super.init(processingEnv);</span><br><span class="line">        messager = processingEnv.getMessager();</span><br><span class="line">        filer = processingEnv.getFiler();</span><br><span class="line">        Map&lt;String,String&gt; options =  processingEnv.getOptions();</span><br><span class="line">        moduleName = options.get(&quot;AROUTER_MODULE_NAME&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean process(Set&lt;? extends TypeElement&gt; annotations,</span><br><span class="line">                           RoundEnvironment roundEnv) &#123;</span><br><span class="line">        //使用了@CRouterAnnotation注解类的节点的集合，包括包名、类名、属性、方法等节点。</span><br><span class="line">        Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(CRouterAnnotation.class);</span><br><span class="line">        //拼装类内容</span><br><span class="line">        StringBuilder sb = new StringBuilder(&quot;package com.example.routers;&quot; +</span><br><span class="line">                &quot;\n import android.app.Activity; \n&quot;);</span><br><span class="line">        for (Element element : elements)&#123;</span><br><span class="line">            TypeElement typeElement = (TypeElement)element;//获取类信息</span><br><span class="line">            sb.append(&quot;import &quot;);</span><br><span class="line">            sb.append(typeElement.getQualifiedName());// com.example.mycar.CarActivity</span><br><span class="line">            sb.append(&quot;;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append( &quot;import com.example.myrouteapi.IRouteLoad;\n&quot;);</span><br><span class="line">        sb.append(&quot;import java.util.Map;\n&quot;);</span><br><span class="line">        sb.append(&quot;public class &quot;+ moduleName+ &quot;Router implements IRouteLoad &#123;\n&quot;);</span><br><span class="line">        sb.append(&quot;    public void loadRouters(Map&lt;String,Class&lt;? extends Activity&gt;&gt; routers)&#123;\n&quot;);</span><br><span class="line"></span><br><span class="line">        for (Element element : elements)&#123;</span><br><span class="line">            CRouterAnnotation cRouterAnnotation = element.getAnnotation(CRouterAnnotation.class);</span><br><span class="line">            String value = cRouterAnnotation.value();</span><br><span class="line">            Name clsName = element.getSimpleName();</span><br><span class="line">            sb.append(&quot;routers.put(\&quot;&quot;+value+ &quot;\&quot;,&quot;).append(clsName+&quot;.class);\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(&quot;    &#125;\n&quot;);</span><br><span class="line">        sb.append(&quot;&#125;\n&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        messager.printMessage(Diagnostic.Kind.NOTE,&quot;moduleName--------：&quot;+moduleName);</span><br><span class="line">        try &#123;</span><br><span class="line">            //生成文件</span><br><span class="line">           JavaFileObject sourceFile =  filer.createSourceFile(&quot;com.example.routers.&quot;+moduleName+&quot;Router&quot;);</span><br><span class="line">            OutputStream os = sourceFile.openOutputStream();</span><br><span class="line">            os.write(sb.toString().getBytes());</span><br><span class="line">            os.close();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意模块名称需要配置：AROUTER_MODULE_NAME，就是RouterProcessor中需要的类名前缀。这个是在模块业务中配置的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javaCompileOptions &#123;</span><br><span class="line">    annotationProcessorOptions &#123;</span><br><span class="line">        arguments = [AROUTER_MODULE_NAME: project.getName()]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还需要配置依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation project(&apos;:myrouteapi&apos;)</span><br><span class="line">    implementation project(&apos;:apt-annotation&apos;)</span><br><span class="line">    annotationProcessor project(&quot;:apt-processor&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>设置协议key：”/path/job”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@CRouterAnnotation(&quot;/path/job&quot;)</span><br><span class="line">public class JobActivity extends AppCompatActivity &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终在各业务模块生成：<br><img src="http://nunu03.github.io/2022/06/09/%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0ARouter/router-apt.png" alt><br>OK，实现完成。</p>
<p>AutoService是什么？RouterProcessor是怎么执行的？看我写的<a href="https://nunu03.github.io/2022/06/07/SPI%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/">SPI原理</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实如上只是简单的实现了ARouter，还有很多改进的地方，比如可以再次基础上根据业务改进我们的框架；比如我们可以通过Gradle 字节码插桩提升我们的初始化速度，通过URI实现我们的跳转配置，增加协议的参数等等。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/alibaba/ARouter/blob/master/README_CN.md" target="_blank" rel="noopener">ARouter中文文档</a><br><a href="https://www.bilibili.com/video/BV1gT4y1q74f?p=10&spm_id_from=pageDriver" target="_blank" rel="noopener">组件化视频</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 组件化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Glide图片加载框架原理]]></title>
      <url>/2022/06/08/Glide%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="什么是Glide"><a href="#什么是Glide" class="headerlink" title="什么是Glide"></a>什么是Glide</h2><p>Glide是一个快速高效的图片加载库(Android)，性能高，流式API的语法特点。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>1.可配置高，自适应度高；</li>
<li>2.支持多种数据源，本地，网络，assets，gif再glide中都是支持的；</li>
<li>3.高效缓存，支持memory和disk图片缓存，默认使用二级缓存；</li>
<li>4.具有和AF同步的生命周期；</li>
<li>5.高效处理Bitmap：使用Bitmap pool复用Bitmap，享元设计模式；</li>
<li>6.图片接在过程可以监听。<a id="more"></a>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2>Glide 充分考虑了Android图片加载性能的两个关键方面：</li>
<li>图片解码速度</li>
<li>解码图片带来的资源压力<br>为了让用户拥有良好的App使用体验，图片不仅要快速加载，而且还不能因为过多的主线程I/O或频繁的垃圾回收导致页面的闪烁和抖动现象。</li>
</ul>
<p>Glide使用了多个步骤来确保在Android上加载图片尽可能的快速和平滑：</p>
<ul>
<li>自动、智能地下采样(downsampling)和缓存(caching)，以最小化存储开销和解码次数；</li>
<li>积极的资源重用，例如字节数组和Bitmap，以最小化昂贵的垃圾回收和堆碎片影响；</li>
<li>深度的生命周期集成，以确保仅优先处理活跃的Fragment和Activity的请求，并有利于应用在必要时释放资源以避免在后台时被杀掉。<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2>图片请求，是发送到一个队列里，然后多个线程进行消费。如下图：<br><img src="http://nunu03.github.io/2022/06/08/Glide%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/glide-jg.png" alt><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">  google()</span><br><span class="line">  mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  implementation &apos;com.github.bumptech.glide:glide:4.11.0&apos;</span><br><span class="line">  annotationProcessor &apos;com.github.bumptech.glide:compiler:4.11.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>this是imageview绑定的生命周期对象（Activity或Fragment）。<br><img src="http://nunu03.github.io/2022/06/08/Glide%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/glide-this.png" alt></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">RequestOptions requestOptions = new RequestOptions();</span><br><span class="line">Glide.with(this)</span><br><span class="line">    .load(&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fi0&quot;)</span><br><span class="line">    .addListener(new RequestListener&lt;Drawable&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean onLoadFailed(@Nullable GlideException e, Object model, Target&lt;Drawable&gt; target, boolean isFirstResource) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public boolean onResourceReady(Drawable resource, Object model, Target&lt;Drawable&gt; target, DataSource dataSource, boolean isFirstResource) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .centerCrop()</span><br><span class="line">    .placeholder(R.drawable.ic_launcher_background)</span><br><span class="line">    .error(R.drawable.ic_launcher_foreground)</span><br><span class="line">    .override(100,100)</span><br><span class="line">    .apply(requestOptions)</span><br><span class="line">    .into(img);</span><br></pre></td></tr></table></figure>

<p>override,默认使用xml设置，如果这里设置，就使用override设置大小。也可以通过RequestOptions设置。</p>
<h3 id="取消加载"><a href="#取消加载" class="headerlink" title="取消加载:"></a>取消加载:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(this).clear(imageView);</span><br></pre></td></tr></table></figure>

<p>尽管及时取消不必要的加载是很好的实践，但这并不是必须的操作。实际上，当 Glide.with() 中传入的 Activity 或 Fragment 实例销毁时，Glide 会自动取消加载并回收资源。</p>
<h3 id="过度"><a href="#过度" class="headerlink" title="过度"></a>过度</h3><p>再加载图片过程中，可以定义glide如何从占位到新加载的图片，或从缩略图到全尺寸图像的过度。再这些过程中，可以设置过渡动画。Glide默认实现了交叉淡入效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">DrawableCrossFadeFactory fadeFactory = new DrawableCrossFadeFactory.Builder().setCrossFadeEnabled(true).build();</span><br><span class="line"></span><br><span class="line">Glide.with(this)</span><br><span class="line">  .transition(DrawableTransitionOptions.with(fadeFactory))</span><br><span class="line">  .into(img);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Glide.with(this)</span><br><span class="line">  .transition(DrawableTransitionOptions.with(3000))</span><br><span class="line">  .into(img);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Glide.with(this).asBitmap()</span><br><span class="line">  .transition(BitmapTransitionOptions.with(3000))</span><br><span class="line">  .into(img);</span><br></pre></td></tr></table></figure>

<p>不幸的是，虽然禁用交叉淡入通常是一个比较好的默认行为，当待加载的图片包含透明像素时仍然可能造成问题。当占位符比实际加载的图片要大，或者图片部分为透明时，禁用交叉淡入会导致动画完成后占位符在图片后面仍然可见。如果你在加载透明图片时使用了占位符，你可以启用交叉淡入，具体办法是调整 DrawableCrossFadeFactory 里的参数并将结果传到 transition() 中：<br>为了提升性能，请在使用 Glide 向 ListView , GridView, 或 RecyclerView 加载图片时考虑避免使用动画，尤其是大多数情况下，你希望图片被尽快缓存和加载的时候。</p>
<h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h3><p>在Glide中，Transformations 可以获取资源并修改它，然后返回被修改后的资源。通常变换操作是用来完成剪裁或对位图应用过滤器，但它也可以用于转换GIF动画，甚至自定义的资源类型。<br>Glide 提供了很多内置的变换，包括：</p>
<ul>
<li>CenterCrop</li>
<li>FitCenter</li>
<li>CircleCrop<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Glide.with(fragment)</span><br><span class="line">  .load(url)</span><br><span class="line">  .fitCenter()</span><br><span class="line">  .into(imageView);</span><br><span class="line"></span><br><span class="line">或使用 RequestOptions ：</span><br><span class="line"></span><br><span class="line">RequestOptions options = new RequestOptions();</span><br><span class="line">options.centerCrop();</span><br><span class="line"></span><br><span class="line">Glide.with(fragment)</span><br><span class="line">    .load(url)</span><br><span class="line">    .apply(options)</span><br><span class="line">    .into(imageView);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这里的变换指的是多重变换：默认情况下，每个 transform() 调用，或任何特定转换方法(fitCenter(), centerCrop(), bitmapTransform() etc)的调用都会替换掉之前的变换。<br>如果你想在单次加载中应用多个变换，请使用 MultiTransformation 类，或其快捷方法 .transforms() 。<br>比如：</p>
<ul>
<li>1.CircleCrop：圆角</li>
<li>2.RoundedCorners:内个叫统一指定</li>
<li>3.GranularRoundedCorners:四个角单独指定</li>
<li>4.Rotate：旋转<br>看下图效果：<br><img src="http://nunu03.github.io/2022/06/08/Glide%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/glide-circle.png" alt><br>其他效果，自行调试。<br>其中变换还有定制变换，重用变变换，具体自行看文档。<h3 id="Generated-API"><a href="#Generated-API" class="headerlink" title="Generated API"></a>Generated API</h3>添加 Glide 注解处理器的依赖：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  annotationProcessor &apos;com.github.bumptech.glide:compiler:4.11.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>在 Application 模块中包含一个 AppGlideModule 的实现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import com.bumptech.glide.annotation.GlideModule;</span><br><span class="line">import com.bumptech.glide.module.AppGlideModule;</span><br><span class="line"></span><br><span class="line">@GlideModule</span><br><span class="line">public final class MyAppGlideModule extends AppGlideModule &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Generated API 默认名为 GlideApp ，与 Application 模块中 AppGlideModule的子类包名相同。在 Application 模块中将 Glide.with() 替换为 GlideApp.with()，即可使用该 API 去完成加载工作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GlideApp.with(fragment)</span><br><span class="line">   .load(myUrl)</span><br><span class="line">   .placeholder(R.drawable.placeholder)</span><br><span class="line">   .fitCenter()</span><br><span class="line">   .into(imageView);</span><br><span class="line">```   </span><br><span class="line">与 Glide.with() 不同，诸如 fitCenter() 和 placeholder() 等选项在 Builder 中直接可用，并不需要再传入单独的 RequestOptions 对象。</span><br><span class="line">### GlideExtension &amp; GlideOption</span><br><span class="line">Option扩展类，可以自定义实现选项配置。使用Glide更加简单。**变换效果不能配置**</span><br></pre></td></tr></table></figure>

<p>@GlideExtension<br>public class MyAppExtension {<br>// Size of mini thumb in pixels.<br>private static final int MINI_THUMB_SIZE = 100;</p>
<p>private MyAppExtension() { } // utility class</p>
<p>//静态方法，BaseRequestOptions的扩展，封装了一些options的配置方法。<br>@NonNull<br>@GlideOption<br>public static BaseRequestOptions<?> miniThumb(BaseRequestOptions<?> options) {<br>return options<br>    .fitCenter()<br>    .override(MINI_THUMB_SIZE);<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">之后你就可以使用生成的 GlideApp 类调用你的自定义方法：</span><br></pre></td></tr></table></figure>

<p>GlideApp.with(fragment)<br>   .load(url)<br>   .miniThumb(thumbnailSize)<br>   .into(imageView);   </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">## 源码分析</span><br><span class="line"></span><br><span class="line">根据Glide分成三条主线：</span><br><span class="line"></span><br><span class="line">### with</span><br><span class="line"></span><br><span class="line">with返回的是RequestManager对象</span><br></pre></td></tr></table></figure>

<p>public static RequestManager with(@NonNull FragmentActivity activity) {<br>    return getRetriever(activity).get(activity);<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最总会进入这个方法：这里会给Glide添加生命周期。</span><br></pre></td></tr></table></figure>

<p>@NonNull<br>public RequestManager get(@NonNull FragmentActivity activity) {<br>    //如果不是主线程，则没有生命周期<br>    if (Util.isOnBackgroundThread()) {<br>        return get(activity.getApplicationContext());<br>    } else {<br>        assertNotDestroyed(activity);<br>        //主线程，添加了一个空白的Fragment，通过空白的Fragment监听this的生命周期。<br>        FragmentManager fm = activity.getSupportFragmentManager();<br>        return supportFragmentGet(activity, fm, /<em>parentHint=</em>/ null, isActivityVisible(activity));<br>    }<br>}</p>
<p>private RequestManager supportFragmentGet(<br>    @NonNull Context context,<br>    @NonNull FragmentManager fm,<br>    @Nullable Fragment parentHint,<br>    boolean isParentVisible) {<br>    SupportRequestManagerFragment current =<br>        getSupportRequestManagerFragment(fm, parentHint, isParentVisible);<br>    RequestManager requestManager = current.getRequestManager();<br>    if (requestManager == null) {<br>        Glide glide = Glide.get(context);<br>        requestManager =<br>            factory.build(<br>                glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);<br>        current.setRequestManager(requestManager);<br>    }<br>    return requestManager;<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">同时,Glide再构造对象时,会顶一个registry,这个对象会append多种设置:</span><br></pre></td></tr></table></figure>

<p>registry<br>        .append(Uri.class, InputStream.class, new UriLoader.StreamFactory(contentResolver))<br>        .append(<br>            Uri.class,<br>            ParcelFileDescriptor.class,<br>            new UriLoader.FileDescriptorFactory(contentResolver))<br>        .append(<br>            Uri.class,<br>            AssetFileDescriptor.class,<br>            new UriLoader.AssetFileDescriptorFactory(contentResolver))<br>        .append(Uri.class, InputStream.class, new UrlUriLoader.StreamFactory())<br>        .append(URL.class, InputStream.class, new UrlLoader.StreamFactory())<br>        .append(Uri.class, File.class, new MediaStoreFileLoader.Factory(context))<br>        .append(GlideUrl.class, InputStream.class, new HttpGlideUrlLoader.Factory())<br>        .append(byte[].class, ByteBuffer.class, new ByteArrayLoader.ByteBufferFactory())<br>        .append(byte[].class, InputStream.class, new ByteArrayLoader.StreamFactory())<br>        .append(Uri.class, Uri.class, UnitModelLoader.Factory.<uri>getInstance())<br>        .append(Drawable.class, Drawable.class, UnitModelLoader.Factory.<drawable>getInstance())<br>        .append(Drawable.class, Drawable.class, new UnitDrawableDecoder())<br>        /* Transcoders */<br>        .register(Bitmap.class, BitmapDrawable.class, new BitmapDrawableTranscoder(resources))<br>        .register(Bitmap.class, byte[].class, bitmapBytesTranscoder)<br>        .register(<br>            Drawable.class,<br>            byte[].class,<br>            new DrawableBytesTranscoder(<br>                bitmapPool, bitmapBytesTranscoder, gifDrawableBytesTranscoder))<br>        .register(GifDrawable.class, byte[].class, gifDrawableBytesTranscoder);</drawable></uri></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### load</span><br><span class="line"></span><br><span class="line">load是指定url，返回的RequestBuilder对象，</span><br></pre></td></tr></table></figure>

<p>public RequestBuilder<drawable> load(@Nullable String string) {<br>    return asDrawable().load(string);<br>}</drawable></p>
<p>private RequestBuilder<transcodetype> loadGeneric(@Nullable Object model) {<br>    this.model = model;<br>    isModelSet = true;<br>    return this;<br>}</transcodetype></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### into</span><br><span class="line"></span><br><span class="line">into，是重点啊,这个图片的显示,都在这个执行流程里:</span><br><span class="line">RequestBuilder.into -&gt; buildRequest -&gt; </span><br><span class="line">RequestManager.track -&gt; RequestTracker.runRequest -&gt; SingleRequest.begin -&gt; onSizeReady -&gt; Engile.load -&gt; loadFromMemory -&gt;waitForExistingOrStartNewJob -&gt;  EngineJob.build -&gt; DecodeJob.build -&gt; run -&gt;  runWrapped &gt; runGenerators -&gt; SourceGenerator.startNext -&gt; DecodeHelper.getLoadData -&gt; HttpGlideUrlLoader.buildLoadData -&gt; HttpUrlFetcher.loadData &gt; loadDataWithRedirects</span><br></pre></td></tr></table></figure>

<p>@NonNull<br>public ViewTarget&lt;ImageView, TranscodeType&gt; into(@NonNull ImageView view) {<br>Util.assertMainThread();<br>Preconditions.checkNotNull(view);</p>
<p>BaseRequestOptions&lt;?&gt; requestOptions = this;<br>if (!requestOptions.isTransformationSet()<br>    &amp;&amp; requestOptions.isTransformationAllowed()<br>    &amp;&amp; view.getScaleType() != null) {<br>    // Clone in this method so that if we use this RequestBuilder to load into a View and then<br>    // into a different target, we don’t retain the transformation applied based on the previous<br>    // View’s scale type.<br>    switch (view.getScaleType()) {<br>    case CENTER_CROP:<br>        requestOptions = requestOptions.clone().optionalCenterCrop();<br>        break;<br>    case CENTER_INSIDE:<br>        requestOptions = requestOptions.clone().optionalCenterInside();<br>        break;<br>    case FIT_CENTER:<br>    case FIT_START:<br>    case FIT_END:<br>        requestOptions = requestOptions.clone().optionalFitCenter();<br>        break;<br>    case FIT_XY:<br>        requestOptions = requestOptions.clone().optionalCenterInside();<br>        break;<br>    case CENTER:<br>    case MATRIX:<br>    default:<br>        // Do nothing.<br>    }<br>}</p>
<p>return into(<br>    //得到ImageViewTarget<br>    glideContext.buildImageViewTarget(view, transcodeClass),<br>    /<em>targetListener=</em>/ null,<br>    requestOptions,<br>    Executors.mainThreadExecutor());<br>}</p>
<p>private &lt;Y extends Target<transcodetype>&gt; Y into(<br>    @NonNull Y target,<br>    @Nullable RequestListener<transcodetype> targetListener,<br>    BaseRequestOptions&lt;?&gt; options,<br>    Executor callbackExecutor) {<br>    。。。。。。。。。。。。。。。。。。<br>    // 构建一个请求,实现类SingleRequest<br>    Request request = buildRequest(target, targetListener, options, callbackExecutor);</transcodetype></transcodetype></p>
<pre><code>Request previous = target.getRequest();
//如果上一个请求没有请求完
if (request.isEquivalentTo(previous)
    &amp;&amp; !isSkipMemoryCacheWithCompletePreviousRequest(options, previous)) {
    if (!Preconditions.checkNotNull(previous).isRunning()) {
        previous.begin();
    }
    return target;
}

requestManager.clear(target);
target.setRequest(request);
requestManager.track(target, request);
return target;</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestTracker:</span><br></pre></td></tr></table></figure>

<p>//正在运行的队列<br>private final Set<request> requests =<br>    Collections.newSetFromMap(new WeakHashMap&lt;Request, Boolean&gt;());<br>//等待中的队列<br>private final List<request> pendingRequests = new ArrayList&lt;&gt;();</request></request></p>
<p>public void runRequest(@NonNull Request request) {<br>requests.add(request);<br>    if (!isPaused) {<br>        request.begin();<br>    } else {<br>        request.clear();<br>        if (Log.isLoggable(TAG, Log.VERBOSE)) {<br>        Log.v(TAG, “Paused, delaying request”);<br>        }<br>        pendingRequests.add(request);<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SingleRequest.begin:</span><br></pre></td></tr></table></figure>

<p>@Override<br>public void begin() {<br>synchronized (requestLock) {<br>    。。。。。。。。。。。。<br>    //正在执行，直接返回异常<br>    if (status == Status.RUNNING) {<br>    throw new IllegalArgumentException(“Cannot restart a running request”);<br>    }</p>
<pre><code>if (status == Status.COMPLETE) {
onResourceReady(resource, DataSource.MEMORY_CACHE);
return;
}

status = Status.WAITING_FOR_SIZE;
if (Util.isValidDimensions(overrideWidth, overrideHeight)) {
    onSizeReady(overrideWidth, overrideHeight);
} else {
    target.getSize(this);
}</code></pre><p>…………………………………<br>}<br>// 传进宽高<br>public void onSizeReady(int width, int height) {<br>    synchronized (requestLock) {<br>    ………………………………..<br>        loadStatus =<br>            engine.load(<br>                glideContext,<br>                model,<br>                requestOptions.getSignature(),<br>                this.width,<br>                this.height,<br>                requestOptions.getResourceClass(),<br>                transcodeClass,<br>                priority,<br>                requestOptions.getDiskCacheStrategy(),<br>                requestOptions.getTransformations(),<br>                requestOptions.isTransformationRequired(),<br>                requestOptions.isScaleOnlyOrNoTransform(),<br>                requestOptions.getOptions(),<br>                requestOptions.isMemoryCacheable(),<br>                requestOptions.getUseUnlimitedSourceGeneratorsPool(),<br>                requestOptions.getUseAnimationPool(),<br>                requestOptions.getOnlyRetrieveFromCache(),<br>                this,<br>                callbackExecutor);<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Engine.load</span><br></pre></td></tr></table></figure>

<p>public <r> LoadStatus load(<br>      GlideContext glideContext,<br>      Object model,<br>      Key signature,<br>      int width,<br>      int height,<br>      Class<?> resourceClass,
      Class<r> transcodeClass,
      Priority priority,
      DiskCacheStrategy diskCacheStrategy,
      Map<class<?>, Transformation&lt;?&gt;&gt; transformations,<br>      boolean isTransformationRequired,<br>      boolean isScaleOnlyOrNoTransform,<br>      Options options,<br>      boolean isMemoryCacheable,<br>      boolean useUnlimitedSourceExecutorPool,<br>      boolean useAnimationPool,<br>      boolean onlyRetrieveFromCache,<br>      ResourceCallback cb,<br>      Executor callbackExecutor) {<br>    long startTime = VERBOSE_IS_LOGGABLE ? LogTime.getLogTime() : 0;</class<?></r></r></p>
<pre><code>//生成的 key 会用于缓存
EngineKey key =
    keyFactory.buildKey(
        model,
        signature,
        width,
        height,
        transformations,
        resourceClass,
        transcodeClass,
        options);

EngineResource&lt;?&gt; memoryResource;
synchronized (this) {
 // 从缓存中拿
memoryResource = loadFromMemory(key, isMemoryCacheable, startTime);

    if (memoryResource == null) {
        return waitForExistingOrStartNewJob(
            glideContext,
            model,
            signature,
            width,
            height,
            resourceClass,
            transcodeClass,
            priority,
            diskCacheStrategy,
            transformations,
            isTransformationRequired,
            isScaleOnlyOrNoTransform,
            options,
            isMemoryCacheable,
            useUnlimitedSourceExecutorPool,
            useAnimationPool,
            onlyRetrieveFromCache,
            cb,
            callbackExecutor,
            key,
            startTime);
    }
}
cb.onResourceReady(memoryResource, DataSource.MEMORY_CACHE);
return null;</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loadFromMemory从缓存取,也称运行时缓存(如果app被kill掉,就没有了):</span><br></pre></td></tr></table></figure>

<p>private EngineResource<?> loadFromMemory(
      EngineKey key, boolean isMemoryCacheable, long startTime) {
    if (!isMemoryCacheable) {
      return null;
    }
    // 先从活动缓存(用户正在显示的图片)拿,一级缓存
    EngineResource<?> active = loadFromActiveResources(key);<br>    if (active != null) {<br>      if (VERBOSE_IS_LOGGABLE) {<br>        logWithTimeAndKey(“Loaded resource from active resources”, startTime, key);<br>      }<br>      return active;<br>    }<br>    // 再从内存缓存(活动缓存回收后给到内存缓存)拿,二级缓存<br>    EngineResource&lt;?&gt; cached = loadFromCache(key);<br>    if (cached != null) {<br>      if (VERBOSE_IS_LOGGABLE) {<br>        logWithTimeAndKey(“Loaded resource from cache”, startTime, key);<br>      }<br>      return cached;<br>    }</p>
<pre><code>return null;</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">waitForExistingOrStartNewJob:缓存中没有</span><br></pre></td></tr></table></figure>

<p>private <r> LoadStatus waitForExistingOrStartNewJob(<br>    GlideContext glideContext,<br>    Object model,<br>    Key signature,<br>    int width,<br>    int height,<br>    Class<?> resourceClass,
    Class<r> transcodeClass,
    Priority priority,
    DiskCacheStrategy diskCacheStrategy,
    Map<class<?>, Transformation<?>> transformations,
    boolean isTransformationRequired,
    boolean isScaleOnlyOrNoTransform,
    Options options,
    boolean isMemoryCacheable,
    boolean useUnlimitedSourceExecutorPool,
    boolean useAnimationPool,
    boolean onlyRetrieveFromCache,
    ResourceCallback cb,
    Executor callbackExecutor,
    EngineKey key,
    long startTime) {
        //根据key拿当前正在运行中,有没有缓存(这里指磁盘缓存)可用,再验证一次缓存
    EngineJob<?> current = jobs.get(key, onlyRetrieveFromCache);<br>    if (current != null) {<br>        current.addCallback(cb, callbackExecutor);<br>        if (VERBOSE_IS_LOGGABLE) {<br>        logWithTimeAndKey(“Added to existing load”, startTime, key);<br>        }<br>        return new LoadStatus(cb, current);<br>    }<br>    // 网络请求了<br>    EngineJob<r> engineJob =<br>        engineJobFactory.build(<br>            key,<br>            isMemoryCacheable,<br>            useUnlimitedSourceExecutorPool,<br>            useAnimationPool,<br>            onlyRetrieveFromCache);</r></class<?></r></r></p>
<pre><code>DecodeJob&lt;R&gt; decodeJob =
    decodeJobFactory.build(
        glideContext,
        model,
        key,
        signature,
        width,
        height,
        resourceClass,
        transcodeClass,
        priority,
        diskCacheStrategy,
        transformations,
        isTransformationRequired,
        isScaleOnlyOrNoTransform,
        onlyRetrieveFromCache,
        options,
        engineJob);

jobs.put(key, engineJob);
//把decodeJob,添加给引擎job,然后开始执行.
engineJob.addCallback(cb, callbackExecutor);
engineJob.start(decodeJob);
return new LoadStatus(cb, engineJob);</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EngineJob,引擎Job,这里会由很多的线程池Executor,用来执行操作的:</span><br><span class="line">DecodeJob,是一个任务,runnable.</span><br></pre></td></tr></table></figure>

<p>private final StateVerifier stateVerifier = StateVerifier.newInstance();<br>private final ResourceListener resourceListener;<br>private final Pools.Pool&lt;EngineJob&lt;?&gt;&gt; pool;<br>private final EngineResourceFactory engineResourceFactory;<br>private final EngineJobListener engineJobListener;<br>private final GlideExecutor diskCacheExecutor;<br>private final GlideExecutor sourceExecutor;<br>private final GlideExecutor sourceUnlimitedExecutor;<br>private final GlideExecutor animationExecutor;<br>private final AtomicInteger pendingCallbacks = new AtomicInteger();</p>
<p>public synchronized void start(DecodeJob<r> decodeJob) {<br>    this.decodeJob = decodeJob;<br>    //线程池<br>    GlideExecutor executor =<br>        decodeJob.willDecodeFromCache() ? diskCacheExecutor : getActiveSourceExecutor();<br>    //执行runnable<br>    executor.execute(decodeJob);<br>}</r></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DecodeJob.run &gt; runWrapped &gt; runGenerators</span><br></pre></td></tr></table></figure>

<p>public void run() {<br>    DataFetcher&lt;?&gt; localFetcher = currentFetcher;<br>    try {<br>      if (isCancelled) {<br>        notifyFailed();<br>        return;<br>      }<br>      runWrapped();<br>    } catch (CallbackException e) {<br>    }<br>}</p>
<p>private void runWrapped() {<br>    switch (runReason) {<br>      case INITIALIZE:<br>        stage = getNextStage(Stage.INITIALIZE);<br>        currentGenerator = getNextGenerator();<br>        runGenerators();<br>        break;<br>      case SWITCH_TO_SOURCE_SERVICE:<br>        runGenerators();<br>        break;<br>      case DECODE_DATA:<br>        decodeFromRetrievedData();<br>        break;<br>      default:<br>        throw new IllegalStateException(“Unrecognized run reason: “ + runReason);<br>    }<br>}<br>//如果你配置了缓存策略,就使用,如果没有,就使用默认SOURCE策略<br>private DataFetcherGenerator getNextGenerator() {<br>    switch (stage) {<br>      case RESOURCE_CACHE:<br>        return new ResourceCacheGenerator(decodeHelper, this);<br>      case DATA_CACHE:<br>        return new DataCacheGenerator(decodeHelper, this);<br>      case SOURCE:<br>        return new SourceGenerator(decodeHelper, this);<br>      case FINISHED:<br>        return null;<br>      default:<br>        throw new IllegalStateException(“Unrecognized stage: “ + stage);<br>    }<br>}</p>
<p>private void runGenerators() {<br>    currentThread = Thread.currentThread();<br>    startFetchTime = LogTime.getLogTime();<br>    boolean isStarted = false;<br>    while (!isCancelled<br>        &amp;&amp; currentGenerator != null<br>        &amp;&amp; !(isStarted = currentGenerator.startNext())) {<br>      stage = getNextStage(stage);<br>      currentGenerator = getNextGenerator();</p>
<pre><code>  if (stage == Stage.SOURCE) {
    reschedule();
    return;
}</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SourceGenerator.startNext</span><br></pre></td></tr></table></figure>

<p>public boolean startNext() {<br>    if (dataToCache != null) {<br>      Object data = dataToCache;<br>      dataToCache = null;<br>      cacheData(data);<br>    }<br>    …………………………..<br>    loadData = null;<br>    boolean started = false;<br>    while (!started &amp;&amp; hasNextModelLoader()) {<br>        //获取网络请求的对象loadData.HttpUrlFetcher<br>      loadData = helper.getLoadData().get(loadDataListIndex++);<br>      if (loadData != null<br>          &amp;&amp; (helper.getDiskCacheStrategy().isDataCacheable(loadData.fetcher.getDataSource())<br>              || helper.hasLoadPath(loadData.fetcher.getDataClass()))) {<br>        started = true;<br>        //开始网络请求<br>        startNextLoad(loadData);<br>      }<br>    }<br>    return started;<br>}<br>// 这里创建了网络请求成功后的callback:DataCacheGenerator<br>private void cacheData(Object dataToCache) {<br>    sourceCacheGenerator =<br>        new DataCacheGenerator(Collections.singletonList(loadData.sourceKey), helper, this);<br>}</p>
<p>//网络请求fetcher.loadData<br>private void startNextLoad(final LoadData&lt;?&gt; toStart) {<br>    loadData.fetcher.loadData(<br>        helper.getPriority(),<br>        new DataCallback<object>() {<br>          @Override<br>          public void onDataReady(@Nullable Object data) {<br>            if (isCurrentRequest(toStart)) {<br>              onDataReadyInternal(toStart, data);<br>            }<br>          }</object></p>
<pre><code>  @Override
  public void onLoadFailed(@NonNull Exception e) {
    if (isCurrentRequest(toStart)) {
      onLoadFailedInternal(toStart, e);
    }
  }
});</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DecodeHelper.getLoadData &gt; HttpGlideUrlLoader.buildLoadData</span><br></pre></td></tr></table></figure>

<p>List&lt;LoadData<?>> getLoadData() {
    if (!isLoadDataSet) {
      isLoadDataSet = true;
      loadData.clear();
      List<modelloader<object, ?>&gt; modelLoaders = glideContext.getRegistry().getModelLoaders(model);<br>      //noinspection ForLoopReplaceableByForEach to improve perf<br>      for (int i = 0, size = modelLoaders.size(); i &lt; size; i++) {<br>        ModelLoader&lt;Object, ?&gt; modelLoader = modelLoaders.get(i);<br>        LoadData&lt;?&gt; current = modelLoader.buildLoadData(model, width, height, options);<br>        if (current != null) {<br>          loadData.add(current);<br>        }<br>      }<br>    }<br>    return loadData;<br>}<br>//buildLoadData这个函数就返回了HttpUrlFetcher,而HttpUrlFetcher是封装再LoadData对象里的.<br>public LoadData<inputstream> buildLoadData(<br>      @NonNull GlideUrl model, int width, int height, @NonNull Options options) {<br>    // GlideUrls memoize parsed URLs so caching them saves a few object instantiations and time<br>    // spent parsing urls.<br>    GlideUrl url = model;<br>    if (modelCache != null) {<br>      url = modelCache.get(model, 0, 0);<br>      if (url == null) {<br>        modelCache.put(model, 0, 0, model);<br>        url = model;<br>      }<br>    }<br>    int timeout = options.get(TIMEOUT);<br>    return new LoadData&lt;&gt;(url, new HttpUrlFetcher(url, timeout));<br>}</inputstream></modelloader<object,></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">开始请求网络:HttpUrlFetcher.loadData &gt; loadDataWithRedirects</span><br></pre></td></tr></table></figure>

<p>@Override<br>public void loadData(<br>    @NonNull Priority priority, @NonNull DataCallback&lt;? super InputStream&gt; callback) {<br>    long startTime = LogTime.getLogTime();<br>    try {<br>        //返回InputStream<br>        InputStream result = loadDataWithRedirects(glideUrl.toURL(), 0, null, glideUrl.getHeaders());<br>        //把返回的InputStream返回给callback:DataCacheGenerator<br>        callback.onDataReady(result);<br>    }<br>}</p>
<p>//真正的网络请求再这里,返回InputStream<br>private InputStream loadDataWithRedirects(<br>    URL url, int redirects, URL lastUrl, Map&lt;String, String&gt; headers) throws IOException {<br>    if (redirects &gt;= MAXIMUM_REDIRECTS) {<br>        throw new HttpException(“Too many (&gt; “ + MAXIMUM_REDIRECTS + “) redirects!”);<br>    } else {<br>        // Comparing the URLs using .equals performs additional network I/O and is generally broken.<br>        // See <a href="http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html" target="_blank" rel="noopener">http://michaelscharf.blogspot.com/2006/11/javaneturlequals-and-hashcode-make.html</a>.<br>        try {<br>        if (lastUrl != null &amp;&amp; url.toURI().equals(lastUrl.toURI())) {<br>            throw new HttpException(“In re-direct loop”);<br>        }<br>        } catch (URISyntaxException e) {<br>        // Do nothing, this is best effort.<br>    }<br>    }<br>    //url:图片的网络地址<br>    urlConnection = connectionFactory.build(url);<br>    for (Map.Entry&lt;String, String&gt; headerEntry : headers.entrySet()) {<br>        urlConnection.addRequestProperty(headerEntry.getKey(), headerEntry.getValue());<br>    }<br>    urlConnection.setConnectTimeout(timeout);<br>    urlConnection.setReadTimeout(timeout);<br>    urlConnection.setUseCaches(false);<br>    urlConnection.setDoInput(true);</p>
<pre><code>// Stop the urlConnection instance of HttpUrlConnection from following redirects so that
// redirects will be handled by recursive calls to this method, loadDataWithRedirects.
urlConnection.setInstanceFollowRedirects(false);

// Connect explicitly to avoid errors in decoders if connection fails.
urlConnection.connect();
// Set the stream so that it&apos;s closed in cleanup to avoid resource leaks. See #2352.
stream = urlConnection.getInputStream();
if (isCancelled) {
    return null;
}
final int statusCode = urlConnection.getResponseCode();
if (isHttpOk(statusCode)) {
    return getStreamForSuccessfulRequest(urlConnection);
} else if (isHttpRedirect(statusCode)) {
    String redirectUrlString = urlConnection.getHeaderField(&quot;Location&quot;);
    if (TextUtils.isEmpty(redirectUrlString)) {
    throw new HttpException(&quot;Received empty or null redirect url&quot;);
    }
    URL redirectUrl = new URL(url, redirectUrlString);
    // Closing the stream specifically is required to avoid leaking ResponseBodys in addition
    // to disconnecting the url connection below. See #2352.
    cleanup();
    return loadDataWithRedirects(redirectUrl, redirects + 1, url, headers);
} </code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">网络请求完成后,开始往回走了</span><br><span class="line">DataCacheGenerator.onDataReady</span><br></pre></td></tr></table></figure>

<p>public void onDataReady(Object data) {<br>    cb.onDataFetcherReady(sourceKey, data, loadData.fetcher, DataSource.DATA_DISK_CACHE, sourceKey);<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FetcherReadyCallback.onDataFetcherReady &gt; DecodeJob.onDataFetcherReady &gt;  decodeFromRetrievedData &gt; decodeFromData &gt; decodeFromFetcher &gt;runLoadPath &gt;  path.load LoadPth &gt; LoadPth.loadWithExceptionList &gt; path.decode DecodePath &gt; DecodePath.decode</span><br></pre></td></tr></table></figure>

<p>//开始解码了<br>public Resource<transcode> decode(<br>      DataRewinder<datatype> rewinder,<br>      int width,<br>      int height,<br>      @NonNull Options options,<br>      DecodeCallback<resourcetype> callback)<br>      throws GlideException {<br>    Resource<resourcetype> decoded = decodeResource(rewinder, width, height, options);<br>    Resource<resourcetype> transformed = callback.onResourceDecoded(decoded);<br>    return transcoder.transcode(transformed, options);<br>}</resourcetype></resourcetype></resourcetype></datatype></transcode></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DecodePath.decodeResource &gt; decodeResourceWithList &gt; decoder.decode StreamBitmapDecoder.decode</span><br><span class="line">这里就开始采用压缩,返回Bitmap</span><br></pre></td></tr></table></figure>

<p>public Resource<bitmap> decode(<br>      @NonNull InputStream source, int width, int height, @NonNull Options options)<br>      throws IOException {</bitmap></p>
<pre><code>// Use to fix the mark limit to avoid allocating buffers that fit entire images.
final RecyclableBufferedInputStream bufferedStream;
final boolean ownsBufferedStream;
if (source instanceof RecyclableBufferedInputStream) {
  bufferedStream = (RecyclableBufferedInputStream) source;
  ownsBufferedStream = false;
} else {
  bufferedStream = new RecyclableBufferedInputStream(source, byteArrayPool);
  ownsBufferedStream = true;
}
ExceptionCatchingInputStream exceptionStream =
    ExceptionCatchingInputStream.obtain(bufferedStream);

MarkEnforcingInputStream invalidatingStream = new MarkEnforcingInputStream(exceptionStream);
UntrustedCallbacks callbacks = new UntrustedCallbacks(bufferedStream, exceptionStream);
try {
  return downsampler.decode(invalidatingStream, width, height, options, callbacks);
} </code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最终返回到DecodePath,因为我们是再DecodePath.decode的decodeResource里进来的:</span><br><span class="line">再看下代码:</span><br></pre></td></tr></table></figure>

<p>public Resource<transcode> decode(<br>      DataRewinder<datatype> rewinder,<br>      int width,<br>      int height,<br>      @NonNull Options options,<br>      DecodeCallback<resourcetype> callback)<br>      throws GlideException {<br>    Resource<resourcetype> decoded = decodeResource(rewinder, width, height, options);<br>    //这里把获取的图片返回到DecodeJob里:<br>    Resource<resourcetype> transformed = callback.onResourceDecoded(decoded);<br>    //其实这里还会对图片进行处理优化<br>    return transcoder.transcode(transformed, options);<br>}</resourcetype></resourcetype></resourcetype></datatype></transcode></p>
<p>public Resource<z> onResourceDecoded(@NonNull Resource<z> decoded) {<br>    return DecodeJob.this.onResourceDecoded(dataSource, decoded);<br>}</z></z></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DecodeJob.onResourceDecoded....&gt; notifyEncodeAndRelease &gt; notifyComplete</span><br><span class="line">-&gt; onResourceReady &gt; EngineJob.onResourceReady &gt; notifyCallbacksOfResult &gt; entry.executor.execute(new CallResourceReady(entry.cb)) .... &gt;EnginJob.loadFromActiveResources</span><br><span class="line">最终把Bitmap存到了活动缓存里:</span><br></pre></td></tr></table></figure>

<p> private EngineResource<?> loadFromActiveResources(Key key) {
    EngineResource<?> active = activeResources.get(key);<br>    if (active != null) {<br>      active.acquire();<br>    }</p>
<pre><code>return active;</code></pre><p>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接着再通过onResourceReady回调返回到SingleRequest里:这里有个target,这个target,就是我们再into开始时根据imageview创建的ImageViewTarget</span><br></pre></td></tr></table></figure>

<p>private void onResourceReady(Resource<r> resource, R result, DataSource dataSource) {<br>    if (!anyListenerHandledUpdatingTarget) {<br>        Transition&lt;? super R&gt; animation = animationFactory.build(dataSource, isFirstResource);<br>        target.onResourceReady(result, animation);<br>      }<br>    }<br>    notifyLoadSuccess();<br>}</r></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImageViewTarget,最终显示图片,DrawableImageViewTarget</span><br></pre></td></tr></table></figure>

<p>public void onResourceReady(@NonNull Z resource, @Nullable Transition&lt;? super Z&gt; transition) {<br>    if (transition == null || !transition.transition(resource, this)) {<br>        setResourceInternal(resource);<br>    } else {<br>        maybeUpdateAnimatable(resource);<br>    }<br>}</p>
<p>private void setResourceInternal(@Nullable Z resource) {<br>    // Order matters here. Set the resource first to make sure that the Drawable has a valid and<br>    // non-null Callback before starting it.<br>    setResource(resource);<br>    maybeUpdateAnimatable(resource);<br>}</p>
<p>protected void setResource(@Nullable Drawable resource) {<br>    view.setImageDrawable(resource);<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 生命周期分析</span><br><span class="line"></span><br><span class="line">首先Activity中对生命周期的监听,也是参考这个方式:</span><br><span class="line">还是从with的RequestManager开始:</span><br></pre></td></tr></table></figure>

<p>private RequestManager supportFragmentGet(<br>    @NonNull Context context,<br>    @NonNull FragmentManager fm,<br>    @Nullable Fragment parentHint,<br>    boolean isParentVisible) {<br>    //空白的Fragment<br>    SupportRequestManagerFragment current =<br>        getSupportRequestManagerFragment(fm, parentHint, isParentVisible);<br>    //给到 RequestManager<br>    RequestManager requestManager = current.getRequestManager();<br>    if (requestManager == null) {<br>        Glide glide = Glide.get(context);<br>        requestManager =<br>            factory.build(<br>                glide, current.getGlideLifecycle(), current.getRequestManagerTreeNode(), context);<br>        current.setRequestManager(requestManager);<br>    }<br>    return requestManager;<br>}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SupportRequestManagerFragment</span><br></pre></td></tr></table></figure>

<p>@Override<br>public void onDestroy() {<br>    super.onDestroy();<br>    lifecycle.onDestroy();<br>    unregisterFragmentWithRoot();<br>}<br>// ActivityFragmentLifecycle implements Lifecycle<br>// interface LifecycleListener 生命周期的监听接口<br>void onDestroy() {<br>    isDestroyed = true;<br>    for (LifecycleListener lifecycleListener : Util.getSnapshot(lifecycleListeners)) {<br>      lifecycleListener.onDestroy();<br>    }<br>  }</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">所以当界面生命周期发生变化后,实现了LifecycleListener 接口的类,都会收到生命周期的回调监听.我们就可以针对具体的生命周期,执行对应逻辑处理.</span><br><span class="line"></span><br><span class="line">```  </span><br><span class="line">// RequestManager</span><br><span class="line">public synchronized void onDestroy() &#123;</span><br><span class="line">    targetTracker.onDestroy();</span><br><span class="line">    for (Target&lt;?&gt; target : targetTracker.getAll()) &#123;</span><br><span class="line">      clear(target);</span><br><span class="line">    &#125;</span><br><span class="line">    targetTracker.clear();</span><br><span class="line">    requestTracker.clearRequests();</span><br><span class="line">    lifecycle.removeListener(this);</span><br><span class="line">    lifecycle.removeListener(connectivityMonitor);</span><br><span class="line">    mainHandler.removeCallbacks(addSelfToLifecycle);</span><br><span class="line">    glide.unregisterRequestManager(this);</span><br><span class="line">&#125;</span><br><span class="line">// RequestTracker,pendingRequests缓存了等待执行的url请求</span><br><span class="line">public void clearRequests() &#123;</span><br><span class="line">    for (Request request : Util.getSnapshot(requests)) &#123;</span><br><span class="line">      // It&apos;s unsafe to recycle the Request here because we don&apos;t know who might else have a</span><br><span class="line">      // reference to it.</span><br><span class="line">      clearAndRemove(request);</span><br><span class="line">    &#125;</span><br><span class="line">    pendingRequests.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h2><p><img src="http://nunu03.github.io/2022/06/08/Glide%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/glide-cache.png" alt></p>
<h3 id="缓存获取流程"><a href="#缓存获取流程" class="headerlink" title="缓存获取流程"></a>缓存获取流程</h3><p>先从活动缓存取,有,直接显示,没有从LRU内存缓存取,并LRU内存缓存的数据放入到活动缓存,并显示.如果LRU内存缓存没有,则从LRU磁盘缓存取,放入到活动缓存(磁盘缓存不移除)并显示,都没有,使用http请求下载或外部资源.下载完成缓存到磁盘缓存.<br>反向同理:生命周期onDestroy时,把活动缓存的移到LRU内存缓存.而下载的图片首先会存到磁盘缓存.<br>内存缓存大小:自动计算当前内存的1/8.<br><strong>为什么要一个活动缓存?</strong><br>如果图片再LRU内存缓存里,而正在显示的图片正在使用,而当有图片添加到LRU内存缓存后,有可能这个LRU内存缓存里的图片被清除了,这个时候就可能出问题了.</p>
<h3 id="LRU-Cache"><a href="#LRU-Cache" class="headerlink" title="LRU Cache"></a>LRU Cache</h3><p>其实就是一个LinkedHashMap,如果参数位true,就会执行LRU算法.数据put进,如果最终数据大于了maxSize,则就会把最少使用,最先添加的的数据清除,如果没有大于maxSize,添加的而是map中已经有的数据,则会把这条数据提到队尾,这再添加一个,就会把队首的数据删掉.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class LruCache&lt;K, V&gt; &#123;</span><br><span class="line">    private final LinkedHashMap&lt;K, V&gt; map;</span><br><span class="line">    public LruCache(int maxSize) &#123;</span><br><span class="line">        if (maxSize &lt;= 0) &#123;</span><br><span class="line">            throw new IllegalArgumentException(&quot;maxSize &lt;= 0&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        this.maxSize = maxSize;</span><br><span class="line">        this.map = new LinkedHashMap&lt;K, V&gt;(0, 0.75f, true);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://muyangmin.github.io/glide-docs-cn/" target="_blank" rel="noopener">Glide中文文档</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Glide </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SPI原理解析]]></title>
      <url>/2022/06/07/SPI%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SPI全称Service Provider Interface，是Java提供的一种动态服务发现机制。通过SPI机制，我们可以直接跨模块查找到想要的接口实现类,从而避免不必要的模块间依赖，降低模块之间的耦合性。这对Android组件间通信非常重要的意义。试想一下如果有一个组件能提供这样一种能力,我们的组件通信是否会变得很容易: 通过一个接口，我可以很容易的查找到这个接口在任意模块下的任意一个或多个实现类的对象.</p>
<a id="more"></a>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>首先创建一个ISPIService接口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface ISPIService &#123;</span><br><span class="line">    void execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着实现接口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class SpiImpl1 implements ISPIService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        Log.e(&quot;ISPIService----------&quot;,&quot;SpiImpl1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class SpiImpl2 implements ISPIService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        Log.e(&quot;ISPIService----------&quot;,&quot;SpiImpl2&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目录结构：<br><img src="http://nunu03.github.io/2022/06/07/SPI%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/spi-file.png" alt></p>
<h3 id="ServiceLoader加载"><a href="#ServiceLoader加载" class="headerlink" title="ServiceLoader加载"></a>ServiceLoader加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ServiceLoader&lt;ISPIService&gt; serviceLoader = ServiceLoader.load(ISPIService.class);</span><br><span class="line">Iterator&lt;ISPIService&gt; iterator = serviceLoader.iterator();</span><br><span class="line">while (iterator.hasNext())&#123;</span><br><span class="line">    Log.e(&quot;ISPIService-------&quot;,iterator.toString());</span><br><span class="line">    ISPIService service = iterator.next();</span><br><span class="line">    Log.e(&quot;ISPIService-------&quot;,service.getClass().getName());</span><br><span class="line">    service.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2022-06-07 14:53:33.960 7422-7422/com.myapplication E/ISPIService-------: java.util.ServiceLoader$1@6ab81e8</span><br><span class="line">2022-06-07 14:53:33.960 7422-7422/com.myapplication E/ISPIService-------: com.myapplication.spi.SpiImpl1</span><br><span class="line">2022-06-07 14:53:33.960 7422-7422/com.myapplication E/ISPIService----------: SpiImpl1</span><br><span class="line">2022-06-07 14:53:33.960 7422-7422/com.myapplication E/ISPIService-------: java.util.ServiceLoader$1@6ab81e8</span><br><span class="line">2022-06-07 14:53:33.960 7422-7422/com.myapplication E/ISPIService-------: com.myapplication.spi.SpiImpl2</span><br><span class="line">2022-06-07 14:53:33.960 7422-7422/com.myapplication E/ISPIService----------: SpiImpl2</span><br></pre></td></tr></table></figure>

<p>所以，我们只需要把具体实现的接口类，添加到文件内，就可以通过ServiceLoader加载。</p>
<p>再看下apk内目录结构：</p>
<p><img src="http://nunu03.github.io/2022/06/07/SPI%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/spi-apk.png" alt></p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>通过上面的图，我们可以知道，我们的service是注册再resources文件夹下的，并且接口的全路径名是文件的名字。这是其中一种注册方式，还有另外一种注册方式，Google的AutoService的注解方式注册。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@AutoService(ISPIService.class)</span><br><span class="line">public class SpiImpl1 implements ISPIService &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        Log.e(&quot;ISPIService----------&quot;,&quot;SpiImpl1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果图如下：<br><img src="http://nunu03.github.io/2022/06/07/SPI%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/spi-autoservice.png" alt></p>
<h2 id="ServiceLoader源码"><a href="#ServiceLoader源码" class="headerlink" title="ServiceLoader源码"></a>ServiceLoader源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">//这里能看出，META-INF/services/是两个文件夹，我在使用过程中，建成了一个，导致一直失败</span><br><span class="line">private static final String PREFIX = &quot;META-INF/services/&quot;;</span><br><span class="line">private class LazyIterator implements Iterator&lt;S&gt;</span><br><span class="line">&#123;</span><br><span class="line">    private boolean hasNextService() &#123;</span><br><span class="line">        if (nextName != null) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        // configs = URL = jar:file:/data/app/com.myapplication-1/base.apk!/META-INF/services/com.myapplication.spi.ISPIService</span><br><span class="line">        if (configs == null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //service的文件全路径名</span><br><span class="line">                String fullName = PREFIX + service.getName();</span><br><span class="line">                //loader == null就是系统SystemClassLoader.loader，否则自己的loader</span><br><span class="line">                if (loader == null)</span><br><span class="line">                    configs = ClassLoader.getSystemResources(fullName);</span><br><span class="line">                else</span><br><span class="line">                    configs = loader.getResources(fullName);</span><br><span class="line">            &#125; catch (IOException x) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // pending 就是fullName文件中的实现类</span><br><span class="line">        while ((pending == null) || !pending.hasNext()) &#123;</span><br><span class="line">            if (!configs.hasMoreElements()) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            //解析service文件</span><br><span class="line">            pending = parse(service, configs.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line">        nextName = pending.next();</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //通过反射拿到实现类的对象</span><br><span class="line">    private S nextService() &#123;</span><br><span class="line">        if (!hasNextService())</span><br><span class="line">            throw new NoSuchElementException();</span><br><span class="line">        String cn = nextName;</span><br><span class="line">        nextName = null;</span><br><span class="line">        Class&lt;?&gt; c = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            c = Class.forName(cn, false, loader);</span><br><span class="line">        &#125; catch (ClassNotFoundException x) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        try &#123;</span><br><span class="line">            S p = service.cast(c.newInstance());</span><br><span class="line">            providers.put(cn, p);</span><br><span class="line">            return p;</span><br><span class="line">        &#125; catch (Throwable x) &#123;</span><br><span class="line">                    x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        // Android-changed: do not use legacy security code</span><br><span class="line">        /* if (acc == null) &#123; */</span><br><span class="line">            return hasNextService();</span><br><span class="line">        /*</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            PrivilegedAction&lt;Boolean&gt; action = new PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class="line">                public Boolean run() &#123; return hasNextService(); &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            return AccessController.doPrivileged(action, acc);</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line">    // 取实现对象</span><br><span class="line">    public S next() &#123;</span><br><span class="line">        // Android-changed: do not use legacy security code</span><br><span class="line">        /* if (acc == null) &#123; */</span><br><span class="line">            return nextService();</span><br><span class="line">        /*</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            PrivilegedAction&lt;S&gt; action = new PrivilegedAction&lt;S&gt;() &#123;</span><br><span class="line">                public S run() &#123; return nextService(); &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            return AccessController.doPrivileged(action, acc);</span><br><span class="line">        &#125;</span><br><span class="line">        */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void remove() &#123;</span><br><span class="line">        throw new UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> private LinkedHashMap&lt;String,S&gt; providers = new LinkedHashMap&lt;&gt;();</span><br><span class="line">//读文件啊，解析文件内容，按行截取，放到list里，首行排到第一位0，顺序依次</span><br><span class="line">private Iterator&lt;String&gt; parse(Class&lt;?&gt; service, URL u) throws ServiceConfigurationError</span><br><span class="line">&#123;</span><br><span class="line">    InputStream in = null;</span><br><span class="line">    BufferedReader r = null;</span><br><span class="line">    ArrayList&lt;String&gt; names = new ArrayList&lt;&gt;();</span><br><span class="line">    try &#123;</span><br><span class="line">        in = u.openStream();</span><br><span class="line">        r = new BufferedReader(new InputStreamReader(in, &quot;utf-8&quot;));</span><br><span class="line">        int lc = 1;</span><br><span class="line">        while ((lc = parseLine(service, u, r, lc, names)) &gt;= 0);</span><br><span class="line">    &#125; catch (IOException x) &#123;</span><br><span class="line">        fail(service, &quot;Error reading configuration file&quot;, x);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (r != null) r.close();</span><br><span class="line">            if (in != null) in.close();</span><br><span class="line">        &#125; catch (IOException y) &#123;</span><br><span class="line">            fail(service, &quot;Error closing configuration file&quot;, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return names.iterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private int parseLine(Class&lt;?&gt; service, URL u, BufferedReader r, int lc, List&lt;String&gt; names) throws IOException, ServiceConfigurationError</span><br><span class="line">&#123;</span><br><span class="line">    String ln = r.readLine();</span><br><span class="line">    if (ln == null) &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    int ci = ln.indexOf(&apos;#&apos;);</span><br><span class="line">    if (ci &gt;= 0) ln = ln.substring(0, ci);</span><br><span class="line">    ln = ln.trim();</span><br><span class="line">    int n = ln.length();</span><br><span class="line">    if (n != 0) &#123;</span><br><span class="line">        if ((ln.indexOf(&apos; &apos;) &gt;= 0) || (ln.indexOf(&apos;\t&apos;) &gt;= 0))</span><br><span class="line">            fail(service, u, lc, &quot;Illegal configuration-file syntax&quot;);</span><br><span class="line">        int cp = ln.codePointAt(0);</span><br><span class="line">        if (!Character.isJavaIdentifierStart(cp))</span><br><span class="line">            fail(service, u, lc, &quot;Illegal provider-class name: &quot; + ln);</span><br><span class="line">        for (int i = Character.charCount(cp); i &lt; n; i += Character.charCount(cp)) &#123;</span><br><span class="line">            cp = ln.codePointAt(i);</span><br><span class="line">            if (!Character.isJavaIdentifierPart(cp) &amp;&amp; (cp != &apos;.&apos;))</span><br><span class="line">                fail(service, u, lc, &quot;Illegal provider-class name: &quot; + ln);</span><br><span class="line">        &#125;</span><br><span class="line">        if (!providers.containsKey(ln) &amp;&amp; !names.contains(ln))</span><br><span class="line">            names.add(ln);</span><br><span class="line">    &#125;</span><br><span class="line">    return lc + 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AutoService源码"><a href="#AutoService源码" class="headerlink" title="AutoService源码"></a>AutoService源码</h2><p>首先AutoService就是个注解：其主要的实现逻辑在AutoServiceProcessor中，他也是一个注解处理器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Documented</span><br><span class="line">@Retention(CLASS)</span><br><span class="line">@Target(TYPE)</span><br><span class="line">public @interface AutoService &#123;</span><br><span class="line">  /** Returns the interfaces implemented by this service provider. */</span><br><span class="line">  Class&lt;?&gt;[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们主要看一下AutoServiceProcessor.process-&gt;processImpl方法:<br>如果上一次循环中注解处理器已经处理完了，就调用generateConfigFiles生成MEATA_INF配置文件；如果上一轮没有处理就调用processAnnotations处理注解。返回true就代表改变或者生成语法树中的内容；返回false就是没有修改或者生成，通知编译器这个Round中的代码未发生变化。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">public class AutoServiceProcessor extends AbstractProcessor &#123;</span><br><span class="line"></span><br><span class="line">private boolean processImpl(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123;</span><br><span class="line">    //判断roundEnv，是否完成了。</span><br><span class="line">    if (roundEnv.processingOver()) &#123;</span><br><span class="line">      generateConfigFiles();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      processAnnotations(annotations, roundEnv);</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//注解类处理，通过RoundEnvironment的getElementsAnnotatedWith(AutoService.class)拿到所有的标注了AutoService注解的元素</span><br><span class="line">private void processAnnotations(Set&lt;? extends TypeElement&gt; annotations,</span><br><span class="line">    RoundEnvironment roundEnv) &#123;</span><br><span class="line"></span><br><span class="line">    Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(AutoService.class);</span><br><span class="line"></span><br><span class="line">    log(annotations.toString());</span><br><span class="line">    log(elements.toString());</span><br><span class="line"></span><br><span class="line">    for (Element e : elements) &#123;</span><br><span class="line">        // TODO(gak): check for error trees?</span><br><span class="line">        TypeElement providerImplementer = (TypeElement) e;</span><br><span class="line">        AnnotationMirror annotationMirror = getAnnotationMirror(e, AutoService.class).get();</span><br><span class="line">        Set&lt;DeclaredType&gt; providerInterfaces = getValueFieldOfClasses(annotationMirror);</span><br><span class="line">        if (providerInterfaces.isEmpty()) &#123;</span><br><span class="line">        error(MISSING_SERVICES_ERROR, e, annotationMirror);</span><br><span class="line">        continue;</span><br><span class="line">        &#125;</span><br><span class="line">        for (DeclaredType providerInterface : providerInterfaces) &#123;</span><br><span class="line">        TypeElement providerType = MoreTypes.asTypeElement(providerInterface);</span><br><span class="line"></span><br><span class="line">        log(&quot;provider interface: &quot; + providerType.getQualifiedName());</span><br><span class="line">        log(&quot;provider implementer: &quot; + providerImplementer.getQualifiedName());</span><br><span class="line"></span><br><span class="line">        if (checkImplementer(providerImplementer, providerType)) &#123;</span><br><span class="line">            providers.put(getBinaryName(providerType), getBinaryName(providerImplementer));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            String message = &quot;ServiceProviders must implement their service provider interface. &quot;</span><br><span class="line">                + providerImplementer.getQualifiedName() + &quot; does not implement &quot;</span><br><span class="line">                + providerType.getQualifiedName();</span><br><span class="line">            error(message, e, annotationMirror);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 生成MEATA_INF配置文件</span><br><span class="line">private void generateConfigFiles() &#123;</span><br><span class="line">    Filer filer = processingEnv.getFiler();</span><br><span class="line">    //从providers提取接口的实现类，是个集合kes</span><br><span class="line">    for (String providerInterface : providers.keySet()) &#123;</span><br><span class="line">        //根据keys里接口信息，拼接文件名，一个接口对应一个文件</span><br><span class="line">        String resourceFile = &quot;META-INF/services/&quot; + providerInterface;</span><br><span class="line">        log(&quot;Working on resource file: &quot; + resourceFile);</span><br><span class="line">        try &#123;</span><br><span class="line">        SortedSet&lt;String&gt; allServices = Sets.newTreeSet();</span><br><span class="line">        try &#123;</span><br><span class="line">           </span><br><span class="line">            FileObject existingFile = filer.getResource(StandardLocation.CLASS_OUTPUT, &quot;&quot;,</span><br><span class="line">                resourceFile);</span><br><span class="line">            //如果之前文件已经存在，就读取文件数据</span><br><span class="line">            Set&lt;String&gt; oldServices = ServicesFiles.readServiceFile(existingFile.openInputStream());</span><br><span class="line">            log(&quot;Existing service entries: &quot; + oldServices);</span><br><span class="line">            allServices.addAll(oldServices);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        //读取provides中指定的接口对应的子类集合</span><br><span class="line">        Set&lt;String&gt; newServices = new HashSet&lt;String&gt;(providers.get(providerInterface));</span><br><span class="line">        if (allServices.containsAll(newServices)) &#123;</span><br><span class="line">            log(&quot;No new service entries being added.&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        // 将老的数据和从providers中读取的数据合并</span><br><span class="line">        allServices.addAll(newServices);</span><br><span class="line">       </span><br><span class="line">        FileObject fileObject = filer.createResource(StandardLocation.CLASS_OUTPUT, &quot;&quot;,</span><br><span class="line">            resourceFile);</span><br><span class="line">        OutputStream out = fileObject.openOutputStream();</span><br><span class="line">        // 将数据重新写入文件</span><br><span class="line">        ServicesFiles.writeServiceFile(allServices, out);</span><br><span class="line">        out.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">        return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>如果实现类再不同的模块下，那每个模块都会生成自己的META-INF/services/….文件，但最终打包完成时会合并所有的META-INF文件目录</strong></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/wusj3/article/details/107975241?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-107975241-blog-104685529.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3-107975241-blog-104685529.pc_relevant_paycolumn_v3&utm_relevant_index=5" target="_blank" rel="noopener">组件化之AutoService使用与源码解析</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SPI </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SharedPreferences+MMAP+MMKV数据持久化原理解析]]></title>
      <url>/2022/06/03/SharedPreferences-MMAP-MMKV%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="SharedPreferences"><a href="#SharedPreferences" class="headerlink" title="SharedPreferences"></a>SharedPreferences</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>SharedPreferences(以下统称为sp)是Android提供的数据持久化的一种手段，适合单进程、小批量的数据存储与访问。</li>
<li>由于sharedPreferences是基于xml文件实现的，所有持久化数据都是一次性加载，如果数据过大是不适合采用SP存放。</li>
<li>实际上是用xml文件存放数据，文件存保存放在/data/data//shared_prefs/<a id="more"></a>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences setting = getSharedPreferences(&quot;hello&quot;,MODE_PRIVATE);</span><br><span class="line">//让setting处于编辑状态</span><br><span class="line">SharedPreferences.Editor editor = setting.edit();</span><br><span class="line">//存放数据</span><br><span class="line">editor.putString(&quot;name&quot;,&quot;jacky&quot;);</span><br><span class="line">//完成提交</span><br><span class="line">editor.commit();</span><br><span class="line">// editor.apply();;</span><br><span class="line">//读取信息</span><br><span class="line">String name = setting.getString(&quot;name&quot;,&quot;0&quot;);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h4><p>如何获取SharedPreferences对象？getSharedPreferences方法是在ContextWrapper中，所以可以在Activity中直接获取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public SharedPreferences getSharedPreferences(String name, int mode) &#123;</span><br><span class="line">    return mBase.getSharedPreferences(name, mode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现在ContextImpl中的getSharedPreferences方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public SharedPreferences getSharedPreferences(File file, int mode) &#123;</span><br><span class="line">    SharedPreferencesImpl sp;</span><br><span class="line">    synchronized (ContextImpl.class) &#123;</span><br><span class="line">        final ArrayMap&lt;File, SharedPreferencesImpl&gt; cache = getSharedPreferencesCacheLocked();</span><br><span class="line">        sp = cache.get(file);</span><br><span class="line">        if (sp == null) &#123;</span><br><span class="line">            sp = new SharedPreferencesImpl(file, mode);</span><br><span class="line">            cache.put(file, sp);</span><br><span class="line">            return sp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return sp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2022/06/03/SharedPreferences-MMAP-MMKV%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/sp-init.png" alt></p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化：通过File读取文件,加载数据，然后通过XmlUtils解析文件。<br>SharedPreferencesImpl -&gt; startLoadFromDisk -&gt; loadFromDisk -&gt; </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private void loadFromDisk() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        stat = Os.stat(mFile.getPath());</span><br><span class="line">        if (mFile.canRead()) &#123;</span><br><span class="line">            BufferedInputStream str = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                str = new BufferedInputStream(</span><br><span class="line">                        new FileInputStream(mFile), 16 * 1024);</span><br><span class="line">                map = (Map&lt;String, Object&gt;) XmlUtils.readMapXml(str);</span><br><span class="line">            &#125; catch (Exception e) &#123;</span><br><span class="line">                Log.w(TAG, &quot;Cannot read &quot; + mFile.getAbsolutePath(), e);</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                IoUtils.closeQuietly(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;catch (Throwable t) &#123;</span><br><span class="line">        thrown = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h4><p>commit -&gt; enqueueDiskWrite -&gt; writeToFile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public boolean commit() &#123;</span><br><span class="line">    long startTime = 0;</span><br><span class="line"></span><br><span class="line">    if (DEBUG) &#123;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MemoryCommitResult mcr = commitToMemory();</span><br><span class="line"></span><br><span class="line">    SharedPreferencesImpl.this.enqueueDiskWrite(</span><br><span class="line">        mcr, null /* sync write on this thread okay */);</span><br><span class="line">    try &#123;</span><br><span class="line">         //这个地方就让主线程卡住的原因，如果多个commit，就需要等待，就会阻塞。</span><br><span class="line">        mcr.writtenToDiskLatch.await();</span><br><span class="line">    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        if (DEBUG) &#123;</span><br><span class="line">            Log.d(TAG, mFile.getName() + &quot;:&quot; + mcr.memoryStateGeneration</span><br><span class="line">                    + &quot; committed after &quot; + (System.currentTimeMillis() - startTime)</span><br><span class="line">                    + &quot; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    notifyListeners(mcr);</span><br><span class="line">    return mcr.writeToDiskResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void enqueueDiskWrite(final MemoryCommitResult mcr,</span><br><span class="line">                                final Runnable postWriteRunnable) &#123;</span><br><span class="line">    final boolean isFromSyncCommit = (postWriteRunnable == null);</span><br><span class="line"></span><br><span class="line">    final Runnable writeToDiskRunnable = new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                synchronized (mWritingToDiskLock) &#123;</span><br><span class="line">                    writeToFile(mcr, isFromSyncCommit);</span><br><span class="line">                &#125;</span><br><span class="line">                synchronized (mLock) &#123;</span><br><span class="line">                    mDiskWritesInFlight--;</span><br><span class="line">                &#125;</span><br><span class="line">                if (postWriteRunnable != null) &#123;</span><br><span class="line">                    postWriteRunnable.run();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    // 未true是commit提交，在当前线程提交，注意这里的锁.</span><br><span class="line">    if (isFromSyncCommit) &#123;</span><br><span class="line">        boolean wasEmpty = false;</span><br><span class="line">        synchronized (mLock) &#123;</span><br><span class="line">            wasEmpty = mDiskWritesInFlight == 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (wasEmpty) &#123;</span><br><span class="line">            writeToDiskRunnable.run();</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // apply 如队列</span><br><span class="line">    QueuedWork.queue(writeToDiskRunnable, !isFromSyncCommit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在commit方法中，首先执行写入任务也就是enqueueDiskWrite这个方法，然后让调用线程处于等待状态，当写入任务执行成功后唤起调用commit的线程，假设调用commit的线程就是主线线程，并且写入任务耗时还比较多的，这不就阻塞住主线程了吗？</p>
<h4 id="writeToFile"><a href="#writeToFile" class="headerlink" title="writeToFile"></a>writeToFile</h4><p>直接io操作写入的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">private void writeToFile(MemoryCommitResult mcr, boolean isFromSyncCommit) &#123;</span><br><span class="line">    long startTime = 0;</span><br><span class="line">    long existsTime = 0;</span><br><span class="line">    long backupExistsTime = 0;</span><br><span class="line">    long outputStreamCreateTime = 0;</span><br><span class="line">    long writeTime = 0;</span><br><span class="line">    long fsyncTime = 0;</span><br><span class="line">    long setPermTime = 0;</span><br><span class="line">    long fstatTime = 0;</span><br><span class="line">    long deleteTime = 0;</span><br><span class="line">    try &#123;</span><br><span class="line">        FileOutputStream str = createFileOutputStream(mFile);</span><br><span class="line"></span><br><span class="line">        if (DEBUG) &#123;</span><br><span class="line">            outputStreamCreateTime = System.currentTimeMillis();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (str == null) &#123;</span><br><span class="line">            mcr.setDiskWriteResult(false, false);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        XmlUtils.writeMapXml(mcr.mapToWriteToDisk, str);</span><br><span class="line"></span><br><span class="line">        writeTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        FileUtils.sync(str);</span><br><span class="line"></span><br><span class="line">        fsyncTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        str.close();</span><br><span class="line">        ContextImpl.setFilePermissionsFromMode(mFile.getPath(), mMode, 0);</span><br><span class="line">        return;</span><br><span class="line">    &#125; catch (XmlPullParserException e) &#123;</span><br><span class="line">        Log.w(TAG, &quot;writeToFile: Got exception:&quot;, e);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        Log.w(TAG, &quot;writeToFile: Got exception:&quot;, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><p>apply -&gt; 异步延迟加载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public void apply() &#123;</span><br><span class="line">    final long startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    final MemoryCommitResult mcr = commitToMemory();</span><br><span class="line">    final Runnable awaitCommit = new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    mcr.writtenToDiskLatch.await();</span><br><span class="line">                &#125; catch (InterruptedException ignored) &#123;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (DEBUG &amp;&amp; mcr.wasWritten) &#123;</span><br><span class="line">                    Log.d(TAG, mFile.getName() + &quot;:&quot; + mcr.memoryStateGeneration</span><br><span class="line">                            + &quot; applied after &quot; + (System.currentTimeMillis() - startTime)</span><br><span class="line">                            + &quot; ms&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    // 这个是保存到QueuedWork队列， 添加到LinkedList&lt;Runnable&gt; sFinishers = new LinkedList&lt;&gt;();里</span><br><span class="line">    QueuedWork.addFinisher(awaitCommit);</span><br><span class="line"></span><br><span class="line">    Runnable postWriteRunnable = new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                awaitCommit.run();</span><br><span class="line">                QueuedWork.removeFinisher(awaitCommit);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    SharedPreferencesImpl.this.enqueueDiskWrite(mcr, postWriteRunnable);</span><br><span class="line"></span><br><span class="line">    // Okay to notify the listeners before it&apos;s hit disk</span><br><span class="line">    // because the listeners should always get the same</span><br><span class="line">    // SharedPreferences instance back, which has the</span><br><span class="line">    // changes reflected in memory.</span><br><span class="line">    notifyListeners(mcr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>入队列，创建handler，sWork队列中数据最终在queued-work-looper 线程中依次得到执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> public static void queue(Runnable work, boolean shouldDelay) &#123;</span><br><span class="line">    Handler handler = getHandler();</span><br><span class="line"></span><br><span class="line">    synchronized (sLock) &#123;</span><br><span class="line">        sWork.add(work);</span><br><span class="line"></span><br><span class="line">        if (shouldDelay &amp;&amp; sCanDelay) &#123;</span><br><span class="line">            handler.sendEmptyMessageDelayed(QueuedWorkHandler.MSG_RUN, DELAY);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            handler.sendEmptyMessage(QueuedWorkHandler.MSG_RUN);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终processPendingWork执行，实际上就是for循环，轮询执行；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private static void processPendingWork() &#123;</span><br><span class="line">    long startTime = 0;</span><br><span class="line"></span><br><span class="line">    if (DEBUG) &#123;</span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    synchronized (sProcessingWork) &#123;</span><br><span class="line">        LinkedList&lt;Runnable&gt; work;</span><br><span class="line"></span><br><span class="line">        synchronized (sLock) &#123;</span><br><span class="line">            work = (LinkedList&lt;Runnable&gt;) sWork.clone();</span><br><span class="line">            sWork.clear();</span><br><span class="line"></span><br><span class="line">            // Remove all msg-s as all work will be processed now</span><br><span class="line">            getHandler().removeMessages(QueuedWorkHandler.MSG_RUN);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (work.size() &gt; 0) &#123;</span><br><span class="line">            for (Runnable w : work) &#123;</span><br><span class="line">                w.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>apply的中写入操作也是在异步线程执行，不会导致主线程卡顿，但是如果异步任务执行时间过长，当ActvityThread执行了handleStopActivity或者handleServiceArgs或者handlePauseActivity 等方法的时候都会调用QueuedWork.waitToFinish()方法,而此方法中会在异步任务执行完成前一直阻塞住主线程，所以卡顿问题就产生了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public static void waitToFinish() &#123;</span><br><span class="line">       long startTime = System.currentTimeMillis();</span><br><span class="line">       boolean hadMessages = false;</span><br><span class="line"></span><br><span class="line">       Handler handler = getHandler();</span><br><span class="line"></span><br><span class="line">       synchronized (sLock) &#123;</span><br><span class="line">           if (handler.hasMessages(QueuedWorkHandler.MSG_RUN)) &#123;</span><br><span class="line">               // Delayed work will be processed at processPendingWork() below</span><br><span class="line">               handler.removeMessages(QueuedWorkHandler.MSG_RUN);</span><br><span class="line"></span><br><span class="line">               if (DEBUG) &#123;</span><br><span class="line">                   hadMessages = true;</span><br><span class="line">                   Log.d(LOG_TAG, &quot;waiting&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           // We should not delay any work as this might delay the finishers</span><br><span class="line">           sCanDelay = false;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskWrites();</span><br><span class="line">       try &#123;</span><br><span class="line">           processPendingWork();</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           StrictMode.setThreadPolicy(oldPolicy);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       try &#123;</span><br><span class="line">           while (true) &#123;</span><br><span class="line">               Runnable finisher;</span><br><span class="line"></span><br><span class="line">               synchronized (sLock) &#123;</span><br><span class="line">                   finisher = sFinishers.poll();</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               if (finisher == null) &#123;</span><br><span class="line">                   break;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               finisher.run();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           sCanDelay = true;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       synchronized (sLock) &#123;</span><br><span class="line">           long waitTime = System.currentTimeMillis() - startTime;</span><br><span class="line"></span><br><span class="line">           if (waitTime &gt; 0 || hadMessages) &#123;</span><br><span class="line">               mWaitTimes.add(Long.valueOf(waitTime).intValue());</span><br><span class="line">               mNumWaits++;</span><br><span class="line"></span><br><span class="line">               if (DEBUG || mNumWaits % 1024 == 0 || waitTime &gt; MAX_WAIT_TIME_MILLIS) &#123;</span><br><span class="line">                   mWaitTimes.log(LOG_TAG, &quot;waited: &quot;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>会从sFinishers队列中取出数据然后执行run方法，我们别忘了在apply的方法中，我们还添加了QueuedWork.addFinisher(awaitCommit);这个awaitCommit 就得到执行了但是awaitCommit中的代码确实是阻塞的代码，等待写入线程执行完毕才能唤起此线程。如果 apply中的写入代码不执行完，主线程就一直卡住了，也就出现了我们上面的问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> final Runnable awaitCommit = new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            mcr.writtenToDiskLatch.await();</span><br><span class="line">        &#125; catch (InterruptedException ignored) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (DEBUG &amp;&amp; mcr.wasWritten) &#123;</span><br><span class="line">            Log.d(TAG, mFile.getName() + &quot;:&quot; + mcr.memoryStateGeneration</span><br><span class="line">                    + &quot; applied after &quot; + (System.currentTimeMillis() - startTime)</span><br><span class="line">                    + &quot; ms&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="读数据"><a href="#读数据" class="headerlink" title="读数据"></a>读数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public int getInt(String key, int defValue) &#123;</span><br><span class="line">    synchronized (mLock) &#123;</span><br><span class="line">        awaitLoadedLocked();</span><br><span class="line">        Integer v = (Integer)mMap.get(key);</span><br><span class="line">        return v != null ? v : defValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关键awaitLoadedLocked 这个方法，当数据没有加载完，就让调用的线程处于等待中，阻塞住了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">private void awaitLoadedLocked() &#123;</span><br><span class="line">    if (!mLoaded) &#123;</span><br><span class="line">        // Raise an explicit StrictMode onReadFromDisk for this</span><br><span class="line">        // thread, since the real read will be in a different</span><br><span class="line">        // thread and otherwise ignored by StrictMode.</span><br><span class="line">        BlockGuard.getThreadPolicy().onReadFromDisk();</span><br><span class="line">    &#125;</span><br><span class="line">    while (!mLoaded) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            mLock.wait();</span><br><span class="line">        &#125; catch (InterruptedException unused) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (mThrowable != null) &#123;</span><br><span class="line">        throw new IllegalStateException(mThrowable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以获取数据也是阻塞的。</p>
<h4 id="源码总结"><a href="#源码总结" class="headerlink" title="源码总结"></a>源码总结</h4><p>从上面可以看出两者最后都是先调用commitToMemory，将更改提交到内存，在这一点上两者是一致的，之后又都调用了enqueueDiskWrite进行数据持久化任务，不过commit函数一般会在当前线程直接写文件，而apply则提交到一个队列里，延迟加载，之后直接返回。<br>（这里代码是android-28，可能新版本是是一个线程池，而非队列）</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<ul>
<li>xml格式保存</li>
<li>通过子线程使用IO读取整个文件，并进行xml解析，存入内存Map，完成初始化，默认大小是16k。</li>
<li>commit是同步提交，阻塞调用的线程，为啥？如果是使用commit方式提交，会阻塞调用commit方法的线程，如果写入任务很多比较耗时，就卡住了，所以不要在主线程执行写入文件的操作，否则阻塞主线程；apply是异步(延迟)提交，无法获取结果且可能数据丢失。apply 放法不会阻塞调用的线程，但是如果写入任务比较耗时，会阻塞住主线程，因为主线程有调用的代码，需要等写入任务执行完了才会继续往下执行。</li>
<li>更新，是吧map中数据，全部序列化XML，覆盖文件保存（全量更新）。<br>所以有没有一种方案改进sp的xml，io，并发问题？</li>
</ul>
</blockquote>
<h2 id="MMAP"><a href="#MMAP" class="headerlink" title="MMAP"></a>MMAP</h2><h3 id="传统I-O"><a href="#传统I-O" class="headerlink" title="传统I/O"></a>传统I/O</h3><p>虚拟内存被操作系统划分为两块：用户空间和内核空间，用户空间是用户程序代码运行的地方，内核空间是内核代码运行的地方，内核空间由所有进程共享。为了安全，他们是隔离的，即使用户的程序崩溃了，内核也不受影响。<br>写文件的流程：<br><img src="http://nunu03.github.io/2022/06/03/SharedPreferences-MMAP-MMKV%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/sp-io.png" alt><br>1、调用write，告诉内核需要写入数据的开始地址与长度。<br>2、内核将数据拷贝到内核页缓存。<br>3、由操作系统调用，将数据拷贝到磁盘，完成写入。</p>
<h3 id="MMMAP"><a href="#MMMAP" class="headerlink" title="MMMAP"></a>MMMAP</h3><p>Linux 通过将一个虚拟内存区域与一个磁盘上的对象关联起来，以初始化这个虚拟内存区域的内容，这个过程称为内存映射(memory mapping).<br>对文件进行mmap，会在进程的虚拟内存分配地址空间创建映射关系。实现这样的映射关系后，就可以采用指针的方式读写操作这一段内存，而系统会自动回写到对应的文件磁盘上。<br><img src="http://nunu03.github.io/2022/06/03/SharedPreferences-MMAP-MMKV%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/sp-mmap.png" alt></p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>MMAP对文件的读写操作只需要从磁盘到用户主存的一次数据拷贝过程，减少了数据的拷贝次数，提高了文件操作效率</li>
<li>MMAP使用逻辑内存对磁盘文件进行映射，操作内存就相当于操作文件，不需要开启线程，操作MMAP的速度和操作内存的速度一样快</li>
<li>MMAP提供一段可供随时写入的内存块，App只管往里面写数据，由操作系统如内存不足、进程退出等时候负责将内存回写到文件。<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4>微信Mars：<br><a href="https://github.com/Tencent/mars" target="_blank" rel="noopener">github</a><br><a href="https://mp.weixin.qq.com/s/cnhuEodJGIbdodh0IxNeXQ" target="_blank" rel="noopener">文档</a><br>美团Logan：<br><a href="https://github.com/Meituan-Dianping/Logan/tree/master/Example/Logan-Android" target="_blank" rel="noopener">github</a><br><a href="https://tech.meituan.com/2018/02/11/logan.html" target="_blank" rel="noopener">博客</a><br>网易android-mmap：<h4 id="Binder通信"><a href="#Binder通信" class="headerlink" title="Binder通信"></a>Binder通信</h4><img src="http://nunu03.github.io/2022/06/03/SharedPreferences-MMAP-MMKV%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/sp-binder.png" alt><h2 id="MMKV"><a href="#MMKV" class="headerlink" title="MMKV"></a>MMKV</h2>MMKV 是基于 mmap 内存映射的 key-value 组件，底层序列化/反序列化使用 protobuf 实现，性能高，稳定性强。<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3></li>
<li>内存准备<br>通过 mmap 内存映射文件，提供一段可供随时写入的内存块，App 只管往里面写数据，由操作系统负责将内存回写到文件，不必担心 crash 导致数据丢失。</li>
<li>数据组织<br>数据序列化方面我们选用 protobuf 协议，pb 在性能和空间占用上都有不错的表现。</li>
<li>写入优化<br>考虑到主要使用场景是频繁地进行写入更新，我们需要有增量更新的能力。我们考虑将增量 kv 对象序列化后，append 到内存末尾。</li>
<li>空间增长<br>使用 append 实现增量更新带来了一个新的问题，就是不断 append 的话，文件大小会增长得不可控。我们需要在性能和空间上做个折中。<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">MMKV_JNI void jniInitialize(JNIEnv *env, jobject obj, jstring rootDir, jstring cacheDir, jint logLevel) &#123;</span><br><span class="line">    if (!rootDir) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 获取rootDir的url char指针数组字符串，调⽤MMKV::initializeMMKV进⼀步初始化。</span><br><span class="line">    const char *kstr = env-&gt;GetStringUTFChars(rootDir, nullptr);</span><br><span class="line">    if (kstr) &#123;</span><br><span class="line">        MMKV::initializeMMKV(kstr, (MMKVLogLevel) logLevel);</span><br><span class="line">        env-&gt;ReleaseStringUTFChars(rootDir, kstr);</span><br><span class="line"></span><br><span class="line">        g_android_tmpDir = jstring2string(env, cacheDir);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadOnceToken_t once_control = ThreadOnceUninitialized;</span><br><span class="line">void MMKV::initializeMMKV(const MMKVPath_t &amp;rootDir, MMKVLogLevel logLevel) &#123;</span><br><span class="line">    g_currentLogLevel = logLevel;</span><br><span class="line">    ThreadLock::ThreadOnce(&amp;once_control, initialize);</span><br><span class="line">    // 获取rootDir的url char指针数组字符串</span><br><span class="line">    g_rootDir = rootDir;</span><br><span class="line">    // 根据路径创建⽂件夹</span><br><span class="line">    mkPath(g_rootDir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="获取MMKV对象"><a href="#获取MMKV对象" class="headerlink" title="获取MMKV对象"></a>获取MMKV对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">MMKV *MMKV::mmkvWithID(const string &amp;mmapID, MMKVMode mode, string *cryptKey, MMKVPath_t *rootPath) &#123;</span><br><span class="line"></span><br><span class="line">    if (mmapID.empty()) &#123;</span><br><span class="line">        return nullptr;</span><br><span class="line">    &#125;</span><br><span class="line">    // 加锁 </span><br><span class="line">    SCOPED_LOCK(g_instanceLock);</span><br><span class="line">    // 将 mmapID 与 relativePath 结合生成 mmapKey </span><br><span class="line">    auto mmapKey = mmapedKVKey(mmapID, rootPath);</span><br><span class="line">    // 通过 mmapKey 在 map 中查找对应的 MMKV 对象并返回 </span><br><span class="line">    auto itr = g_instanceDic-&gt;find(mmapKey);</span><br><span class="line">    if (itr != g_instanceDic-&gt;end()) &#123;</span><br><span class="line">        MMKV *kv = itr-&gt;second;</span><br><span class="line">        return kv;</span><br><span class="line">    &#125;</span><br><span class="line">   // 如果找不到，构建路径后构建 MMKV 对象并加入 map </span><br><span class="line">    if (rootPath) &#123;</span><br><span class="line">        MMKVPath_t specialPath = (*rootPath) + MMKV_PATH_SLASH + SPECIAL_CHARACTER_DIRECTORY_NAME;</span><br><span class="line">        if (!isFileExist(specialPath)) &#123;</span><br><span class="line">            mkPath(specialPath);</span><br><span class="line">        &#125;</span><br><span class="line">        MMKVInfo(&quot;prepare to load %s (id %s) from rootPath %s&quot;, mmapID.c_str(), mmapKey.c_str(), rootPath-&gt;c_str());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //构造对象</span><br><span class="line">    auto kv = new MMKV(mmapID, mode, cryptKey, rootPath);</span><br><span class="line">    kv-&gt;m_mmapKey = mmapKey;</span><br><span class="line">    (*g_instanceDic)[mmapKey] = kv;</span><br><span class="line">    return kv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取path</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">extern bool mkPath(const MMKVPath_t &amp;str) &#123;</span><br><span class="line">    // strdup拷贝⼀份字符串到path中。</span><br><span class="line">    char *path = strdup(str.c_str());</span><br><span class="line"></span><br><span class="line">    struct stat sb = &#123;&#125;;</span><br><span class="line">    bool done = false;</span><br><span class="line">    char *slash = path;</span><br><span class="line"></span><br><span class="line">    while (!done) &#123;</span><br><span class="line">        // strspn 是⼀直找到匹配字符串，直到出现第⼀个不是&quot;/&quot;</span><br><span class="line">        slash += strspn(slash, &quot;/&quot;);</span><br><span class="line">        // strcspn 则是⼀直找不匹配的字符串，直到出现第⼀个“/”</span><br><span class="line">        slash += strcspn(slash, &quot;/&quot;);</span><br><span class="line">        // 经过这样拆解，就能把路径⼀个个分割开。通过这中⽅式就能直到什么时候遍历完整个路径。</span><br><span class="line">        done = (*slash == &apos;\0&apos;);</span><br><span class="line">        *slash = &apos;\0&apos;;</span><br><span class="line"></span><br><span class="line">        // stat获取path每⼀个⽂件夹的权限状态，必须保证每⼀级别的⽂件都是0777，也就是读写执⾏全部权限打开。</span><br><span class="line"></span><br><span class="line">        if (stat(path, &amp;sb) != 0) &#123;</span><br><span class="line">            if (errno != ENOENT || mkdir(path, 0777) != 0) &#123;</span><br><span class="line">                MMKVWarning(&quot;%s : %s&quot;, path, strerror(errno));</span><br><span class="line">                free(path);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (!S_ISDIR(sb.st_mode)) &#123;</span><br><span class="line">            MMKVWarning(&quot;%s: %s&quot;, path, strerror(ENOTDIR));</span><br><span class="line">            free(path);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        *slash = &apos;/&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    free(path);</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构造对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">MMKV::MMKV(const string &amp;mmapID, MMKVMode mode, string *cryptKey, MMKVPath_t *rootPath)&#123;</span><br><span class="line">    .......</span><br><span class="line">     // 通过加密 key 构建 AES 加密对象 AESCrypt </span><br><span class="line">    #    ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">    if (cryptKey &amp;&amp; cryptKey-&gt;length() &gt; 0) &#123;</span><br><span class="line">        m_dicCrypt = new MMKVMapCrypt();</span><br><span class="line">        m_crypter = new AESCrypt(cryptKey-&gt;data(), cryptKey-&gt;length());</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        m_dic = new MMKVMap();</span><br><span class="line">    &#125;</span><br><span class="line">#    else</span><br><span class="line">    m_dic = new MMKVMap();</span><br><span class="line">#    endif</span><br><span class="line">     ...................................</span><br><span class="line">     m_lock-&gt;initialize();</span><br><span class="line">     ................</span><br><span class="line">       // sensitive zone</span><br><span class="line">       // 加锁后通过 loadFromFile 方法从文件中读取数据，这里的锁是一个跨进程的文件共享锁;</span><br><span class="line">    &#123;</span><br><span class="line">        SCOPED_LOCK(m_sharedProcessLock);</span><br><span class="line">        loadFromFile();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void initialize() &#123;</span><br><span class="line">    g_instanceDic = new unordered_map&lt;string, MMKV *&gt;;</span><br><span class="line">    // 初始化了⼀个全局的线程锁</span><br><span class="line">    g_instanceLock = new ThreadLock();</span><br><span class="line">    g_instanceLock-&gt;initialize();</span><br><span class="line">    // 。在MMKV中，设置好每⼀页(page)的⼤⼩，⼀般来说我们在32位的机⼦中⼀页都是</span><br><span class="line">    4kb⼤⼩</span><br><span class="line">    mmkv::DEFAULT_MMAP_SIZE = mmkv::getPageSize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="加载数据loadFromFile"><a href="#加载数据loadFromFile" class="headerlink" title="加载数据loadFromFile"></a>加载数据loadFromFile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">void MMKV::loadFromFile() &#123;</span><br><span class="line">    //读缓存</span><br><span class="line">        if (m_metaFile-&gt;isFileValid()) &#123;</span><br><span class="line">        m_metaInfo-&gt;read(m_metaFile-&gt;getMemory());</span><br><span class="line">    &#125;</span><br><span class="line">    //读文件</span><br><span class="line">    if (!m_file-&gt;isFileValid()) &#123;</span><br><span class="line">        m_file-&gt;reloadFromFile();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // loading 开始加载</span><br><span class="line">    if (loadFromFile &amp;&amp; m_actualSize &gt; 0) &#123;</span><br><span class="line">        MMKVInfo(&quot;loading [%s] with crc %u sequence %u version %u&quot;, m_mmapID.c_str(), m_metaInfo-&gt;m_crcDigest,</span><br><span class="line">                    m_metaInfo-&gt;m_sequence, m_metaInfo-&gt;m_version);</span><br><span class="line">        // 读取 MMBuffer </span><br><span class="line">        MMBuffer inputBuffer(ptr + Fixed32Size, m_actualSize, MMBufferNoCopy);</span><br><span class="line">        // 如果需要解密，对文件进行解密 </span><br><span class="line">        if (m_crypter) &#123;</span><br><span class="line">            clearDictionary(m_dicCrypt);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            clearDictionary(m_dic);</span><br><span class="line">        &#125;</span><br><span class="line">         // 通过 MiniPBCoder 将 MMBuffer 转换为 Map </span><br><span class="line">        if (needFullWriteback) &#123;</span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">            if (m_crypter) &#123;</span><br><span class="line">                MiniPBCoder::greedyDecodeMap(*m_dicCrypt, inputBuffer, m_crypter);</span><br><span class="line">            &#125; else</span><br><span class="line">#endif</span><br><span class="line">            &#123;</span><br><span class="line">                MiniPBCoder::greedyDecodeMap(*m_dic, inputBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">            if (m_crypter) &#123;</span><br><span class="line">                MiniPBCoder::decodeMap(*m_dicCrypt, inputBuffer, m_crypter);</span><br><span class="line">            &#125; else</span><br><span class="line">#endif</span><br><span class="line">            &#123;</span><br><span class="line">                MiniPBCoder::decodeMap(*m_dic, inputBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         // 构造用于输出的 CodeOutputData </span><br><span class="line">        m_output = new CodedOutputData(ptr + Fixed32Size, m_file-&gt;getFileSize() - Fixed32Size);</span><br><span class="line">        m_output-&gt;seek(m_actualSize);</span><br><span class="line">        if (needFullWriteback) &#123;</span><br><span class="line">            fullWriteback();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // file not valid or empty, discard everything</span><br><span class="line">        SCOPED_LOCK(m_exclusiveProcessLock);</span><br><span class="line"></span><br><span class="line">        m_output = new CodedOutputData(ptr + Fixed32Size, m_file-&gt;getFileSize() - Fixed32Size);</span><br><span class="line">        if (m_actualSize &gt; 0) &#123;</span><br><span class="line">            writeActualSize(0, 0, nullptr, IncreaseSequence);</span><br><span class="line">            sync(MMKV_SYNC);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            writeActualSize(0, 0, nullptr, KeepSequence);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MemoryFile::reloadFromFile() &#123;</span><br><span class="line">    ....................</span><br><span class="line">    if (!m_diskFile.open()) &#123;</span><br><span class="line">        MMKVError(&quot;fail to open:%s, %s&quot;, m_diskFile.m_path.c_str(), strerror(errno));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        FileLock fileLock(m_diskFile.m_fd);</span><br><span class="line">        InterProcessLock lock(&amp;fileLock, ExclusiveLockType);</span><br><span class="line">        SCOPED_LOCK(&amp;lock);</span><br><span class="line">        // 页文件大小，32位大概是4k</span><br><span class="line">        mmkv::getFileSize(m_diskFile.m_fd, m_size);</span><br><span class="line">        // round up to (n * pagesize)</span><br><span class="line">         // 将文件大小对齐到页大小的整数倍，用 0 填充不足的部分 </span><br><span class="line">        if (m_size &lt; DEFAULT_MMAP_SIZE || (m_size % DEFAULT_MMAP_SIZE != 0)) &#123;</span><br><span class="line">            size_t roundSize = ((m_size / DEFAULT_MMAP_SIZE) + 1) * DEFAULT_MMAP_SIZE;</span><br><span class="line">            truncate(roundSize);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            auto ret = mmap();</span><br><span class="line">            if (!ret) &#123;</span><br><span class="line">                doCleanMemoryCache(true);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">#    ifdef MMKV_IOS</span><br><span class="line">        tryResetFileProtection(m_diskFile.m_path);</span><br><span class="line">#    endif</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bool File::open() &#123;</span><br><span class="line">    // 打开对应的文件 </span><br><span class="line">    m_fd = ::open(m_path.c_str(), OpenFlag2NativeFlag(m_flag), S_IRWXU);</span><br><span class="line">    if (!isFileValid()) &#123;</span><br><span class="line">        MMKVError(&quot;fail to open [%s], %d(%s)&quot;, m_path.c_str(), errno, strerror(errno));</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    MMKVInfo(&quot;open fd[%p], %s&quot;, m_fd, m_path.c_str());</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>通过 mmap 将文件映射到内存</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool MemoryFile::mmap() &#123;</span><br><span class="line">    //通过 mmap 将文件映射到内存 </span><br><span class="line">    m_ptr = (char *) ::mmap(m_ptr, m_size, PROT_READ | PROT_WRITE, MAP_SHARED, m_diskFile.m_fd, 0);</span><br><span class="line">    if (m_ptr == MAP_FAILED) &#123;</span><br><span class="line">        MMKVError(&quot;fail to mmap [%s], %s&quot;, m_diskFile.m_path.c_str(), strerror(errno));</span><br><span class="line">        m_ptr = nullptr;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h4><p>Java 层的 MMKV 对象继承了 SharedPreferences 及 SharedPreferences.Editor 接口并实现了一系列如 putInt、putLong 的方法用于对存储的数据进行修改;最终还是会进入c方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool MMKV::set(int32_t value, MMKVKey_t key) &#123;</span><br><span class="line">    if (isKeyEmpty(key)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    size_t size = pbInt32Size(value);</span><br><span class="line">    MMBuffer data(size);</span><br><span class="line">    // 构造值对应的 MMBuffer，通过 CodedOutputData 将其写入 Buffer</span><br><span class="line">    CodedOutputData output(data.getPtr(), size);</span><br><span class="line">    output.writeInt32(value);</span><br><span class="line"></span><br><span class="line">    return setDataForKey(move(data), key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取到了写入的 value 在 protobuf 中所占据的大小，之后为其构造了对应的 MMBuffer 并将数据写入了这段 Buffer，最后调用到了 setDataForKey 方法;同时可以发现 CodedOutputData 是与 Buffer 交互的桥梁，可以通过它实现向 MMBuffer 中写入数据;</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">bool MMKV::setDataForKey(MMBuffer &amp;&amp;data, MMKVKey_t key, bool isDataHolder) &#123;</span><br><span class="line">    if ((!isDataHolder &amp;&amp; data.length() == 0) || isKeyEmpty(key)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">     // 获取写锁 </span><br><span class="line">    SCOPED_LOCK(m_lock);</span><br><span class="line">    SCOPED_LOCK(m_exclusiveProcessLock);</span><br><span class="line">    // 确保数据已读入内存 </span><br><span class="line">    checkLoadData();</span><br><span class="line"></span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">    if (m_crypter) &#123;</span><br><span class="line">        if (isDataHolder) &#123;</span><br><span class="line">            auto sizeNeededForData = pbRawVarint32Size((uint32_t) data.length()) + data.length();</span><br><span class="line">            if (!KeyValueHolderCrypt::isValueStoredAsOffset(sizeNeededForData)) &#123;</span><br><span class="line">                data = MiniPBCoder::encodeDataWithObject(data);</span><br><span class="line">                isDataHolder = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 将 data 写入 map 中 </span><br><span class="line">        auto itr = m_dicCrypt-&gt;find(key);</span><br><span class="line">        if (itr != m_dicCrypt-&gt;end()) &#123;</span><br><span class="line">#    ifdef MMKV_APPLE</span><br><span class="line">            auto ret = appendDataWithKey(data, key, itr-&gt;second, isDataHolder);</span><br><span class="line">#    else</span><br><span class="line">            auto ret = appendDataWithKey(data, key, isDataHolder);</span><br><span class="line">#    endif</span><br><span class="line">            if (!ret.first) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            if (KeyValueHolderCrypt::isValueStoredAsOffset(ret.second.valueSize)) &#123;</span><br><span class="line">                KeyValueHolderCrypt kvHolder(ret.second.keySize, ret.second.valueSize, ret.second.offset);</span><br><span class="line">                memcpy(&amp;kvHolder.cryptStatus, &amp;t_status, sizeof(t_status));</span><br><span class="line">                itr-&gt;second = move(kvHolder);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                itr-&gt;second = KeyValueHolderCrypt(move(data));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            auto ret = appendDataWithKey(data, key, isDataHolder);</span><br><span class="line">            if (!ret.first) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            if (KeyValueHolderCrypt::isValueStoredAsOffset(ret.second.valueSize)) &#123;</span><br><span class="line">                auto r = m_dicCrypt-&gt;emplace(</span><br><span class="line">                    key, KeyValueHolderCrypt(ret.second.keySize, ret.second.valueSize, ret.second.offset));</span><br><span class="line">                if (r.second) &#123;</span><br><span class="line">                    memcpy(&amp;(r.first-&gt;second.cryptStatus), &amp;t_status, sizeof(t_status));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                m_dicCrypt-&gt;emplace(key, KeyValueHolderCrypt(move(data)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else</span><br><span class="line">#endif // MMKV_DISABLE_CRYPT</span><br><span class="line">    &#123;</span><br><span class="line">        auto itr = m_dic-&gt;find(key);</span><br><span class="line">        if (itr != m_dic-&gt;end()) &#123;</span><br><span class="line">            auto ret = appendDataWithKey(data, itr-&gt;second, isDataHolder);</span><br><span class="line">            if (!ret.first) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            itr-&gt;second = std::move(ret.second);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            auto ret = appendDataWithKey(data, key, isDataHolder);</span><br><span class="line">            if (!ret.first) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            m_dic-&gt;emplace(key, std::move(ret.second));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    m_hasFullWriteback = false;</span><br><span class="line">#ifdef MMKV_APPLE</span><br><span class="line">    [key retain];</span><br><span class="line">#endif</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数据已读入内存的情况下将 data 写入了对应的 map，之后调用了 appendDataWithKey 方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">KVHolderRet_t MMKV::appendDataWithKey(const MMBuffer &amp;data, const KeyValueHolder &amp;kvHolder, bool isDataHolder) &#123;</span><br><span class="line">    SCOPED_LOCK(m_exclusiveProcessLock);</span><br><span class="line"></span><br><span class="line">    uint32_t keyLength = kvHolder.keySize;</span><br><span class="line">    // size needed to encode the key</span><br><span class="line">    // 计算写入到映射空间中的 size </span><br><span class="line">    size_t rawKeySize = keyLength + pbRawVarint32Size(keyLength);</span><br><span class="line"></span><br><span class="line">    // ensureMemorySize() might change kvHolder.offset, so have to do it early</span><br><span class="line">    &#123;</span><br><span class="line">        auto valueLength = static_cast&lt;uint32_t&gt;(data.length());</span><br><span class="line">        if (isDataHolder) &#123;</span><br><span class="line">            valueLength += pbRawVarint32Size(valueLength);</span><br><span class="line">        &#125;</span><br><span class="line">        auto size = rawKeySize + valueLength + pbRawVarint32Size(valueLength);</span><br><span class="line">        // 确定剩余映射空间足够 </span><br><span class="line">        bool hasEnoughSize = ensureMemorySize(size);</span><br><span class="line">        if (!hasEnoughSize) &#123;</span><br><span class="line">            return make_pair(false, KeyValueHolder());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    auto basePtr = (uint8_t *) m_file-&gt;getMemory() + Fixed32Size;</span><br><span class="line">    MMBuffer keyData(basePtr + kvHolder.offset, rawKeySize, MMBufferNoCopy);</span><br><span class="line"></span><br><span class="line">    return doAppendDataWithKey(data, keyData, isDataHolder, keyLength);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MMKV::doAppendDataWithKey(const MMBuffer &amp;data, const MMBuffer &amp;keyData, bool isDataHolder, uint32_t originKeyLength) &#123;</span><br><span class="line">    auto isKeyEncoded = (originKeyLength &lt; keyData.length());</span><br><span class="line">    auto keyLength = static_cast&lt;uint32_t&gt;(keyData.length());</span><br><span class="line">    auto valueLength = static_cast&lt;uint32_t&gt;(data.length());</span><br><span class="line">    if (isDataHolder) &#123;</span><br><span class="line">        valueLength += pbRawVarint32Size(valueLength);</span><br><span class="line">    &#125;</span><br><span class="line">    // size needed to encode the key</span><br><span class="line">    size_t size = isKeyEncoded ? keyLength : (keyLength + pbRawVarint32Size(keyLength));</span><br><span class="line">    // size needed to encode the value</span><br><span class="line">    size += valueLength + pbRawVarint32Size(valueLength);</span><br><span class="line"></span><br><span class="line">    SCOPED_LOCK(m_exclusiveProcessLock);</span><br><span class="line"></span><br><span class="line">    bool hasEnoughSize = ensureMemorySize(size);</span><br><span class="line">    if (!hasEnoughSize || !isFileValid()) &#123;</span><br><span class="line">        return make_pair(false, KeyValueHolder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#ifdef MMKV_IOS</span><br><span class="line">    auto ret = guardForBackgroundWriting(m_output-&gt;curWritePointer(), size);</span><br><span class="line">    if (!ret.first) &#123;</span><br><span class="line">        return make_pair(false, KeyValueHolder());</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">    if (m_crypter) &#123;</span><br><span class="line">        if (KeyValueHolderCrypt::isValueStoredAsOffset(valueLength)) &#123;</span><br><span class="line">            m_crypter-&gt;getCurStatus(t_status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line">    // 重新构建并写入数据 </span><br><span class="line">    try &#123;</span><br><span class="line">        if (isKeyEncoded) &#123;</span><br><span class="line">            m_output-&gt;writeRawData(keyData);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            m_output-&gt;writeData(keyData);</span><br><span class="line">        &#125;</span><br><span class="line">        if (isDataHolder) &#123;</span><br><span class="line">            m_output-&gt;writeRawVarint32((int32_t) valueLength);</span><br><span class="line">        &#125;</span><br><span class="line">        m_output-&gt;writeData(data); // note: write size of data</span><br><span class="line">    &#125; catch (std::exception &amp;e) &#123;</span><br><span class="line">        MMKVError(&quot;%s&quot;, e.what());</span><br><span class="line">        return make_pair(false, KeyValueHolder());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto offset = static_cast&lt;uint32_t&gt;(m_actualSize);</span><br><span class="line">    auto ptr = (uint8_t *) m_file-&gt;getMemory() + Fixed32Size + m_actualSize;</span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">    if (m_crypter) &#123;</span><br><span class="line">        m_crypter-&gt;encrypt(ptr, ptr, size);</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line">    m_actualSize += size;</span><br><span class="line">    updateCRCDigest(ptr, size);</span><br><span class="line"></span><br><span class="line">    return make_pair(true, KeyValueHolder(originKeyLength, valueLength, offset));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void CodedOutputData::writeRawData(const MMBuffer &amp;data) &#123;</span><br><span class="line">    size_t numberOfBytes = data.length();</span><br><span class="line">    if (m_position + numberOfBytes &gt; m_size) &#123;</span><br><span class="line">        auto msg = &quot;m_position: &quot; + to_string(m_position) + &quot;, numberOfBytes: &quot; + to_string(numberOfBytes) +</span><br><span class="line">                   &quot;, m_size: &quot; + to_string(m_size);</span><br><span class="line">        throw out_of_range(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    memcpy(m_ptr + m_position, data.getPtr(), numberOfBytes);</span><br><span class="line">    m_position += numberOfBytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意的是</strong>：由于 protobuf 不支持增量更新，为了避免全量写入带来的性能问题，MMKV 在文件中的写入并不是通过修改文件对应的位置，而是直接在后面 append 一条新的数据，即使是修改了已存在的 key。而读取时只记录最后一条对应 key 的数据，这样显然会在文件中存在冗余的数据。这样设计的原因我认为是出于性能的考量，MMKV 中存在着一套内存重整机制用于对冗余的 key-value 数据进行处理。它正是在确保内存充足时实现的;</p>
<h4 id="内存重整ensureMemorySize"><a href="#内存重整ensureMemorySize" class="headerlink" title="内存重整ensureMemorySize"></a>内存重整ensureMemorySize</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// since we use append mode, when -[setData: forKey:] many times, space may not be enough</span><br><span class="line">// try a full rewrite to make space</span><br><span class="line">bool MMKV::ensureMemorySize(size_t newSize) &#123;</span><br><span class="line">    // 如果内存剩余大小不足以写入，尝试进行内存重整，将 map 中的数据重新写入 protobuf 文件 </span><br><span class="line">    if (newSize &gt;= m_output-&gt;spaceLeft() || (m_crypter ? m_dicCrypt-&gt;empty() : m_dic-&gt;empty())) &#123;</span><br><span class="line">        // try a full rewrite to make space</span><br><span class="line">        auto fileSize = m_file-&gt;getFileSize();</span><br><span class="line">        auto preparedData = m_crypter ? prepareEncode(*m_dicCrypt) : prepareEncode(*m_dic);</span><br><span class="line">        auto sizeOfDic = preparedData.second;</span><br><span class="line">        size_t lenNeeded = sizeOfDic + Fixed32Size + newSize;</span><br><span class="line">        size_t dicCount = m_crypter ? m_dicCrypt-&gt;size() : m_dic-&gt;size();</span><br><span class="line">        size_t avgItemSize = lenNeeded / std::max&lt;size_t&gt;(1, dicCount);</span><br><span class="line">        size_t futureUsage = avgItemSize * std::max&lt;size_t&gt;(8, (dicCount + 1) / 2);</span><br><span class="line">        // 1. no space for a full rewrite, double it</span><br><span class="line">        // 2. or space is not large enough for future usage, double it to avoid frequently full rewrite</span><br><span class="line">        if (lenNeeded &gt;= fileSize || (lenNeeded + futureUsage) &gt;= fileSize) &#123;</span><br><span class="line">            size_t oldSize = fileSize;</span><br><span class="line">            // 如果内存重整后仍不足以写入，则将大小不断乘2直至足够写入，最后通过 mmap 重新映射文件 </span><br><span class="line">            do &#123;</span><br><span class="line">                 // double 空间直至足够 </span><br><span class="line">                fileSize *= 2;</span><br><span class="line">            &#125; while (lenNeeded + futureUsage &gt;= fileSize);</span><br><span class="line">            // if we can&apos;t extend size, rollback to old state</span><br><span class="line">            if (!m_file-&gt;truncate(fileSize)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return doFullWriteBack(move(preparedData), nullptr);</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bool MemoryFile::truncate(size_t size) &#123;</span><br><span class="line">    。。。。。。。。</span><br><span class="line">    // 重新通过 mmap 映射 </span><br><span class="line">    auto ret = mmap();</span><br><span class="line">    if (!ret) &#123;</span><br><span class="line">        doCleanMemoryCache(true);</span><br><span class="line">    &#125;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool MMKV::doFullWriteBack(pair&lt;MMBuffer, size_t&gt; preparedData, AESCrypt *newCrypter) &#123;</span><br><span class="line">    auto ptr = (uint8_t *) m_file-&gt;getMemory();</span><br><span class="line">    auto totalSize = preparedData.second;</span><br><span class="line">#ifdef MMKV_IOS</span><br><span class="line">    auto ret = guardForBackgroundWriting(ptr + Fixed32Size, totalSize);</span><br><span class="line">    if (!ret.first) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">    uint8_t newIV[AES_KEY_LEN];</span><br><span class="line">    auto decrypter = m_crypter;</span><br><span class="line">    auto encrypter = (newCrypter == InvalidCryptPtr) ? nullptr : (newCrypter ? newCrypter : m_crypter);</span><br><span class="line">    if (encrypter) &#123;</span><br><span class="line">        AESCrypt::fillRandomIV(newIV);</span><br><span class="line">        encrypter-&gt;resetIV(newIV, sizeof(newIV));</span><br><span class="line">    &#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">    delete m_output;</span><br><span class="line">    m_output = new CodedOutputData(ptr + Fixed32Size, m_file-&gt;getFileSize() - Fixed32Size);</span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">    if (m_crypter) &#123;</span><br><span class="line">        memmoveDictionary(*m_dicCrypt, m_output, ptr, decrypter, encrypter, preparedData);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">#else</span><br><span class="line">    &#123;</span><br><span class="line">        auto encrypter = m_crypter;</span><br><span class="line">#endif</span><br><span class="line">        memmoveDictionary(*m_dic, m_output, ptr, encrypter, totalSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_actualSize = totalSize;</span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">    if (encrypter) &#123;</span><br><span class="line">        recaculateCRCDigestWithIV(newIV);</span><br><span class="line">    &#125; else</span><br><span class="line">#endif</span><br><span class="line">    &#123;</span><br><span class="line">        recaculateCRCDigestWithIV(nullptr);</span><br><span class="line">    &#125;</span><br><span class="line">    m_hasFullWriteback = true;</span><br><span class="line">    // make sure lastConfirmedMetaInfo is saved</span><br><span class="line">    sync(MMKV_SYNC);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内存重整步骤如下：</p>
<ul>
<li>当剩余映射空间不足以写入需要写入的内容，尝试进行内存重整;</li>
<li>内存重整会将文件清空，将 map 中的数据重新写入文件，从而去除冗余数据;</li>
<li>若内存重整后剩余映射空间仍然不足，不断将映射空间 double 直到足够，并用 mmap 重新映射;<h4 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">int32_t MMKV::getInt32(MMKVKey_t key, int32_t defaultValue, bool *hasValue) &#123;</span><br><span class="line">    if (isKeyEmpty(key)) &#123;</span><br><span class="line">        if (hasValue != nullptr) &#123;</span><br><span class="line">            *hasValue = false;</span><br><span class="line">        &#125;</span><br><span class="line">        return defaultValue;</span><br><span class="line">    &#125;</span><br><span class="line">    SCOPED_LOCK(m_lock);</span><br><span class="line">    auto data = getDataForKey(key);</span><br><span class="line">    if (data.length() &gt; 0) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            CodedInputData input(data.getPtr(), data.length());</span><br><span class="line">            if (hasValue != nullptr) &#123;</span><br><span class="line">                *hasValue = true;</span><br><span class="line">            &#125;</span><br><span class="line">            return input.readInt32();</span><br><span class="line">        &#125; catch (std::exception &amp;exception) &#123;</span><br><span class="line">            MMKVError(&quot;%s&quot;, exception.what());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (hasValue != nullptr) &#123;</span><br><span class="line">        *hasValue = false;</span><br><span class="line">    &#125;</span><br><span class="line">    return defaultValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MMBuffer MMKV::getDataForKey(MMKVKey_t key) &#123;</span><br><span class="line">    checkLoadData();</span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">    if (m_crypter) &#123;</span><br><span class="line">        auto itr = m_dicCrypt-&gt;find(key);</span><br><span class="line">        if (itr != m_dicCrypt-&gt;end()) &#123;</span><br><span class="line">            auto basePtr = (uint8_t *) (m_file-&gt;getMemory()) + Fixed32Size;</span><br><span class="line">            return itr-&gt;second.toMMBuffer(basePtr, m_crypter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else</span><br><span class="line">#endif</span><br><span class="line">    &#123;</span><br><span class="line">        auto itr = m_dic-&gt;find(key);</span><br><span class="line">        if (itr != m_dic-&gt;end()) &#123;</span><br><span class="line">            auto basePtr = (uint8_t *) (m_file-&gt;getMemory()) + Fixed32Size;</span><br><span class="line">            return itr-&gt;second.toMMBuffer(basePtr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MMBuffer nan;</span><br><span class="line">    return nan;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>调用了 getDataForKey 方法获取到了 key 对应的 MMBuffer，之后通过 CodedInputData 将数据读出并返回;没有时，返回默认值MMBuffer nan;</p>
<h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void MMKV::removeValueForKey(MMKVKey_t key) &#123;</span><br><span class="line">    if (isKeyEmpty(key)) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    SCOPED_LOCK(m_lock);</span><br><span class="line">    SCOPED_LOCK(m_exclusiveProcessLock);</span><br><span class="line">    checkLoadData();</span><br><span class="line"></span><br><span class="line">    removeDataForKey(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它在数据读入内存的前提下，调用了 removeDataForKey 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">bool MMKV::removeDataForKey(MMKVKey_t key) &#123;</span><br><span class="line">    if (isKeyEmpty(key)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">#ifndef MMKV_DISABLE_CRYPT</span><br><span class="line">    if (m_crypter) &#123;</span><br><span class="line">        auto itr = m_dicCrypt-&gt;find(key);</span><br><span class="line">        if (itr != m_dicCrypt-&gt;end()) &#123;</span><br><span class="line">            m_hasFullWriteback = false;</span><br><span class="line">            构造了一条 size 为 null的 MMBuffer </span><br><span class="line">            static MMBuffer nan;</span><br><span class="line">#    ifdef MMKV_APPLE</span><br><span class="line">            auto ret = appendDataWithKey(nan, key, itr-&gt;second);</span><br><span class="line">            if (ret.first) &#123;</span><br><span class="line">                auto oldKey = itr-&gt;first;</span><br><span class="line">                m_dicCrypt-&gt;erase(itr);</span><br><span class="line">                [oldKey release];</span><br><span class="line">            &#125;</span><br><span class="line">#    else</span><br><span class="line">            auto ret = appendDataWithKey(nan, key);</span><br><span class="line">            if (ret.first) &#123;</span><br><span class="line">                m_dicCrypt-&gt;erase(itr);</span><br><span class="line">            &#125;</span><br><span class="line">#    endif</span><br><span class="line">            return ret.first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里实际上是构造了一条 size 为null 的 MMBuffer 并调用 appendDataWithKey 将其 append 到 protobuf 文件中，并将 key 对应的内容从 map 中删除;读取时发现它的 size 为 null，则会认为这条数据已经删除;</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><strong>MMKV</strong></p>
<ul>
<li>1.protobuf文件存储，文件更小;</li>
<li>2.采用mmap，文件拷贝速度更快; </li>
<li>3.不阻塞主线程，采用缺页方式，避免数据丢失。</li>
<li>4.支持增量更新，不管key是否重复，直接将数据加载前数据后。</li>
<li>5.文件大小不够，就需要全量写入：但是需要首先去重，去重后，如果空间够，就把数据编码成mmkv文件格式，全量的覆盖写入文件，如果不够，就需要先扩容（*2）；</li>
<li>6.扩容，设置文件大小*2，通过unmap，解除映射；重新映射mmap(size * 2),这里是个do while循环判断；</li>
<li>7.如果文件损坏：回调给开发者或者默认直接丢失数据，重新保存数据。</li>
<li>8.支持多进程：文件锁flock。多进程数据同步：crc32校验</li>
</ul>
<p><strong>数据对比</strong><br><img src="http://nunu03.github.io/2022/06/03/SharedPreferences-MMAP-MMKV%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/sp-data.png" alt></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.cn/post/6926825172066369544" target="_blank" rel="noopener">关于SharePreference使用以及内部原理简单解析</a><br><a href="https://www.jianshu.com/p/40e42da910e2?utm_campaign=maleskine" target="_blank" rel="noopener">庖丁解牛之SharedPreferences超级大卡顿</a><br><a href="https://github.com/Tencent/MMKV/blob/master/README_CN.md" target="_blank" rel="noopener">MMKV</a><br><a href="https://www.51cto.com/article/686452.html" target="_blank" rel="noopener">https://www.51cto.com/article/686452.html</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mmap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ViewModel源码解析]]></title>
      <url>/2022/06/02/ViewModel%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>ViewModel 类旨在以注重生命周期的方式存储和管理界面相关的数据。ViewModel 类让数据可在发生屏幕旋转等配置更改后继续留存。<br>ViewModel 对象存在的时间范围是获取 ViewModel 时传递给 ViewModelProvider 的 Lifecycle。ViewModel 将一直留在内存中，直到限定其存在时间范围的 Lifecycle 永久消失：对于 activity，是在 activity 完成时；而对于 fragment，是在 fragment 分离时。</p>
<a id="more"></a>
<p>如下图生命周期：<br><img src="http://nunu03.github.io/2022/06/02/ViewModel%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/viewmodel-lifecycle.png" alt><br>在系统首次调用 Activity 对象的 onCreate() 方法时请求 ViewModel。系统可能会在 activity 的整个生命周期内多次调用 onCreate()，如在旋转设备屏幕时。ViewModel 存在的时间范围是从您首次请求 ViewModel 直到 activity 完成并销毁。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>1.横竖屏切换，包括Activity重建，数据可依然保存。</li>
<li>2.同一个Activity下，Fragment之间的数据共享。同理在不同Activity中也可以共享ViewModel数据</li>
</ul>
<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>我们在使用时是这样创建viewmodel的:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewModelProviders.of(this).get(MyViewModel::class.java)</span><br></pre></td></tr></table></figure>

<p>从上看出，Factory不传，默认为null</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public static ViewModelProvider of(@NonNull FragmentActivity activity,</span><br><span class="line">        @Nullable Factory factory) &#123;</span><br><span class="line">    Application application = checkApplication(activity);</span><br><span class="line">    if (factory == null) &#123;</span><br><span class="line">        factory = ViewModelProvider.AndroidViewModelFactory.getInstance(application);</span><br><span class="line">    &#125;</span><br><span class="line">    return new ViewModelProvider(activity.getViewModelStore(), factory);</span><br><span class="line">&#125;</span><br><span class="line">// getViewModelStore是在父类FragmentActivity中的；</span><br><span class="line">public ViewModelStore getViewModelStore() &#123;</span><br><span class="line">        if (getApplication() == null) &#123;</span><br><span class="line">            throw new IllegalStateException(&quot;Your activity is not yet attached to the &quot;</span><br><span class="line">                    + &quot;Application instance. You can&apos;t request ViewModel before onCreate call.&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (mViewModelStore == null) &#123;</span><br><span class="line">            mViewModelStore = new ViewModelStore();</span><br><span class="line">        &#125;</span><br><span class="line">        return mViewModelStore;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>但是在2.2.0 中 ViewModelProviders被弃用。需要用新的方式获取：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ViewModelProvider(this,ViewModelProvider.NewInstaanceFactory()).get(MyViewModel::class.java)</span><br></pre></td></tr></table></figure>

<p>接着看ViewModelStoreOwner,就是this，说明它是一个接口，并且，我们的Activity一定是实现了这个接口。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">public ViewModelProvider(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory) &#123;</span><br><span class="line">    this(owner.getViewModelStore(), factory);</span><br><span class="line">&#125;</span><br><span class="line">// 就是拿到ViewModelStore，如果是高版本，这里应该还有个nc判断，android-28版本nc在onCreate里</span><br><span class="line">public ViewModelStore getViewModelStore() &#123;</span><br><span class="line">    if (getApplication() == null) &#123;</span><br><span class="line">        throw new IllegalStateException(&quot;Your activity is not yet attached to the &quot;</span><br><span class="line">                + &quot;Application instance. You can&apos;t request ViewModel before onCreate call.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // nc保存了viewModelStore，所以横竖屏切换，数据不会丢失。</span><br><span class="line">    if(mViewModelStore == null)&#123;</span><br><span class="line">        NonConfigurationInstances nc =</span><br><span class="line">                    (NonConfigurationInstances) getLastNonConfigurationInstance();</span><br><span class="line">        if (nc != null) &#123;</span><br><span class="line">            mViewModelStore = nc.viewModelStore;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mViewModelStore == null) &#123;</span><br><span class="line">        mViewModelStore = new ViewModelStore();</span><br><span class="line">    &#125;</span><br><span class="line">    return mViewModelStore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//mViewModelStore专门存储ViewModel</span><br><span class="line">public ViewModelProvider(@NonNull ViewModelStore store, @NonNull Factory factory) &#123;</span><br><span class="line">    mFactory = factory;</span><br><span class="line">    this.mViewModelStore = store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看以下继承关系:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class FragmentActivity extends ComponentActivity implements</span><br><span class="line">        ViewModelStoreOwner,</span><br><span class="line">        ActivityCompat.OnRequestPermissionsResultCallback,</span><br><span class="line">        ActivityCompat.RequestPermissionsRequestCodeValidator &#123;</span><br><span class="line">&#125;   </span><br><span class="line">// 这个接口只有一个ViewModelStore</span><br><span class="line">public interface ViewModelStoreOwner &#123;</span><br><span class="line">    @NonNull</span><br><span class="line">    ViewModelStore getViewModelStore();</span><br><span class="line">&#125;</span><br><span class="line">// ViewModelStore是啥？就是存储了一个map，map里存的是viewmodel，同时提供了一个clear方法，用于清理map缓存。</span><br><span class="line">public class ViewModelStore &#123;</span><br><span class="line">    private final HashMap&lt;String, ViewModel&gt; mMap = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    final void put(String key, ViewModel viewModel) &#123;</span><br><span class="line">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class="line">        if (oldViewModel != null) &#123;</span><br><span class="line">            oldViewModel.onCleared();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final ViewModel get(String key) &#123;</span><br><span class="line">        return mMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *  Clears internal storage and notifies ViewModels that they are no longer used.</span><br><span class="line">     */</span><br><span class="line">    public final void clear() &#123;</span><br><span class="line">        for (ViewModel vm : mMap.values()) &#123;</span><br><span class="line">            vm.onCleared();</span><br><span class="line">        &#125;</span><br><span class="line">        mMap.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着看get方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">private static final String DEFAULT_KEY = &quot;androidx.lifecycle.ViewModelProvider.DefaultKey&quot;;</span><br><span class="line"> @MainThread</span><br><span class="line">public &lt;T extends ViewModel&gt; T get(@NonNull Class&lt;T&gt; modelClass) &#123;</span><br><span class="line">    String canonicalName = modelClass.getCanonicalName();</span><br><span class="line">    return get(DEFAULT_KEY + &quot;:&quot; + canonicalName, modelClass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> @MainThread</span><br><span class="line">public &lt;T extends ViewModel&gt; T get(@NonNull String key, @NonNull Class&lt;T&gt; modelClass) &#123;</span><br><span class="line">    ViewModel viewModel = mViewModelStore.get(key);</span><br><span class="line"></span><br><span class="line">    if (modelClass.isInstance(viewModel)) &#123;//缓存里是否有，有就直接返回。</span><br><span class="line">        //noinspection unchecked</span><br><span class="line">        return (T) viewModel;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //noinspection StatementWithEmptyBody</span><br><span class="line">        if (viewModel != null) &#123;</span><br><span class="line">            // TODO: log a warning.</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    viewModel = mFactory.create(modelClass);//通过mFactory创建ViewModel</span><br><span class="line">    mViewModelStore.put(key, viewModel);//存储到mViewModelStore</span><br><span class="line">    //noinspection unchecked</span><br><span class="line">    return (T) viewModel;//并返回ViewModel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那Factory如何根据class创建ViewMoel的？通过反射，拿到我们自定义的MyViewModel</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> public &lt;T extends ViewModel&gt; T create(@NonNull Class&lt;T&gt; modelClass) &#123;</span><br><span class="line">    //noinspection TryWithIdenticalCatches</span><br><span class="line">    try &#123;</span><br><span class="line">        return modelClass.newInstance();</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，<strong>ViewModelProvider(this,ViewModelProvider.NewInstaanceFactory()).get(MyViewModel::class.java)</strong>这段代码一执行。就会通过工厂NewInstaanceFactory，反射实例化MyViewModel存储到了ViewModelStore中。<br>那viewmodel是啥时候销毁的？是在onDestroy生命周期中，所以，这里不需要我们手动去做，框架帮我们做了。同理，无论activity如何操作，旋转，重建，viewmode都不会销毁，数据都会保存，只有最后销毁，才清除掉。同时跟lifecycle解绑。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">protected void onDestroy() &#123;</span><br><span class="line">       super.onDestroy();</span><br><span class="line">       if (mViewModelStore != null &amp;&amp; !isChangingConfigurations()) &#123;</span><br><span class="line">           mViewModelStore.clear();</span><br><span class="line">       &#125;</span><br><span class="line">       mFragments.dispatchDestroy();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.android.google.cn/topic/libraries/architecture/viewmodel" target="_blank" rel="noopener">developer.android.google.cn</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ViewModel </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LiveData&LifeCycle原理]]></title>
      <url>/2022/06/02/LiveData-LifeCycle%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h2><p>LiveData是一个可以被观察的数据持有类，可以感知并遵循Activity、Fragment等组件的生命周期。因此可以做到仅再组件处于生命周期的激活状态时更新UI数据。</p>
<a id="more"></a>
<p><img src="http://nunu03.github.io/2022/06/02/LiveData-LifeCycle%E5%8E%9F%E7%90%86/live-jg.png" alt></p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">@MainThread</span><br><span class="line">public void observe(@NonNull LifecycleOwner owner, @NonNull Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">    assertMainThread(&quot;observe&quot;);</span><br><span class="line">    if (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">        // ignore</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    //对observer进行封装，observer不具备生命周期，而LifecycleBoundObserver是一个内部类，实现了观察者接口的对象，可以观察生命周期。</span><br><span class="line">    LifecycleBoundObserver wrapper = new LifecycleBoundObserver(owner, observer);</span><br><span class="line">    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    if (existing != null &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Cannot add the same observer&quot;</span><br><span class="line">                + &quot; with different lifecycles&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (existing != null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // 把wrapper观察者给生命周期，同时调用的LifecycleRegistry的addObserver</span><br><span class="line">    owner.getLifecycle().addObserver(wrapper);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// LifecycleRegistry有一个mObserverMap，保存了所有的ObserverWrapper。</span><br><span class="line">public class LifecycleRegistry extends Lifecycle &#123;</span><br><span class="line">private FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap =</span><br><span class="line">            new FastSafeIterableMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class LifecycleBoundObserver extends ObserverWrapper implements GenericLifecycleObserver &#123;</span><br><span class="line">    @NonNull final LifecycleOwner mOwner;</span><br><span class="line"></span><br><span class="line">    LifecycleBoundObserver(@NonNull LifecycleOwner owner, Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">        super(observer);</span><br><span class="line">        mOwner = owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    boolean shouldBeActive() &#123;</span><br><span class="line">        return mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) &#123;</span><br><span class="line">        if (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">            // 当activity销毁时，清除mObserver</span><br><span class="line">            removeObserver(mObserver);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        activeStateChanged(shouldBeActive());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    boolean isAttachedTo(LifecycleOwner owner) &#123;</span><br><span class="line">        return mOwner == owner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    void detachObserver() &#123;</span><br><span class="line">        mOwner.getLifecycle().removeObserver(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2022/06/02/LiveData-LifeCycle%E5%8E%9F%E7%90%86/live-register.png" alt></p>
<h3 id="postValue"><a href="#postValue" class="headerlink" title="postValue"></a>postValue</h3><p>postValue,时通过Handler的方式，在子线程刷新数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class MutableLiveData&lt;T&gt; extends LiveData&lt;T&gt; &#123;</span><br><span class="line">    // 用于子线程数据的刷新</span><br><span class="line">    @Override</span><br><span class="line">    public void postValue(T value) &#123;</span><br><span class="line">        super.postValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void setValue(T value) &#123;</span><br><span class="line">        super.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> protected void postValue(T value) &#123;</span><br><span class="line">    boolean postTask;</span><br><span class="line">    synchronized (mDataLock) &#123;</span><br><span class="line">        postTask = mPendingData == NOT_SET;</span><br><span class="line">        mPendingData = value;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!postTask) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void postToMainThread(Runnable runnable) &#123;</span><br><span class="line">    if (mMainHandler == null) &#123;</span><br><span class="line">        synchronized (mLock) &#123;</span><br><span class="line">            if (mMainHandler == null) &#123;</span><br><span class="line">                mMainHandler = new Handler(Looper.getMainLooper());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //noinspection ConstantConditions</span><br><span class="line">    mMainHandler.post(runnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="setValue"><a href="#setValue" class="headerlink" title="setValue"></a>setValue</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">@MainThread</span><br><span class="line">protected void setValue(T value) &#123;</span><br><span class="line">    assertMainThread(&quot;setValue&quot;);</span><br><span class="line">    mVersion++;//数据版本+1</span><br><span class="line">    mData = value;</span><br><span class="line">    dispatchingValue(null);//数据分发</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// mDispatchInvalidated 是在递归操作中的容错机制，比如一个livedata多次setValue值，第二次应该是后一次的值</span><br><span class="line">private void dispatchingValue(@Nullable ObserverWrapper initiator) &#123;</span><br><span class="line">    if (mDispatchingValue) &#123;</span><br><span class="line">        mDispatchInvalidated = true;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    mDispatchingValue = true;</span><br><span class="line">    // while循环，处理所有的观察者</span><br><span class="line">    do &#123;</span><br><span class="line">        mDispatchInvalidated = false;</span><br><span class="line">        if (initiator != null) &#123;</span><br><span class="line">            considerNotify(initiator);</span><br><span class="line">            initiator = null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            for (Iterator&lt;Map.Entry&lt;Observer&lt;? super T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class="line">                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class="line">                considerNotify(iterator.next().getValue());</span><br><span class="line">                if (mDispatchInvalidated) &#123;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (mDispatchInvalidated);</span><br><span class="line">    mDispatchingValue = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> private void considerNotify(ObserverWrapper observer) &#123;</span><br><span class="line">    if (!observer.mActive) &#123;//界面是否处于可见状态</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    if (!observer.shouldBeActive()) &#123;</span><br><span class="line">        observer.activeStateChanged(false);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    if (observer.mLastVersion &gt;= mVersion) &#123;//如果注册的版本&gt;数据版本也返回。</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    observer.mLastVersion = mVersion;</span><br><span class="line">    //noinspection unchecked</span><br><span class="line">    observer.mObserver.onChanged((T) mData);//界面刷新</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="activity生命周期change数据"><a href="#activity生命周期change数据" class="headerlink" title="activity生命周期change数据"></a>activity生命周期change数据</h3><p>CustomerActivity -》AppCompatActivity-》FragmentActivity-》ComponentActivity<br>而在》ComponentActivity中，添加了一个默认ReportFragment,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    ReportFragment.injectIfNeededIn(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而这个ReportFragment监听了生命周期：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void onActivityCreated(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onActivityCreated(savedInstanceState);</span><br><span class="line">    dispatchCreate(mProcessListener);</span><br><span class="line">    dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onStart() &#123;</span><br><span class="line">    super.onStart();</span><br><span class="line">    dispatchStart(mProcessListener);</span><br><span class="line">    dispatch(Lifecycle.Event.ON_START);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onResume() &#123;</span><br><span class="line">    super.onResume();</span><br><span class="line">    dispatchResume(mProcessListener);</span><br><span class="line">    dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onPause() &#123;</span><br><span class="line">    super.onPause();</span><br><span class="line">    dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onStop() &#123;</span><br><span class="line">    super.onStop();</span><br><span class="line">    dispatch(Lifecycle.Event.ON_STOP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onDestroy() &#123;</span><br><span class="line">    super.onDestroy();</span><br><span class="line">    dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">    // just want to be sure that we won&apos;t leak reference to an activity</span><br><span class="line">    mProcessListener = null;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dispatch会触发相应handleLifecycleEvent的事件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">private void dispatch(Lifecycle.Event event) &#123;</span><br><span class="line">    Activity activity = getActivity();</span><br><span class="line">    if (activity instanceof LifecycleRegistryOwner) &#123;</span><br><span class="line">        ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (activity instanceof LifecycleOwner) &#123;</span><br><span class="line">        Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class="line">        if (lifecycle instanceof LifecycleRegistry) &#123;</span><br><span class="line">            ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会到LifecycleRegistry里执行：moveToState-&gt;sync-&gt;forwardPass-&gt;observer.dispatchEvent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">public void handleLifecycleEvent(@NonNull Lifecycle.Event event) &#123;</span><br><span class="line">    State next = getStateAfter(event);</span><br><span class="line">    moveToState(next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void sync() &#123;</span><br><span class="line">    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">    // 循环调用forwardPass</span><br><span class="line">    while (!isSynced()) &#123;</span><br><span class="line">        mNewEventOccurred = false;</span><br><span class="line">        // no need to check eldest for nullability, because isSynced does it for us.</span><br><span class="line">        if (mState.compareTo(mObserverMap.eldest().getValue().mState) &lt; 0) &#123;</span><br><span class="line">            backwardPass(lifecycleOwner);</span><br><span class="line">        &#125;</span><br><span class="line">        Entry&lt;LifecycleObserver, ObserverWithState&gt; newest = mObserverMap.newest();</span><br><span class="line">        if (!mNewEventOccurred &amp;&amp; newest != null</span><br><span class="line">                &amp;&amp; mState.compareTo(newest.getValue().mState) &gt; 0) &#123;</span><br><span class="line">            forwardPass(lifecycleOwner);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// LifecycleRegistry有一个mObserverMap，遍历所有的Observer</span><br><span class="line">private void forwardPass(LifecycleOwner lifecycleOwner) &#123;</span><br><span class="line">    Iterator&lt;Entry&lt;LifecycleObserver, ObserverWithState&gt;&gt; ascendingIterator =</span><br><span class="line">            mObserverMap.iteratorWithAdditions();</span><br><span class="line">    while (ascendingIterator.hasNext() &amp;&amp; !mNewEventOccurred) &#123;</span><br><span class="line">        Entry&lt;LifecycleObserver, ObserverWithState&gt; entry = ascendingIterator.next();</span><br><span class="line">        ObserverWithState observer = entry.getValue();</span><br><span class="line">        while ((observer.mState.compareTo(mState) &lt; 0 &amp;&amp; !mNewEventOccurred</span><br><span class="line">                &amp;&amp; mObserverMap.contains(entry.getKey()))) &#123;</span><br><span class="line">            pushParentState(observer.mState);</span><br><span class="line">            //这里就进入到了观察者了</span><br><span class="line">            observer.dispatchEvent(lifecycleOwner, upEvent(observer.mState));</span><br><span class="line">            popParentState();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static class ObserverWithState &#123;</span><br><span class="line">    State mState;</span><br><span class="line">    GenericLifecycleObserver mLifecycleObserver;</span><br><span class="line"></span><br><span class="line">    ObserverWithState(LifecycleObserver observer, State initialState) &#123;</span><br><span class="line">        mLifecycleObserver = Lifecycling.getCallback(observer);</span><br><span class="line">        mState = initialState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void dispatchEvent(LifecycleOwner owner, Event event) &#123;</span><br><span class="line">        State newState = getStateAfter(event);</span><br><span class="line">        mState = min(mState, newState);</span><br><span class="line">        ////这里执行的不就是我们注册时候的Observer吗？也就是LifecycleBoundObserver extend ObserverWrapper，那执行onStateChanged，也就是执行LifecycleBoundObserver.onStateChanged，这样就 执行activeStateChanged</span><br><span class="line">        mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">        mState = newState;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//dispatchingValue执行的不就是setValue的dispatchingValue</span><br><span class="line">void activeStateChanged(boolean newActive) &#123;</span><br><span class="line">    if (newActive == mActive) &#123;//如果界面未处于显示状态</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    mActive = newActive;</span><br><span class="line">    boolean wasInactive = LiveData.this.mActiveCount == 0;</span><br><span class="line">    LiveData.this.mActiveCount += mActive ? 1 : -1;</span><br><span class="line">    if (wasInactive &amp;&amp; mActive) &#123;</span><br><span class="line">        onActive();</span><br><span class="line">    &#125;</span><br><span class="line">    if (LiveData.this.mActiveCount == 0 &amp;&amp; !mActive) &#123;</span><br><span class="line">        onInactive();</span><br><span class="line">    &#125;</span><br><span class="line">    if (mActive) &#123;</span><br><span class="line">        dispatchingValue(this);// 处于活动状态，刷新数据。</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件分发"><a href="#事件分发" class="headerlink" title="事件分发"></a>事件分发</h3><p><img src="http://nunu03.github.io/2022/06/02/LiveData-LifeCycle%E5%8E%9F%E7%90%86/live-value.png" alt></p>
<h3 id="LiveData-数据存储"><a href="#LiveData-数据存储" class="headerlink" title="LiveData 数据存储"></a>LiveData 数据存储</h3><p>private volatile Object mData = NOT_SET;// 就是livedata对象的一个变量<br>那何时销毁的。肯定时在生命周期里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// LifecycleBoundObserver里</span><br><span class="line"> @Override</span><br><span class="line">public void onStateChanged(LifecycleOwner source, Lifecycle.Event event) &#123;</span><br><span class="line">    if (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;//界面销毁时</span><br><span class="line">        removeObserver(mObserver);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    activeStateChanged(shouldBeActive());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void removeObserver(@NonNull final Observer&lt;? super T&gt; observer) &#123;</span><br><span class="line">    ObserverWrapper removed = mObservers.remove(observer);//livedata跟lifecycle生命周期接触绑定，livedata就时一个独立的对象，就是GCRoot引用不到了，GC会自动回收</span><br><span class="line">    if (removed == null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    removed.detachObserver();</span><br><span class="line">    removed.activeStateChanged(false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>Livedata在主线程和子线程都可以用，如果多个线程同时处理同一个mData，所以会存在并发的问题。而mData时一个变量，所以用volatile。<br>线程处理变量是在自己的工作内存，用完后写回主内存。如果多个线程同时处理这个动作，就是volatile要解决的问题。当一个线程要处理时，另一个线程也在执行，就要等这个线程写回主内存后，在从主内存拷贝到工作线程执行。所以volatile保持了原子性。</p>
<h3 id="LiveData粘性事件"><a href="#LiveData粘性事件" class="headerlink" title="LiveData粘性事件"></a>LiveData粘性事件</h3><p>产生原因：先发送消息，后注册。也就是下边的版本判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (observer.mLastVersion &gt;= mVersion) &#123;//如果注册的版本&gt;数据版本也返回。</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2022/06/02/LiveData-LifeCycle%E5%8E%9F%E7%90%86/live-bug.png" alt></p>
<h4 id="反射解决"><a href="#反射解决" class="headerlink" title="反射解决"></a>反射解决</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">private void hook(@NonNull Observer&lt;T&gt; observer) throws Exception &#123;</span><br><span class="line">        //get wrapper&apos;s version</span><br><span class="line">        Class&lt;LiveData&gt; classLiveData = LiveData.class;</span><br><span class="line">        Field fieldObservers = classLiveData.getDeclaredField(&quot;mObservers&quot;);</span><br><span class="line">        fieldObservers.setAccessible(true);</span><br><span class="line">        Object objectObservers = fieldObservers.get(this);</span><br><span class="line">        Class&lt;?&gt; classObservers = objectObservers.getClass();</span><br><span class="line">        Method methodGet = classObservers.getDeclaredMethod(&quot;get&quot;, Object.class);</span><br><span class="line">        methodGet.setAccessible(true);</span><br><span class="line">        Object objectWrapperEntry = methodGet.invoke(objectObservers, observer);</span><br><span class="line">        Object objectWrapper = null;</span><br><span class="line">        if (objectWrapperEntry instanceof Map.Entry) &#123;</span><br><span class="line">            objectWrapper = ((Map.Entry) objectWrapperEntry).getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        if (objectWrapper == null) &#123;</span><br><span class="line">            throw new NullPointerException(&quot;Wrapper can not be bull!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; classObserverWrapper = objectWrapper.getClass().getSuperclass();</span><br><span class="line">        Field fieldLastVersion = classObserverWrapper.getDeclaredField(&quot;mLastVersion&quot;);</span><br><span class="line">        fieldLastVersion.setAccessible(true);</span><br><span class="line">        //get livedata&apos;s version</span><br><span class="line">        Field fieldVersion = classLiveData.getDeclaredField(&quot;mVersion&quot;);</span><br><span class="line">        fieldVersion.setAccessible(true);</span><br><span class="line">        Object objectVersion = fieldVersion.get(this);</span><br><span class="line">        //set wrapper&apos;s version</span><br><span class="line">        fieldLastVersion.set(objectWrapper, objectVersion);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="忽略第一次onChanged回调"><a href="#忽略第一次onChanged回调" class="headerlink" title="忽略第一次onChanged回调"></a>忽略第一次onChanged回调</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 包装observer。可以忽略第一次的onChanged回调</span><br><span class="line">    * @param &lt;T&gt;</span><br><span class="line">    */</span><br><span class="line">private class ObserverWrapper&lt;T&gt; implements Observer&lt;T&gt; &#123;</span><br><span class="line">    private final Observer targetObserver;</span><br><span class="line">    private boolean ignoreOnce;</span><br><span class="line"></span><br><span class="line">    public ObserverWrapper(Observer targetObserver) &#123;</span><br><span class="line">        this.targetObserver = targetObserver;</span><br><span class="line">        this.ignoreOnce = getValue() != null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onChanged(T t) &#123;</span><br><span class="line">        if (ignoreOnce) &#123;</span><br><span class="line">            ignoreOnce = false;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            targetObserver.onChanged(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用通信框架"><a href="#常用通信框架" class="headerlink" title="常用通信框架"></a>常用通信框架</h3><table>
<thead>
<tr>
<th>方案</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>Handler</td>
<td>系统原生，能实现线程间通信</td>
<td>高耦合、不利于维护、容易导致内存泄漏和空指针</td>
</tr>
<tr>
<td>BroadCast</td>
<td>简单</td>
<td>性能差、传递数据有限、打乱代码执行逻辑</td>
</tr>
<tr>
<td>interface</td>
<td>速度快、容易理解</td>
<td>实现复杂、不利于维护</td>
</tr>
<tr>
<td>RxBus</td>
<td>效率高、无内存泄漏</td>
<td>基于rxjava，学习成本高且依赖包太大</td>
</tr>
<tr>
<td>EventBus</td>
<td>使用简单</td>
<td>混淆问题，无法感知组件的生命周期、实现复杂</td>
</tr>
</tbody></table>
<h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>在真实的app中，最终会有大量的管理界面和其他组件的调用，以响应生命周期的当前状态。管理多个组件会在生命周期方法中放置大量的代码，这使得它们就难以维护。<br>androidx.lifecycle 软件包提供了可用于构建生命周期感知型组件的类和接口 - 这些组件可以根据 Activity 或 Fragment 的当前生命周期状态自动调整其行为。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>观察者设计模式(发布-订阅)。<br><img src="http://nunu03.github.io/2022/06/02/LiveData-LifeCycle%E5%8E%9F%E7%90%86/live-lifecycle.png" alt></p>
<ul>
<li><ol>
<li>注册<br>在activity中:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getLifecycle().addObserver(new LifecycleObserver() &#123;&#125;);</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<p>getLifecycle()获取的是ComponentActivity中的LifecycleRegistry</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);</span><br></pre></td></tr></table></figure>

<p>所以addObserver也是LifecycleRegistry的addObserver，从而把observer存到容器mObserverMap中，mObserverMap是一个Map。<strong>所以，注册完成</strong>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public void addObserver(@NonNull LifecycleObserver observer) &#123;</span><br><span class="line">    State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class="line">    ObserverWithState statefulObserver = new ObserverWithState(observer, initialState);</span><br><span class="line">    ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class="line">    // 如果observer之前已经传进来了，则直接返回，不重复添加</span><br><span class="line">    if (previous != null) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">    if (lifecycleOwner == null) &#123;</span><br><span class="line">        // it is null we should be destroyed. Fallback quickly</span><br><span class="line">        // 如何lifecycleOwner已经被回收了，直接返回</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    boolean isReentrance = mAddingObserverCounter != 0 || mHandlingEvent;</span><br><span class="line">    State targetState = calculateTargetState(observer);</span><br><span class="line">    mAddingObserverCounter++;</span><br><span class="line">    while ((statefulObserver.mState.compareTo(targetState) &lt; 0</span><br><span class="line">            &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class="line">        pushParentState(statefulObserver.mState);</span><br><span class="line">        statefulObserver.dispatchEvent(lifecycleOwner, upEvent(statefulObserver.mState));</span><br><span class="line">        popParentState();</span><br><span class="line">        // mState / subling may have been changed recalculate</span><br><span class="line">        targetState = calculateTargetState(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (!isReentrance) &#123;</span><br><span class="line">        // we do sync only on the top level.</span><br><span class="line">        sync();</span><br><span class="line">    &#125;</span><br><span class="line">    mAddingObserverCounter--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>轮询通知<br>在发生生命周期是，都会执行到LifecycleRegistry的handleLifecycleEvent方法：</li>
</ol>
</li>
</ul>
<p>-&gt; moveToState-&gt; sync-&gt; forwardPass/backwardPass-&gt;observer.dispatchEvent-&gt;mLifecycleObserver.onStateChanged(owner, event);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void handleLifecycleEvent(@NonNull Lifecycle.Event event) &#123;</span><br><span class="line">    State next = getStateAfter(event);</span><br><span class="line">    moveToState(next);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那handleLifecycleEvent，是如何被执行的？其实是通过一个默认的ReportFragment，这个Fragment响应着Activity的每个生命周期。ComponentActivity中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    ReportFragment.injectIfNeededIn(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ReportFragment中的生命周期都调用了dispatch，而dispatch中就调用了handleLifecycleEvent</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">public static void injectIfNeededIn(Activity activity) &#123;</span><br><span class="line">    // ProcessLifecycleOwner should always correctly work and some activities may not extend</span><br><span class="line">    // FragmentActivity from support lib, so we use framework fragments for activities</span><br><span class="line">    android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class="line">    if (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == null) &#123;</span><br><span class="line">        manager.beginTransaction().add(new ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class="line">        // Hopefully, we are the first to make a transaction.</span><br><span class="line">        manager.executePendingTransactions();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onActivityCreated(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onActivityCreated(savedInstanceState);</span><br><span class="line">    dispatchCreate(mProcessListener);</span><br><span class="line">    dispatch(Lifecycle.Event.ON_CREATE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onStart() &#123;</span><br><span class="line">    super.onStart();</span><br><span class="line">    dispatchStart(mProcessListener);</span><br><span class="line">    dispatch(Lifecycle.Event.ON_START);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onResume() &#123;</span><br><span class="line">    super.onResume();</span><br><span class="line">    dispatchResume(mProcessListener);</span><br><span class="line">    dispatch(Lifecycle.Event.ON_RESUME);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onPause() &#123;</span><br><span class="line">    super.onPause();</span><br><span class="line">    dispatch(Lifecycle.Event.ON_PAUSE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onStop() &#123;</span><br><span class="line">    super.onStop();</span><br><span class="line">    dispatch(Lifecycle.Event.ON_STOP);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onDestroy() &#123;</span><br><span class="line">    super.onDestroy();</span><br><span class="line">    dispatch(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">    // just want to be sure that we won&apos;t leak reference to an activity</span><br><span class="line">    mProcessListener = null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void dispatch(Lifecycle.Event event) &#123;</span><br><span class="line">    Activity activity = getActivity();</span><br><span class="line">    if (activity instanceof LifecycleRegistryOwner) &#123;</span><br><span class="line">        ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (activity instanceof LifecycleOwner) &#123;</span><br><span class="line">        Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class="line">        if (lifecycle instanceof LifecycleRegistry) &#123;</span><br><span class="line">            ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>所以如上就指导执行生命周期时如何轮询observer容器，也就是LifecycleRegistry中的map，从而通知观察者响应了。</strong><br>这个思路其实采用的时Glide的设计思想，所以Glide中view拥有生命周期的思想，也是这个思想。</p>
<h3 id="Activity-amp-Fragment生命周期"><a href="#Activity-amp-Fragment生命周期" class="headerlink" title="Activity&amp;Fragment生命周期"></a>Activity&amp;Fragment生命周期</h3><p>那Activity执行生命周期时如果通知到Fragment中的。在Activity中，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">final void performResume(boolean followedByPause, String reason) &#123;</span><br><span class="line">    performRestart(true /* start */, reason);</span><br><span class="line">    // mResumed is set by the instrumentation</span><br><span class="line">    //执行Activity的OnResume生命周期后</span><br><span class="line">    mInstrumentation.callActivityOnResume(this);</span><br><span class="line">    。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</span><br><span class="line">    //执行Activity内的F绕过门头的OnResume生命周期</span><br><span class="line">    mFragments.dispatchResume();</span><br><span class="line">    mFragments.execPendingActions();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接着执行<br>-&gt; FragmentController.dispatchResume -&gt;<br>FragmentManager.dispatchResume -&gt; dispatchMoveToState -&gt; moveToState -&gt; for(moveFragmentToExpectedState) -&gt; moveToState(Fragment f) -&gt;  switch (f.mState) f.onAttach || f.performCreateView || f.performResume -&gt;<br>Fragment.performResume -&gt; onResume() 从而，当Activity执行完生命周期后，就通过for循环执行了对应的所有Fragment的生命周期。</p>
<h3 id="LifecycleOwner"><a href="#LifecycleOwner" class="headerlink" title="LifecycleOwner"></a>LifecycleOwner</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// ComponentActivity中：</span><br><span class="line">private LifecycleRegistry mLifecycleRegistry = new LifecycleRegistry(this);</span><br><span class="line"></span><br><span class="line">public LifecycleRegistry(@NonNull LifecycleOwner provider) &#123;</span><br><span class="line">    mLifecycleOwner = new WeakReference&lt;&gt;(provider);</span><br><span class="line">    mState = INITIALIZED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，谁创建了LifecycleRegistry，谁就是LifecycleOwner，或者说，谁创建LifecycleRegistry，谁就是被观察者，或者说LifecycleOwner就是ComponentActivity，就是被观察者。同时用了弱引用WeakReference，防止内存泄漏。如果不用弱引用，LifecycleRegistry持有Activity，如果LifecycleRegistry不释放，Activity就不释放，虽然activity走了onDestory。弱引用WeakReference当GC的时候就主动回收了。不用担心内存泄漏问题。</p>
<h3 id="Lifecycle状态机"><a href="#Lifecycle状态机" class="headerlink" title="Lifecycle状态机"></a>Lifecycle状态机</h3><p>Lifecycle是LifecycleRegistry的父类。LifecycleRegistry不仅保存观察者map和被观察者owner，同时保存了状态机，和Event。这里的Event和生命周期是一一对应的。但是States跟Event不是一一对应的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">private FastSafeIterableMap&lt;LifecycleObserver, ObserverWithState&gt; mObserverMap = new FastSafeIterableMap&lt;&gt;();//观察者</span><br><span class="line">/**</span><br><span class="line">    * Current state</span><br><span class="line">    */</span><br><span class="line">private State mState;//状态机</span><br><span class="line">/**</span><br><span class="line">    * The provider that owns this Lifecycle.</span><br><span class="line">    * Only WeakReference on LifecycleOwner is kept, so if somebody leaks Lifecycle, they won&apos;t leak</span><br><span class="line">    * the whole Fragment / Activity. However, to leak Lifecycle object isn&apos;t great idea neither,</span><br><span class="line">    * because it keeps strong references on all other listeners, so you&apos;ll leak all of them as</span><br><span class="line">    * well.</span><br><span class="line">    */</span><br><span class="line">private final WeakReference&lt;LifecycleOwner&gt; mLifecycleOwner;//被观察者</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2022/06/02/LiveData-LifeCycle%E5%8E%9F%E7%90%86/live-states.png" alt><br>所以这个图对应下边的代码，并且注意，这个states跟生命周期是没有关系的，是lifecycle独有的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static State getStateAfter(Event event) &#123;</span><br><span class="line">        switch (event) &#123;</span><br><span class="line">            case ON_CREATE:</span><br><span class="line">            case ON_STOP:</span><br><span class="line">                return CREATED;</span><br><span class="line">            case ON_START:</span><br><span class="line">            case ON_PAUSE:</span><br><span class="line">                return STARTED;</span><br><span class="line">            case ON_RESUME:</span><br><span class="line">                return RESUMED;</span><br><span class="line">            case ON_DESTROY:</span><br><span class="line">                return DESTROYED;</span><br><span class="line">            case ON_ANY:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(&quot;Unexpected event value &quot; + event);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>activity能直接用，是因为默认就支持了，在ComponentActivity父类中支持初始化了。<br>那其他可以用吗？可以。可以定义一个类实现LifecycleOwner接口，这个类里能拿到LifecycleRegistry，当其他组件执行生命周期是就调用LifecycleRegistry的分发机制就可以了。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>哔哩哔哩视频、源码版本是android-28</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> LiveData </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android WMS原理]]></title>
      <url>/2022/06/01/Android-WMS%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="zygote-启动app进程"><a href="#zygote-启动app进程" class="headerlink" title="zygote 启动app进程"></a>zygote 启动app进程</h2><p>总结app启动流程以及wms相关的view绘制源码解析，以及相关的一些问题的整理。</p>
<h3 id="zygoteInit"><a href="#zygoteInit" class="headerlink" title="zygoteInit"></a>zygoteInit</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">public static final Runnable zygoteInit(int targetSdkVersion, String[] argv, ClassLoader classLoader) &#123;</span><br><span class="line">    if (RuntimeInit.DEBUG) &#123;</span><br><span class="line">        Slog.d(RuntimeInit.TAG, &quot;RuntimeInit: Starting application from zygote&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;ZygoteInit&quot;);</span><br><span class="line">    RuntimeInit.redirectLogStreams();</span><br><span class="line"></span><br><span class="line">    //初始化运行环境</span><br><span class="line">    RuntimeInit.commonInit();</span><br><span class="line">    // 创建进程并启动binder，方法在androidRuntime.cpp中注册</span><br><span class="line">    ZygoteInit.nativeZygoteInit();</span><br><span class="line">     //并通过反射创建程序入口函数的Method对象，并返回Runnable对象（看下面findStaticMain方法）</span><br><span class="line">    return RuntimeInit.applicationInit(targetSdkVersion, argv, classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">protected static Runnable findStaticMain(String className, String[] argv,</span><br><span class="line">            ClassLoader classLoader) &#123;</span><br><span class="line">        Class&lt;?&gt; cl;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            cl = Class.forName(className, true, classLoader);</span><br><span class="line">        &#125; catch (ClassNotFoundException ex) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                    &quot;Missing class when invoking static main &quot; + className,</span><br><span class="line">                    ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method m;</span><br><span class="line">        try &#123;</span><br><span class="line">            //通过反射拿到对应类的main方法的method对象</span><br><span class="line">            m = cl.getMethod(&quot;main&quot;, new Class[] &#123; String[].class &#125;);</span><br><span class="line">        &#125; catch (NoSuchMethodException ex) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                    &quot;Missing static main on &quot; + className, ex);</span><br><span class="line">        &#125; catch (SecurityException ex) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                    &quot;Problem getting static main on &quot; + className, ex);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        int modifiers = m.getModifiers();</span><br><span class="line">        if (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                    &quot;Main method is not public and static on &quot; + className);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">         * This throw gets caught in ZygoteInit.main(), which responds</span><br><span class="line">         * by invoking the exception&apos;s run() method. This arrangement</span><br><span class="line">         * clears up all the stack frames that were required in setting</span><br><span class="line">         * up the process.</span><br><span class="line">         */</span><br><span class="line">        return new MethodAndArgsCaller(m, argv);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="ActivityThread-main"><a href="#ActivityThread-main" class="headerlink" title="ActivityThread.main"></a>ActivityThread.main</h3><p>最终会到ActivityThread类的main函数：也是app进程的main函数：首先会创建Loop；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;ActivityThreadMain&quot;);</span><br><span class="line"></span><br><span class="line">        // CloseGuard defaults to true and can be quite spammy.  We</span><br><span class="line">        // disable it here, but selectively enable it later (via</span><br><span class="line">        // StrictMode) on debug builds, but using DropBox, not logs.</span><br><span class="line">        CloseGuard.setEnabled(false);</span><br><span class="line"></span><br><span class="line">        Environment.initForCurrentUser();</span><br><span class="line"></span><br><span class="line">        // Set the reporter for event logging in libcore</span><br><span class="line">        EventLogger.setReporter(new EventLoggingReporter());</span><br><span class="line"></span><br><span class="line">        // Make sure TrustedCertificateStore looks in the right place for CA certificates</span><br><span class="line">        final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</span><br><span class="line">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</span><br><span class="line"></span><br><span class="line">        Process.setArgV0(&quot;&lt;pre-initialized&gt;&quot;);</span><br><span class="line"></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">        // Find the value for &#123;@link #PROC_START_SEQ_IDENT&#125; if provided on the command line.</span><br><span class="line">        // It will be in the format &quot;seq=114&quot;</span><br><span class="line">        long startSeq = 0;</span><br><span class="line">        if (args != null) &#123;</span><br><span class="line">            for (int i = args.length - 1; i &gt;= 0; --i) &#123;</span><br><span class="line">                if (args[i] != null &amp;&amp; args[i].startsWith(PROC_START_SEQ_IDENT)) &#123;</span><br><span class="line">                    startSeq = Long.parseLong(</span><br><span class="line">                            args[i].substring(PROC_START_SEQ_IDENT.length()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //重点是这个attach函数</span><br><span class="line">        ActivityThread thread = new ActivityThread();</span><br><span class="line">        thread.attach(false, startSeq);</span><br><span class="line"></span><br><span class="line">        if (sMainThreadHandler == null) &#123;</span><br><span class="line">            sMainThreadHandler = thread.getHandler();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (false) &#123;</span><br><span class="line">            Looper.myLooper().setMessageLogging(new</span><br><span class="line">                    LogPrinter(Log.DEBUG, &quot;ActivityThread&quot;));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // End of event ActivityThreadMain.</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">        Looper.loop();</span><br><span class="line"></span><br><span class="line">        throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="ActivityThread-attachApplication"><a href="#ActivityThread-attachApplication" class="headerlink" title="ActivityThread.attachApplication"></a>ActivityThread.attachApplication</h3><p>最终会调用attachApplication；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private void attach(boolean system, long startSeq) &#123;</span><br><span class="line">    sCurrentActivityThread = this;</span><br><span class="line">    mSystemThread = system;</span><br><span class="line"></span><br><span class="line">    ViewRootImpl.addFirstDrawHandler(new Runnable() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            ensureJitEnabled();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    android.ddm.DdmHandleAppName.setAppName(&quot;&lt;pre-initialized&gt;&quot;,</span><br><span class="line">                                            UserHandle.myUserId());</span><br><span class="line">    RuntimeInit.setApplicationObject(mAppThread.asBinder());</span><br><span class="line">    //获取AMS的本地代理类，也就是AMS服务的binder</span><br><span class="line">    final IActivityManager mgr = ActivityManager.getService();</span><br><span class="line">    try &#123;</span><br><span class="line">        //通过binder调用AMS的attachApplication，并把ApplicationThread，传递给AMS</span><br><span class="line">        mgr.attachApplication(mAppThread, startSeq);</span><br><span class="line">    &#125; catch (RemoteException ex) &#123;</span><br><span class="line">        throw ex.rethrowFromSystemServer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入AMS的attachApplication方法：并且把app的binder添加到AMS</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public final void attachApplication(IApplicationThread thread, long startSeq) &#123;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        int callingPid = Binder.getCallingPid();</span><br><span class="line">        final int callingUid = Binder.getCallingUid();</span><br><span class="line">        final long origId = Binder.clearCallingIdentity();</span><br><span class="line">        attachApplicationLocked(thread, callingPid, callingUid, startSeq);</span><br><span class="line">        Binder.restoreCallingIdentity(origId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加到哪里？ProcessList，做什么？处理app相关进程，所以，app进程是由AMS管理的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Activity manager code dealing with processes.</span><br><span class="line"> */</span><br><span class="line"> final ProcessList mProcessList = new ProcessList();</span><br></pre></td></tr></table></figure>

<p>所以，ActivityThread包含了app所有进程的信息，就是一个app进程。</p>
<h3 id="ActivityThread-ApplicationThread"><a href="#ActivityThread-ApplicationThread" class="headerlink" title="ActivityThread.ApplicationThread"></a>ActivityThread.ApplicationThread</h3><p>ApplicationThread也是一个binder，同时，attachApplication，也会进行app生命周期处理，例如4大组件的生命周期，都是从这个类里开始的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line">private class ApplicationThread extends IApplicationThread.Stub &#123;</span><br><span class="line"> //这里绑定了一个Application，并转化为一个当前进程的Message</span><br><span class="line">public final void bindApplication(String processName, ApplicationInfo appInfo,</span><br><span class="line">        List&lt;ProviderInfo&gt; providers, ComponentName instrumentationName,</span><br><span class="line">        ProfilerInfo profilerInfo, Bundle instrumentationArgs,</span><br><span class="line">        IInstrumentationWatcher instrumentationWatcher,</span><br><span class="line">        IUiAutomationConnection instrumentationUiConnection, int debugMode,</span><br><span class="line">        boolean enableBinderTracking, boolean trackAllocation,</span><br><span class="line">        boolean isRestrictedBackupMode, boolean persistent, Configuration config,</span><br><span class="line">        CompatibilityInfo compatInfo, Map services, Bundle coreSettings,</span><br><span class="line">        String buildSerial, boolean autofillCompatibilityEnabled) &#123;</span><br><span class="line"></span><br><span class="line">    if (services != null) &#123;</span><br><span class="line">        if (false) &#123;</span><br><span class="line">            // Test code to make sure the app could see the passed-in services.</span><br><span class="line">            for (Object oname : services.keySet()) &#123;</span><br><span class="line">                if (services.get(oname) == null) &#123;</span><br><span class="line">                    continue; // AM just passed in a null service.</span><br><span class="line">                &#125;</span><br><span class="line">                String name = (String) oname;</span><br><span class="line"></span><br><span class="line">                // See b/79378449 about the following exemption.</span><br><span class="line">                switch (name) &#123;</span><br><span class="line">                    case &quot;package&quot;:</span><br><span class="line">                    case Context.WINDOW_SERVICE:</span><br><span class="line">                        continue;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                if (ServiceManager.getService(name) == null) &#123;</span><br><span class="line">                    Log.wtf(TAG, &quot;Service &quot; + name + &quot; should be accessible by this app&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Setup the service cache in the ServiceManager</span><br><span class="line">        ServiceManager.initServiceCache(services);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setCoreSettings(coreSettings);</span><br><span class="line"></span><br><span class="line">    AppBindData data = new AppBindData();</span><br><span class="line">    data.processName = processName;</span><br><span class="line">    data.appInfo = appInfo;</span><br><span class="line">    data.providers = providers;</span><br><span class="line">    data.instrumentationName = instrumentationName;</span><br><span class="line">    data.instrumentationArgs = instrumentationArgs;</span><br><span class="line">    data.instrumentationWatcher = instrumentationWatcher;</span><br><span class="line">    data.instrumentationUiAutomationConnection = instrumentationUiConnection;</span><br><span class="line">    data.debugMode = debugMode;</span><br><span class="line">    data.enableBinderTracking = enableBinderTracking;</span><br><span class="line">    data.trackAllocation = trackAllocation;</span><br><span class="line">    data.restrictedBackupMode = isRestrictedBackupMode;</span><br><span class="line">    data.persistent = persistent;</span><br><span class="line">    data.config = config;</span><br><span class="line">    data.compatInfo = compatInfo;</span><br><span class="line">    data.initProfilerInfo = profilerInfo;</span><br><span class="line">    data.buildSerial = buildSerial;</span><br><span class="line">    data.autofillCompatibilityEnabled = autofillCompatibilityEnabled;</span><br><span class="line">    sendMessage(H.BIND_APPLICATION, data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //这里触发Activity的生命周期</span><br><span class="line">    public void scheduleTransaction(ClientTransaction transaction) throws RemoteException &#123;</span><br><span class="line">        ActivityThread.this.scheduleTransaction(transaction);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">message是如何处理的？</span><br><span class="line">public void handleMessage(Message msg) &#123;</span><br><span class="line">    if (DEBUG_MESSAGES) Slog.v(TAG, &quot;&gt;&gt;&gt; handling: &quot; + codeToString(msg.what));</span><br><span class="line">    switch (msg.what) &#123;</span><br><span class="line">        case BIND_APPLICATION:</span><br><span class="line">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;bindApplication&quot;);</span><br><span class="line">            AppBindData data = (AppBindData)msg.obj;</span><br><span class="line">            handleBindApplication(data);</span><br><span class="line">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">通过handleBindApplication创建Application</span><br><span class="line">private void handleBindApplication(AppBindData data) &#123;</span><br><span class="line">    //创建上下文</span><br><span class="line">    final ContextImpl appContext = ContextImpl.createAppContext(this, data.info);</span><br><span class="line">    。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</span><br><span class="line">    // If the app is being launched for full backup or restore, bring it up in</span><br><span class="line">    // a restricted environment with the base application class.</span><br><span class="line">    //创建一个Application</span><br><span class="line">    app = data.info.makeApplication(data.restrictedBackupMode, null);</span><br><span class="line">    //再执行Application的onCreate方法</span><br><span class="line">    mInstrumentation.onCreate(data.instrumentationArgs);</span><br><span class="line">    mInstrumentation.callApplicationOnCreate(app);</span><br><span class="line">    // Preload fonts resources,开始预加载信息，这里执行完之后，会执行</span><br><span class="line">    FontsContract.setApplicationContextForResources(appContext);</span><br><span class="line">    if (!Process.isIsolated()) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            final ApplicationInfo info =</span><br><span class="line">                    getPackageManager().getApplicationInfo(</span><br><span class="line">                            data.appInfo.packageName,</span><br><span class="line">                            PackageManager.GET_META_DATA /*flags*/,</span><br><span class="line">                            UserHandle.myUserId());</span><br><span class="line">            if (info.metaData != null) &#123;</span><br><span class="line">                final int preloadedFontsResource = info.metaData.getInt(</span><br><span class="line">                        ApplicationInfo.METADATA_PRELOADED_FONTS, 0);</span><br><span class="line">                if (preloadedFontsResource != 0) &#123;</span><br><span class="line">                    data.info.getResources().preloadFonts(preloadedFontsResource);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (RemoteException e) &#123;</span><br><span class="line">            throw e.rethrowFromSystemServer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//进入Activity生命周期</span><br><span class="line">public Activity handleLaunchActivity(ActivityClientRecord r,</span><br><span class="line">            PendingTransactionActions pendingActions, Intent customIntent) &#123;</span><br><span class="line">    WindowManagerGlobal.initialize();//初始化，通过单例，获取WMS</span><br><span class="line">    final Activity a = performLaunchActivity(r, customIntent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) &#123;</span><br><span class="line">    ActivityInfo aInfo = r.activityInfo;</span><br><span class="line">    if (r.packageInfo == null) &#123;</span><br><span class="line">        r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo,</span><br><span class="line">                Context.CONTEXT_INCLUDE_CODE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ComponentName component = r.intent.getComponent();</span><br><span class="line">    if (component == null) &#123;</span><br><span class="line">        component = r.intent.resolveActivity(</span><br><span class="line">            mInitialApplication.getPackageManager());</span><br><span class="line">        r.intent.setComponent(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (r.activityInfo.targetActivity != null) &#123;</span><br><span class="line">        component = new ComponentName(r.activityInfo.packageName,</span><br><span class="line">                r.activityInfo.targetActivity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ContextImpl appContext = createBaseContextForActivity(r);</span><br><span class="line">    Activity activity = null;</span><br><span class="line">    try &#123;</span><br><span class="line">        //类加载器</span><br><span class="line">        java.lang.ClassLoader cl = appContext.getClassLoader();</span><br><span class="line">        //创建一个Activity，通过反射</span><br><span class="line">        activity = mInstrumentation.newActivity(</span><br><span class="line">                cl, component.getClassName(), r.intent);</span><br><span class="line">        StrictMode.incrementExpectedActivityCount(activity.getClass());</span><br><span class="line">        r.intent.setExtrasClassLoader(cl);</span><br><span class="line">        r.intent.prepareToEnterProcess();</span><br><span class="line">        if (r.state != null) &#123;</span><br><span class="line">            r.state.setClassLoader(cl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        if (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                &quot;Unable to instantiate activity &quot; + component</span><br><span class="line">                + &quot;: &quot; + e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        Application app = r.packageInfo.makeApplication(false, mInstrumentation);</span><br><span class="line"></span><br><span class="line">        if (localLOGV) Slog.v(TAG, &quot;Performing launch of &quot; + r);</span><br><span class="line">        if (localLOGV) Slog.v(</span><br><span class="line">                TAG, r + &quot;: app=&quot; + app</span><br><span class="line">                + &quot;, appName=&quot; + app.getPackageName()</span><br><span class="line">                + &quot;, pkg=&quot; + r.packageInfo.getPackageName()</span><br><span class="line">                + &quot;, comp=&quot; + r.intent.getComponent().toShortString()</span><br><span class="line">                + &quot;, dir=&quot; + r.packageInfo.getAppDir());</span><br><span class="line"></span><br><span class="line">        if (activity != null) &#123;</span><br><span class="line">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</span><br><span class="line">            Configuration config = new Configuration(mCompatConfiguration);</span><br><span class="line">            if (r.overrideConfig != null) &#123;</span><br><span class="line">                config.updateFrom(r.overrideConfig);</span><br><span class="line">            &#125;</span><br><span class="line">            if (DEBUG_CONFIGURATION) Slog.v(TAG, &quot;Launching activity &quot;</span><br><span class="line">                    + r.activityInfo.name + &quot; with config &quot; + config);</span><br><span class="line">            Window window = null;</span><br><span class="line">            if (r.mPendingRemoveWindow != null &amp;&amp; r.mPreserveWindow) &#123;</span><br><span class="line">                window = r.mPendingRemoveWindow;</span><br><span class="line">                r.mPendingRemoveWindow = null;</span><br><span class="line">                r.mPendingRemoveWindowManager = null;</span><br><span class="line">            &#125;</span><br><span class="line">            appContext.setOuterContext(activity);</span><br><span class="line">            //首先attach，再这个方法中创建PhoneWindow，并绑定对应WindowManager</span><br><span class="line">            activity.attach(appContext, this, getInstrumentation(), r.token,</span><br><span class="line">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</span><br><span class="line">                    r.embeddedID, r.lastNonConfigurationInstances, config,</span><br><span class="line">                    r.referrer, r.voiceInteractor, window, r.configCallback);</span><br><span class="line"></span><br><span class="line">            if (customIntent != null) &#123;</span><br><span class="line">                activity.mIntent = customIntent;</span><br><span class="line">            &#125;</span><br><span class="line">            r.lastNonConfigurationInstances = null;</span><br><span class="line">            checkAndBlockForNetworkAccess();</span><br><span class="line">            activity.mStartedActivity = false;</span><br><span class="line">            int theme = r.activityInfo.getThemeResource();</span><br><span class="line">            if (theme != 0) &#123;</span><br><span class="line">                activity.setTheme(theme);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            activity.mCalled = false;</span><br><span class="line">            //进入到Activity的onCreate方法</span><br><span class="line">            if (r.isPersistable()) &#123;</span><br><span class="line">                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                mInstrumentation.callActivityOnCreate(activity, r.state);</span><br><span class="line">            &#125;</span><br><span class="line">            if (!activity.mCalled) &#123;</span><br><span class="line">                throw new SuperNotCalledException(</span><br><span class="line">                    &quot;Activity &quot; + r.intent.getComponent().toShortString() +</span><br><span class="line">                    &quot; did not call through to super.onCreate()&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            r.activity = activity;</span><br><span class="line">        &#125;</span><br><span class="line">        r.setState(ON_CREATE);</span><br><span class="line"></span><br><span class="line">        mActivities.put(r.token, r);</span><br><span class="line"></span><br><span class="line">    &#125; catch (SuperNotCalledException e) &#123;</span><br><span class="line">        throw e;</span><br><span class="line"></span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        if (!mInstrumentation.onException(activity, e)) &#123;</span><br><span class="line">            throw new RuntimeException(</span><br><span class="line">                &quot;Unable to start activity &quot; + component</span><br><span class="line">                + &quot;: &quot; + e.toString(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return activity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Activity-attach"><a href="#Activity-attach" class="headerlink" title="Activity.attach"></a>Activity.attach</h3><p>进入Activity.java的attach方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">final void attach(Context context, ActivityThread aThread,</span><br><span class="line">        Instrumentation instr, IBinder token, int ident,</span><br><span class="line">        Application application, Intent intent, ActivityInfo info,</span><br><span class="line">        CharSequence title, Activity parent, String id,</span><br><span class="line">        NonConfigurationInstances lastNonConfigurationInstances,</span><br><span class="line">        Configuration config, String referrer, IVoiceInteractor voiceInteractor,</span><br><span class="line">        Window window, ActivityConfigCallback activityConfigCallback) &#123;</span><br><span class="line">    attachBaseContext(context);</span><br><span class="line"></span><br><span class="line">    mFragments.attachHost(null /*parent*/);</span><br><span class="line">    //创建PhoneWindow</span><br><span class="line">    mWindow = new PhoneWindow(this, window, activityConfigCallback);</span><br><span class="line">    mWindow.setWindowControllerCallback(this);</span><br><span class="line">    mWindow.setCallback(this);</span><br><span class="line">    mWindow.setOnWindowDismissedCallback(this);</span><br><span class="line">    mWindow.getLayoutInflater().setPrivateFactory(this);</span><br><span class="line">    if (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) &#123;</span><br><span class="line">        mWindow.setSoftInputMode(info.softInputMode);</span><br><span class="line">    &#125;</span><br><span class="line">    if (info.uiOptions != 0) &#123;</span><br><span class="line">        mWindow.setUiOptions(info.uiOptions);</span><br><span class="line">    &#125;</span><br><span class="line">    mUiThread = Thread.currentThread();//创建主线程</span><br><span class="line"></span><br><span class="line">    mMainThread = aThread;</span><br><span class="line">    mInstrumentation = instr;</span><br><span class="line">    mToken = token;</span><br><span class="line">    mIdent = ident;</span><br><span class="line">    mApplication = application;</span><br><span class="line">    mIntent = intent;</span><br><span class="line">    mReferrer = referrer;</span><br><span class="line">    mComponent = intent.getComponent();</span><br><span class="line">    mActivityInfo = info;</span><br><span class="line">    mTitle = title;</span><br><span class="line">    mParent = parent;</span><br><span class="line">    mEmbeddedID = id;</span><br><span class="line">    mLastNonConfigurationInstances = lastNonConfigurationInstances;</span><br><span class="line">    if (voiceInteractor != null) &#123;</span><br><span class="line">        if (lastNonConfigurationInstances != null) &#123;</span><br><span class="line">            mVoiceInteractor = lastNonConfigurationInstances.voiceInteractor;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            mVoiceInteractor = new VoiceInteractor(voiceInteractor, this, this,</span><br><span class="line">                    Looper.myLooper());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //为PhoneWindow设置WindowManager，这个时候我们就有窗口了。</span><br><span class="line">    mWindow.setWindowManager(</span><br><span class="line">            (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</span><br><span class="line">            mToken, mComponent.flattenToString(),</span><br><span class="line">            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);</span><br><span class="line">    if (mParent != null) &#123;</span><br><span class="line">        mWindow.setContainer(mParent.getWindow());</span><br><span class="line">    &#125;</span><br><span class="line">    mWindowManager = mWindow.getWindowManager();</span><br><span class="line"> 。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>所以，再attach里，WMS 登场了。Instrumentation是一个中转，实际上进入的是activity,这个时候菜真正的调用到Activity的onCreate方法。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void callActivityOnCreate(Activity activity, Bundle icicle,</span><br><span class="line">           PersistableBundle persistentState) &#123;</span><br><span class="line">       prePerformCreate(activity);</span><br><span class="line">       activity.performCreate(icicle, persistentState);</span><br><span class="line">       postPerformCreate(activity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Activity-onCreate"><a href="#Activity-onCreate" class="headerlink" title="Activity.onCreate"></a>Activity.onCreate</h3><p>重点setContentView()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void setContentView(@LayoutRes int layoutResID) &#123;</span><br><span class="line">    getWindow().setContentView(layoutResID);</span><br><span class="line">    initWindowDecorActionBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入到PhoneWindow的setContentView</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public void setContentView(int layoutResID) &#123;</span><br><span class="line">    // Note: FEATURE_CONTENT_TRANSITIONS may be set in the process of installing the window</span><br><span class="line">    // decor, when theme attributes and the like are crystalized. Do not check the feature</span><br><span class="line">    // before this happens.</span><br><span class="line">    if (mContentParent == null) &#123;</span><br><span class="line">        installDecor();</span><br><span class="line">    &#125; else if (!hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        mContentParent.removeAllViews();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (hasFeature(FEATURE_CONTENT_TRANSITIONS)) &#123;</span><br><span class="line">        final Scene newScene = Scene.getSceneForLayout(mContentParent, layoutResID,</span><br><span class="line">                getContext());</span><br><span class="line">        transitionTo(newScene);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        //解析xml布局文件，通过反射拿到具体的View，并添加到ContentParent（ViewGroup）里</span><br><span class="line">        mLayoutInflater.inflate(layoutResID, mContentParent);</span><br><span class="line">    &#125;</span><br><span class="line">    mContentParent.requestApplyInsets();</span><br><span class="line">    final Callback cb = getCallback();</span><br><span class="line">    if (cb != null &amp;&amp; !isDestroyed()) &#123;</span><br><span class="line">        cb.onContentChanged();</span><br><span class="line">    &#125;</span><br><span class="line">    mContentParentExplicitlySet = true;</span><br><span class="line">&#125;</span><br><span class="line">//**创建DecorView**</span><br><span class="line">private void installDecor() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Activity是一个具有生命周期活动，界面具体显示的是view，他们之间通过widnow相连。也就是activity通过window去管理viview.</p>
<h3 id="ActivityThread-handleResumeActivity"><a href="#ActivityThread-handleResumeActivity" class="headerlink" title="ActivityThread.handleResumeActivity"></a>ActivityThread.handleResumeActivity</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void handleResumeActivity(IBinder token, boolean finalStateRequest, boolean isForward,</span><br><span class="line">        String reason) &#123;</span><br><span class="line">    //首先执行Activity.onResume</span><br><span class="line">    final ActivityClientRecord r = performResumeActivity(token, finalStateRequest, reason);</span><br><span class="line"></span><br><span class="line">    if (r.window == null &amp;&amp; !a.mFinished &amp;&amp; willBeVisible) &#123;</span><br><span class="line">        r.window = r.activity.getWindow();//拿到Window</span><br><span class="line">        View decor = r.window.getDecorView();//拿到DecorView</span><br><span class="line">        decor.setVisibility(View.INVISIBLE);//设置为不可见</span><br><span class="line">        ViewManager wm = a.getWindowManager();//获取到WMS</span><br><span class="line">        WindowManager.LayoutParams l = r.window.getAttributes();</span><br><span class="line">        a.mDecor = decor;//把decor设置给Activity</span><br><span class="line">        l.type = WindowManager.LayoutParams.TYPE_BASE_APPLICATION;</span><br><span class="line">        l.softInputMode |= forwardBit;</span><br><span class="line">        if (r.mPreserveWindow) &#123;</span><br><span class="line">            a.mWindowAdded = true;</span><br><span class="line">            r.mPreserveWindow = false;</span><br><span class="line">            // Normally the ViewRoot sets up callbacks with the Activity</span><br><span class="line">            // in addView-&gt;ViewRootImpl#setView. If we are instead reusing</span><br><span class="line">            // the decor view we have to notify the view root that the</span><br><span class="line">            // callbacks may have changed.</span><br><span class="line">            ViewRootImpl impl = decor.getViewRootImpl();</span><br><span class="line">            if (impl != null) &#123;</span><br><span class="line">                impl.notifyChildRebuilt();</span><br><span class="line">            &#125;</span><br><span class="line">            if (a.mVisibleFromClient) &#123;</span><br><span class="line">                if (!a.mWindowAdded) &#123;</span><br><span class="line">                    a.mWindowAdded = true;</span><br><span class="line">                    wm.addView(decor, l);//把decorview给wms，wms是再attach中设置的</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    // The activity will get a callback for this &#123;@link LayoutParams&#125; change</span><br><span class="line">                    // earlier. However, at that time the decor will not be set (this is set</span><br><span class="line">                    // in this method), so no action will be taken. This call ensures the</span><br><span class="line">                    // callback occurs with the decor set.</span><br><span class="line">                    a.onWindowAttributesChanged(l);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>走WindowManagerImpl的addview<br>走WindowManagerGlobal的addview</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">public void addView(View view, ViewGroup.LayoutParams params,</span><br><span class="line">            Display display, Window parentWindow) &#123;</span><br><span class="line">    //ViewRootImpl负责与WMS的通信，负责管理surface，负责触发测量与布局，负责</span><br><span class="line">    root = new ViewRootImpl(view.getContext(), display);</span><br><span class="line">    view.setLayoutParams(wparams);</span><br><span class="line">    mViews.add(view);//把decorview添加到mViews里</span><br><span class="line">    mRoots.add(root);//把decorview添加到mRoots里</span><br><span class="line">    mParams.add(wparams);</span><br><span class="line">    try &#123;</span><br><span class="line">        //将作为窗口的控件设置给ViewRootImpl。这个动作将导致ViewRootImpl向WMS添加新的窗口、申请Surface以及托管控件再Surface上的重绘动作。这才是真正意义完成了窗口的添加操作。</span><br><span class="line">        root.setView(view, wparams, panelParentView);</span><br><span class="line">    &#125; catch (RuntimeException e) &#123;</span><br><span class="line">        // BadTokenException or InvalidDisplayException, clean up.</span><br><span class="line">        if (index &gt;= 0) &#123;</span><br><span class="line">            removeViewLocked(index, true);</span><br><span class="line">        &#125;</span><br><span class="line">        throw e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//mWindowSession是一个binder，完成这个操作后，mWindow已经被添加到指定的Display中，但是这个窗口还没有relayout，因此，它还没有有效的Surface可以进行绘制。</span><br><span class="line">public void setView(View view, WindowManager.LayoutParams attrs, View panelParentView) &#123;</span><br><span class="line">      res = mWindowSession.addToDisplay(mWindow, mSeq, mWindowAttributes,</span><br><span class="line">                            getHostVisibility(), mDisplay.getDisplayId(), mWinFrame,</span><br><span class="line">                            mAttachInfo.mContentInsets, mAttachInfo.mStableInsets,</span><br><span class="line">                            mAttachInfo.mOutsets, mAttachInfo.mDisplayCutout, mInputChannel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//WindowSession就是WMS</span><br><span class="line">public static IWindowSession getWindowSession() &#123;</span><br><span class="line">    synchronized (WindowManagerGlobal.class) &#123;</span><br><span class="line">        if (sWindowSession == null) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                InputMethodManager imm = InputMethodManager.getInstance();</span><br><span class="line">                IWindowManager windowManager = getWindowManagerService();</span><br><span class="line">                sWindowSession = windowManager.openSession(</span><br><span class="line">                        new IWindowSessionCallback.Stub() &#123;</span><br><span class="line">                            @Override</span><br><span class="line">                            public void onAnimatorScaleChanged(float scale) &#123;</span><br><span class="line">                                ValueAnimator.setDurationScale(scale);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        imm.getClient(), imm.getInputContext());</span><br><span class="line">            &#125; catch (RemoteException e) &#123;</span><br><span class="line">                throw e.rethrowFromSystemServer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sWindowSession;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">最终进入WindowManagerImpl的addWindow，最终到底层去渲染。从而Activity显示出来了。</span><br></pre></td></tr></table></figure>

<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="http://nunu03.github.io/2022/06/01/Android-WMS%E5%8E%9F%E7%90%86/wms-a-v-gx.png" alt><br><img src="http://nunu03.github.io/2022/06/01/Android-WMS%E5%8E%9F%E7%90%86/wms-setcontentview.png" alt></p>
<h2 id="invalidate会触发view的重绘吗？"><a href="#invalidate会触发view的重绘吗？" class="headerlink" title="invalidate会触发view的重绘吗？"></a>invalidate会触发view的重绘吗？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">void invalidateInternal(int l, int t, int r, int b, boolean invalidateCache,</span><br><span class="line">            boolean fullInvalidate) &#123;</span><br><span class="line">    if (mGhostView != null) &#123;</span><br><span class="line">        mGhostView.invalidate(true);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (skipInvalidate()) &#123;//设置跳过绘制的标记：处于后台</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if ((mPrivateFlags &amp; (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)) == (PFLAG_DRAWN | PFLAG_HAS_BOUNDS)</span><br><span class="line">            || (invalidateCache &amp;&amp; (mPrivateFlags &amp; PFLAG_DRAWING_CACHE_VALID) == PFLAG_DRAWING_CACHE_VALID)</span><br><span class="line">            || (mPrivateFlags &amp; PFLAG_INVALIDATED) != PFLAG_INVALIDATED</span><br><span class="line">            || (fullInvalidate &amp;&amp; isOpaque() != mLastIsOpaque)) &#123;</span><br><span class="line">        if (fullInvalidate) &#123;//默认true</span><br><span class="line">            mLastIsOpaque = isOpaque();</span><br><span class="line">            mPrivateFlags &amp;= ~PFLAG_DRAWN;//清除绘制标记</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mPrivateFlags |= PFLAG_DIRTY;//需要绘制</span><br><span class="line"></span><br><span class="line">        if (invalidateCache) &#123;</span><br><span class="line">            mPrivateFlags |= PFLAG_INVALIDATED;</span><br><span class="line">            mPrivateFlags &amp;= ~PFLAG_DRAWING_CACHE_VALID;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Propagate the damage rectangle to the parent view.</span><br><span class="line">        final AttachInfo ai = mAttachInfo;</span><br><span class="line">        final ViewParent p = mParent;</span><br><span class="line">        if (p != null &amp;&amp; ai != null &amp;&amp; l &lt; r &amp;&amp; t &lt; b) &#123;</span><br><span class="line">            final Rect damage = ai.mTmpInvalRect;//记录需要重绘的标记damage，该区域为view尺寸Rect</span><br><span class="line">            damage.set(l, t, r, b);</span><br><span class="line">            //p为该view的父布局，调用父布局的invalidateChild开始刷新。</span><br><span class="line">            p.invalidateChild(this, damage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Damage the entire projection receiver, if necessary.</span><br><span class="line">        if (mBackground != null &amp;&amp; mBackground.isProjected()) &#123;</span><br><span class="line">            final View receiver = getProjectionReceiver();</span><br><span class="line">            if (receiver != null) &#123;</span><br><span class="line">                receiver.damageInParent();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//进入viewgroup,是一个循环，不断查找父view进行标记和计算刷新区域</span><br><span class="line">public final void invalidateChild(View child, final Rect dirty) &#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        View view = null;</span><br><span class="line">        if (parent instanceof View) &#123;</span><br><span class="line">            view = (View) parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (drawAnimation) &#123;</span><br><span class="line">            if (view != null) &#123;</span><br><span class="line">                view.mPrivateFlags |= PFLAG_DRAW_ANIMATION;</span><br><span class="line">            &#125; else if (parent instanceof ViewRootImpl) &#123;</span><br><span class="line">                ((ViewRootImpl) parent).mIsAnimating = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // If the parent is dirty opaque or not dirty, mark it dirty with the opaque</span><br><span class="line">        // flag coming from the child that initiated the invalidate</span><br><span class="line">        if (view != null) &#123;</span><br><span class="line">            if ((view.mViewFlags &amp; FADING_EDGE_MASK) != 0 &amp;&amp;</span><br><span class="line">                    view.getSolidColor() == 0) &#123;</span><br><span class="line">                opaqueFlag = PFLAG_DIRTY;</span><br><span class="line">            &#125;</span><br><span class="line">            if ((view.mPrivateFlags &amp; PFLAG_DIRTY_MASK) != PFLAG_DIRTY) &#123;</span><br><span class="line">                view.mPrivateFlags = (view.mPrivateFlags &amp; ~PFLAG_DIRTY_MASK) | opaqueFlag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parent = parent.invalidateChildInParent(location, dirty);</span><br><span class="line">        if (view != null) &#123;</span><br><span class="line">            // Account for transform on current parent</span><br><span class="line">            Matrix m = view.getMatrix();</span><br><span class="line">            if (!m.isIdentity()) &#123;</span><br><span class="line">                RectF boundingRect = attachInfo.mTmpTransformRect;</span><br><span class="line">                boundingRect.set(dirty);</span><br><span class="line">                m.mapRect(boundingRect);</span><br><span class="line">                dirty.set((int) Math.floor(boundingRect.left),</span><br><span class="line">                        (int) Math.floor(boundingRect.top),</span><br><span class="line">                        (int) Math.ceil(boundingRect.right),</span><br><span class="line">                        (int) Math.ceil(boundingRect.bottom));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; while (parent != null);</span><br><span class="line">&#125;</span><br><span class="line">// 最终会进入ViewRootImple里：新版本会直接进入ViewRootImple里</span><br><span class="line">@Override</span><br><span class="line">public ViewParent invalidateChildInParent(int[] location, Rect dirty) &#123;</span><br><span class="line">    checkThread();</span><br><span class="line">    if (DEBUG_DRAW) Log.v(mTag, &quot;Invalidate child: &quot; + dirty);</span><br><span class="line"></span><br><span class="line">    if (dirty == null) &#123;</span><br><span class="line">        invalidate();</span><br><span class="line">        return null;</span><br><span class="line">    &#125; else if (dirty.isEmpty() &amp;&amp; !mIsAnimating) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (mCurScrollY != 0 || mTranslator != null) &#123;</span><br><span class="line">        mTempRect.set(dirty);</span><br><span class="line">        dirty = mTempRect;</span><br><span class="line">        if (mCurScrollY != 0) &#123;</span><br><span class="line">            dirty.offset(0, -mCurScrollY);</span><br><span class="line">        &#125;</span><br><span class="line">        if (mTranslator != null) &#123;</span><br><span class="line">            mTranslator.translateRectInAppWindowToScreen(dirty);</span><br><span class="line">        &#125;</span><br><span class="line">        if (mAttachInfo.mScalingRequired) &#123;</span><br><span class="line">            dirty.inset(-1, -1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    invalidateRectOnScreen(dirty);</span><br><span class="line"></span><br><span class="line">    return null;</span><br><span class="line">&#125;</span><br><span class="line">// 最终会计算出来一个区域dirty，这个区域也就是需要刷新的view最终映射到ViewRootImpl根布局上的区域大小。</span><br><span class="line">private void invalidateRectOnScreen(Rect dirty) &#123;</span><br><span class="line">    final Rect localDirty = mDirty;</span><br><span class="line">    if (!localDirty.isEmpty() &amp;&amp; !localDirty.contains(dirty)) &#123;</span><br><span class="line">        mAttachInfo.mSetIgnoreDirtyState = true;</span><br><span class="line">        mAttachInfo.mIgnoreDirtyState = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Add the new dirty rect to the current one</span><br><span class="line">    localDirty.union(dirty.left, dirty.top, dirty.right, dirty.bottom);</span><br><span class="line">    // Intersect with the bounds of the window to skip</span><br><span class="line">    // updates that lie outside of the visible region</span><br><span class="line">    final float appScale = mAttachInfo.mApplicationScale;</span><br><span class="line">    final boolean intersected = localDirty.intersect(0, 0,</span><br><span class="line">            (int) (mWidth * appScale + 0.5f), (int) (mHeight * appScale + 0.5f));</span><br><span class="line">    if (!intersected) &#123;</span><br><span class="line">        localDirty.setEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    if (!mWillDrawSoon &amp;&amp; (intersected || mIsAnimating)) &#123;</span><br><span class="line">        scheduleTraversals();//执行具体的刷新绘制</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 继续执行，最终通过performTraversals触发整个绘制流程</span><br><span class="line">scheduleTraversals-》mTraversalRunnable-》doTraversal()-》performTraversals()</span><br><span class="line">private void performTraversals() &#123;</span><br><span class="line">    // 申请Surface或者重新设置参数-》布局窗口-》实际调用WMS的relayoutWindow</span><br><span class="line">    relayoutResult = relayoutWindow(params, viewVisibility, insetsPending);</span><br><span class="line">    // 度量</span><br><span class="line">    performMeasure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">    // 布局</span><br><span class="line">    performLayout(lp, mWidth, mHeight);</span><br><span class="line">    // 负责整个控件树的绘制</span><br><span class="line">    performDraw();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// performMeasure </span><br><span class="line">private void performMeasure(int childWidthMeasureSpec, int childHeightMeasureSpec) &#123;</span><br><span class="line">    mView.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class="line">&#125;</span><br><span class="line">// 会进入view measure方法</span><br><span class="line">public final void measure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">      onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">&#125;</span><br><span class="line">// 完成度量</span><br><span class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</span><br><span class="line">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class="line">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>所以，刷新一个view，是自下而上的传递invalidate事件，自上而下的进行view的onMeasure、onLayout、onDraw。但会对所有的view都进行绘制吗？不会，因为再刷新的时候会有mPrivateFlags标记和Rect damage区域，这两个属性确定哪些view需要重新绘制.</strong></p>
<p>如下图：<br><img src="http://nunu03.github.io/2022/06/01/Android-WMS%E5%8E%9F%E7%90%86/wms-view-jg.png" alt><br><img src="http://nunu03.github.io/2022/06/01/Android-WMS%E5%8E%9F%E7%90%86/wms-huizhi.png" alt="view绘制流程"></p>
<h2 id="View的绘制过程用的是同一个canvas吗？"><a href="#View的绘制过程用的是同一个canvas吗？" class="headerlink" title="View的绘制过程用的是同一个canvas吗？"></a>View的绘制过程用的是同一个canvas吗？</h2><p>首先我们需要绘制的区域不能超过手机的屏幕，也就是一个画布Canvas。而这个区域是谁给的？window给的。<br>怎么给的，就是通过relayoutWindow-&gt;mWindowSession.relayout-&gt;WMS.relayoutWindow</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">private int relayoutWindow(WindowManager.LayoutParams params, int viewVisibility,</span><br><span class="line">            boolean insetsPending) throws RemoteException &#123;</span><br><span class="line">    int relayoutResult = mWindowSession.relayout(mWindow, mSeq, params,</span><br><span class="line">            (int) (mView.getMeasuredWidth() * appScale + 0.5f),</span><br><span class="line">            (int) (mView.getMeasuredHeight() * appScale + 0.5f), viewVisibility,</span><br><span class="line">            insetsPending ? WindowManagerGlobal.RELAYOUT_INSETS_PENDING : 0, frameNumber,</span><br><span class="line">            mWinFrame, mPendingOverscanInsets, mPendingContentInsets, mPendingVisibleInsets,</span><br><span class="line">            mPendingStableInsets, mPendingOutsets, mPendingBackDropFrame, mPendingDisplayCutout,</span><br><span class="line">            mPendingMergedConfiguration, mSurface);</span><br><span class="line">    return relayoutResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> public int relayoutWindow(Session session, IWindow client, int seq, LayoutParams attrs,</span><br><span class="line">    int requestedWidth, int requestedHeight, int viewVisibility, int flags,</span><br><span class="line">    long frameNumber, Rect outFrame, Rect outOverscanInsets, Rect outContentInsets,</span><br><span class="line">    Rect outVisibleInsets, Rect outStableInsets, Rect outOutsets, Rect outBackdropFrame,</span><br><span class="line">    DisplayCutout.ParcelableWrapper outCutout, MergedConfiguration mergedConfiguration,</span><br><span class="line">    Surface outSurface) &#123;</span><br><span class="line">    //创建win</span><br><span class="line">    WindowState win = windowForClientLocked(session, client, false);</span><br><span class="line">    //经过设置一系列win参数属性</span><br><span class="line">    。。。。。。。。。。。。。。。。。。。。。。。。</span><br><span class="line">    result = win.relayoutVisibleWindow(result, attrChanges, oldVisibility);</span><br><span class="line">    // 创一个createSurfaceControl，并且把outSurface给了win</span><br><span class="line">    result = createSurfaceControl(outSurface, result, win, winAnimator);</span><br><span class="line">&#125;</span><br><span class="line">// 这个Surface就是需要输出给上层的Surface</span><br><span class="line">private int createSurfaceControl(Surface outSurface, int result, WindowState win,</span><br><span class="line">        WindowStateAnimator winAnimator) &#123;</span><br><span class="line">    if (!win.mHasSurface) &#123;</span><br><span class="line">        result |= RELAYOUT_RES_SURFACE_CHANGED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    WindowSurfaceController surfaceController;</span><br><span class="line">    try &#123;</span><br><span class="line">        Trace.traceBegin(TRACE_TAG_WINDOW_MANAGER, &quot;createSurfaceControl&quot;);</span><br><span class="line">        surfaceController = winAnimator.createSurfaceLocked(win.mAttrs.type, win.mOwnerUid);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        Trace.traceEnd(TRACE_TAG_WINDOW_MANAGER);</span><br><span class="line">    &#125;</span><br><span class="line">    if (surfaceController != null) &#123;</span><br><span class="line">        surfaceController.getSurface(outSurface);</span><br><span class="line">        if (SHOW_TRANSACTIONS) Slog.i(TAG_WM, &quot;  OUT SURFACE &quot; + outSurface + &quot;: copied&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // For some reason there isn&apos;t a surface.  Clear the</span><br><span class="line">        // caller&apos;s object so they see the same state.</span><br><span class="line">        Slog.w(TAG_WM, &quot;Failed to create surface control for &quot; + win);</span><br><span class="line">        outSurface.release();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2022/06/01/Android-WMS%E5%8E%9F%E7%90%86/wms-surface.png" alt><br><strong>所以wms是衔接view和surfaceFlinger的工具。</strong><br>所以绘制的区域，都是surface：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">private boolean draw(boolean fullRedrawNeeded) &#123;</span><br><span class="line">    Surface surface = mSurface;</span><br><span class="line">    if (!surface.isValid()) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    final Rect dirty = mDirty;</span><br><span class="line">    if (!drawSoftware(surface, mAttachInfo, xOffset, yOffset,</span><br><span class="line">                    scalingRequired, dirty, surfaceInsets)) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private boolean drawSoftware(Surface surface, AttachInfo attachInfo, int xoff, int yoff,</span><br><span class="line">        boolean scalingRequired, Rect dirty, Rect surfaceInsets) &#123;</span><br><span class="line"></span><br><span class="line">    // Draw with software renderer.</span><br><span class="line">    final Canvas canvas;</span><br><span class="line"></span><br><span class="line">    // We already have the offset of surfaceInsets in xoff, yoff and dirty region,</span><br><span class="line">    // therefore we need to add it back when moving the dirty region.</span><br><span class="line">    int dirtyXOffset = xoff;</span><br><span class="line">    int dirtyYOffset = yoff;</span><br><span class="line">    if (surfaceInsets != null) &#123;</span><br><span class="line">        dirtyXOffset += surfaceInsets.left;</span><br><span class="line">        dirtyYOffset += surfaceInsets.top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        dirty.offset(-dirtyXOffset, -dirtyYOffset);</span><br><span class="line">        final int left = dirty.left;</span><br><span class="line">        final int top = dirty.top;</span><br><span class="line">        final int right = dirty.right;</span><br><span class="line">        final int bottom = dirty.bottom;</span><br><span class="line">        // 通过mSurface.lockCanvas(dirty)获取一个以此Surface为画布的canvas。注意参数是前面计算出来的区域。</span><br><span class="line">        canvas = mSurface.lockCanvas(dirty);</span><br><span class="line"></span><br><span class="line">        // The dirty rectangle can be modified by Surface.lockCanvas()</span><br><span class="line">        //noinspection ConstantConditions</span><br><span class="line">        if (left != dirty.left || top != dirty.top || right != dirty.right</span><br><span class="line">                || bottom != dirty.bottom) &#123;</span><br><span class="line">            attachInfo.mIgnoreDirtyState = true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // TODO: Do this in native</span><br><span class="line">        canvas.setDensity(mDensity);</span><br><span class="line">    &#125; catch (Surface.OutOfResourcesException e) &#123;</span><br><span class="line">        handleOutOfResourcesException(e);</span><br><span class="line">        return false;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        </span><br><span class="line">        try &#123;</span><br><span class="line">            canvas.translate(-xoff, -yoff);</span><br><span class="line">            if (mTranslator != null) &#123;</span><br><span class="line">                mTranslator.translateCanvas(canvas);</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.setScreenDensity(scalingRequired ? mNoncompatDensity : 0);</span><br><span class="line">            attachInfo.mSetIgnoreDirtyState = false;</span><br><span class="line"></span><br><span class="line">            mView.draw(canvas);</span><br><span class="line"></span><br><span class="line">            drawAccessibilityFocusedDrawableIfNeeded(canvas);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (!attachInfo.mSetIgnoreDirtyState) &#123;</span><br><span class="line">                // Only clear the flag if it was not set during the mView.draw() call</span><br><span class="line">                attachInfo.mIgnoreDirtyState = false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>来自享学直播 </p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> WMS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OkHttp总结]]></title>
      <url>/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><img src="http://nunu03.github.io/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/okhttp-jieshao.png" alt></p>
<a id="more"></a>
<h2 id="一次完整的HTTP请求流程"><a href="#一次完整的HTTP请求流程" class="headerlink" title="一次完整的HTTP请求流程"></a>一次完整的HTTP请求流程</h2><p><img src="http://nunu03.github.io/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/okhttp-http.png" alt></p>
<h2 id="请求流程"><a href="#请求流程" class="headerlink" title="请求流程"></a>请求流程</h2><p><img src="http://nunu03.github.io/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/okhttp-lc.png" alt></p>
<h2 id="线程限制"><a href="#线程限制" class="headerlink" title="线程限制"></a>线程限制</h2><p>能否无限制创建线程？虽然没有限制，但是创建每个线程都是需要内存的。jdk在1.5以下，创建一个线程大约需要200k左右；jdk在1.5以上，创建一个线程大约需要1m左右。<br>okhttp的限制呢？<br>同时正在进行的异步请求：默认最大64个；<br>同一域名同时请求存在：默认最大5个；<br>看以下代码图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@get:Synchronized var maxRequests = 64</span><br><span class="line">set(maxRequests) &#123;</span><br><span class="line">    require(maxRequests &gt;= 1) &#123; &quot;max &lt; 1: $maxRequests&quot; &#125;</span><br><span class="line">    synchronized(this) &#123;</span><br><span class="line">    field = maxRequests</span><br><span class="line">    &#125;</span><br><span class="line">    promoteAndExecute()</span><br><span class="line">&#125;</span><br><span class="line">@get:Synchronized var maxRequestsPerHost = 5</span><br><span class="line">set(maxRequestsPerHost) &#123;</span><br><span class="line">    require(maxRequestsPerHost &gt;= 1) &#123; &quot;max &lt; 1: $maxRequestsPerHost&quot; &#125;</span><br><span class="line">    synchronized(this) &#123;</span><br><span class="line">    field = maxRequestsPerHost</span><br><span class="line">    &#125;</span><br><span class="line">    promoteAndExecute()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这个数字是可以改的。</p>
<h2 id="分发器"><a href="#分发器" class="headerlink" title="分发器"></a>分发器</h2><p>线程池：这个地方创建线程池用的是SynchronousQueue：可以自己试一下，普通的线程是不会同时执行的，但是这个SynchronousQueue创建的线程池是可以同时执行多个请求的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">private var executorServiceOrNull: ExecutorService? = null</span><br><span class="line"></span><br><span class="line">@get:Synchronized</span><br><span class="line">@get:JvmName(&quot;executorService&quot;) val executorService: ExecutorService</span><br><span class="line">get() &#123;</span><br><span class="line">    if (executorServiceOrNull == null) &#123;</span><br><span class="line">    executorServiceOrNull = ThreadPoolExecutor(0, Int.MAX_VALUE, 60, TimeUnit.SECONDS,</span><br><span class="line">        SynchronousQueue(), threadFactory(&quot;$okHttpName Dispatcher&quot;, false))</span><br><span class="line">    &#125;</span><br><span class="line">    return executorServiceOrNull!!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>请求队列：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//异步：准备请求的队列</span><br><span class="line">/** Ready async calls in the order they&apos;ll be run. */</span><br><span class="line">private val readyAsyncCalls = ArrayDeque&lt;AsyncCall&gt;()</span><br><span class="line"></span><br><span class="line">//异步：正在请求的队列</span><br><span class="line">/** Running asynchronous calls. Includes canceled calls that haven&apos;t finished yet. */</span><br><span class="line">private val runningAsyncCalls = ArrayDeque&lt;AsyncCall&gt;()</span><br><span class="line"></span><br><span class="line">// 同步：正在请求的队列</span><br><span class="line">/** Running synchronous calls. Includes canceled calls that haven&apos;t finished yet. */</span><br><span class="line">private val runningSyncCalls = ArrayDeque&lt;RealCall&gt;()</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private fun promoteAndExecute(): Boolean &#123;</span><br><span class="line">    this.assertThreadDoesntHoldLock()</span><br><span class="line"></span><br><span class="line">    val executableCalls = mutableListOf&lt;AsyncCall&gt;()</span><br><span class="line">    val isRunning: Boolean</span><br><span class="line">    synchronized(this) &#123;</span><br><span class="line">      val i = readyAsyncCalls.iterator()</span><br><span class="line">      while (i.hasNext()) &#123;</span><br><span class="line">        val asyncCall = i.next()</span><br><span class="line">        // 分发器功能主要在这里：首先判断请求队列大小是否超过最大请求数，再判断统一域名是否超过最大同一域名的请求数量。</span><br><span class="line">        if (runningAsyncCalls.size &gt;= this.maxRequests) break // Max capacity.</span><br><span class="line">        if (asyncCall.callsPerHost.get() &gt;= this.maxRequestsPerHost) continue // Host max capacity.</span><br><span class="line">        // 没有超过，把准备执行队列里的请求移动正在执行的请求队列，同时准备队列里删除。</span><br><span class="line">        i.remove()</span><br><span class="line">        asyncCall.callsPerHost.incrementAndGet()</span><br><span class="line">        executableCalls.add(asyncCall)</span><br><span class="line">        runningAsyncCalls.add(asyncCall)</span><br><span class="line">      &#125;</span><br><span class="line">      isRunning = runningCallsCount() &gt; 0</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 执行run</span><br><span class="line">    for (i in 0 until executableCalls.size) &#123;</span><br><span class="line">      val asyncCall = executableCalls[i]</span><br><span class="line">      asyncCall.executeOn(executorService)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return isRunning</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>run方法中，执行getResponseWithInterceptorChain</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">override fun run() &#123;</span><br><span class="line">      threadName(&quot;OkHttp $&#123;redactedUrl()&#125;&quot;) &#123;</span><br><span class="line">        var signalledCallback = false</span><br><span class="line">        timeout.enter()</span><br><span class="line">        try &#123;</span><br><span class="line">          val response = getResponseWithInterceptorChain()</span><br><span class="line">          signalledCallback = true</span><br><span class="line">          responseCallback.onResponse(this@RealCall, response)</span><br><span class="line">        &#125; catch (e: IOException) &#123;</span><br><span class="line">          if (signalledCallback) &#123;</span><br><span class="line">            // Do not signal the callback twice!</span><br><span class="line">            Platform.get().log(&quot;Callback failure for $&#123;toLoggableString()&#125;&quot;, Platform.INFO, e)</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            responseCallback.onFailure(this@RealCall, e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; catch (t: Throwable) &#123;</span><br><span class="line">          cancel()</span><br><span class="line">          if (!signalledCallback) &#123;</span><br><span class="line">            val canceledException = IOException(&quot;canceled due to $t&quot;)</span><br><span class="line">            canceledException.addSuppressed(t)</span><br><span class="line">            responseCallback.onFailure(this@RealCall, canceledException)</span><br><span class="line">          &#125;</span><br><span class="line">          throw t</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">          client.dispatcher.finished(this)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每执行一个请求，正在请求的队列则-1=63，如果是同一域名的请求也减1=4，同时在ready的队列则释放一个到running队列里。看下图：</p>
<p><img src="http://nunu03.github.io/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/136b551f2762d7b12144a9147994787b.png" alt></p>
<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p><img src="http://nunu03.github.io/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/75af422c6f304d8d9b27bcc29a68855c.png" alt><br><img src="http://nunu03.github.io/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/35f983d3114bede0ba032285c6280042.png" alt></p>
<p>Interceptor拦截器设置的地方：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Throws(IOException::class)</span><br><span class="line">internal fun getResponseWithInterceptorChain(): Response &#123;</span><br><span class="line">    // Build a full stack of interceptors.</span><br><span class="line">    val interceptors = mutableListOf&lt;Interceptor&gt;()</span><br><span class="line">    //自定义应用拦截器位置</span><br><span class="line">    interceptors += client.interceptors</span><br><span class="line">    interceptors += RetryAndFollowUpInterceptor(client)</span><br><span class="line">    interceptors += BridgeInterceptor(client.cookieJar)</span><br><span class="line">    interceptors += CacheInterceptor(client.cache)</span><br><span class="line">    interceptors += ConnectInterceptor</span><br><span class="line">    // 自定义网络拦截器位置</span><br><span class="line">    if (!forWebSocket) &#123;</span><br><span class="line">      interceptors += client.networkInterceptors</span><br><span class="line">    &#125;</span><br><span class="line">    interceptors += CallServerInterceptor(forWebSocket)</span><br><span class="line"></span><br><span class="line">    val chain = RealInterceptorChain(</span><br><span class="line">      call = this,</span><br><span class="line">      interceptors = interceptors,</span><br><span class="line">      index = 0,</span><br><span class="line">      exchange = null,</span><br><span class="line">      request = originalRequest,</span><br><span class="line">      connectTimeoutMillis = client.connectTimeoutMillis,</span><br><span class="line">      readTimeoutMillis = client.readTimeoutMillis,</span><br><span class="line">      writeTimeoutMillis = client.writeTimeoutMillis</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    var calledNoMoreExchanges = false</span><br><span class="line">    try &#123;</span><br><span class="line">      val response = chain.proceed(originalRequest)</span><br><span class="line">      if (isCanceled()) &#123;</span><br><span class="line">        response.closeQuietly()</span><br><span class="line">        throw IOException(&quot;Canceled&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">      return response</span><br><span class="line">    &#125; catch (e: IOException) &#123;</span><br><span class="line">      calledNoMoreExchanges = true</span><br><span class="line">      throw noMoreExchanges(e) as Throwable</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      if (!calledNoMoreExchanges) &#123;</span><br><span class="line">        noMoreExchanges(null)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/okhttp-zerenl.png" alt><br>桥接拦截器的设置代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">class BridgeInterceptor(private val cookieJar: CookieJar) : Interceptor &#123;</span><br><span class="line"></span><br><span class="line">  @Throws(IOException::class)</span><br><span class="line">  override fun intercept(chain: Interceptor.Chain): Response &#123;</span><br><span class="line">    val userRequest = chain.request()</span><br><span class="line">    val requestBuilder = userRequest.newBuilder()</span><br><span class="line"></span><br><span class="line">    val body = userRequest.body</span><br><span class="line">    if (body != null) &#123;</span><br><span class="line">      val contentType = body.contentType()</span><br><span class="line">      if (contentType != null) &#123;</span><br><span class="line">        requestBuilder.header(&quot;Content-Type&quot;, contentType.toString())</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      val contentLength = body.contentLength()</span><br><span class="line">      if (contentLength != -1L) &#123;</span><br><span class="line">        requestBuilder.header(&quot;Content-Length&quot;, contentLength.toString())</span><br><span class="line">        requestBuilder.removeHeader(&quot;Transfer-Encoding&quot;)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        requestBuilder.header(&quot;Transfer-Encoding&quot;, &quot;chunked&quot;)</span><br><span class="line">        requestBuilder.removeHeader(&quot;Content-Length&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (userRequest.header(&quot;Host&quot;) == null) &#123;</span><br><span class="line">      requestBuilder.header(&quot;Host&quot;, userRequest.url.toHostHeader())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (userRequest.header(&quot;Connection&quot;) == null) &#123;</span><br><span class="line">      requestBuilder.header(&quot;Connection&quot;, &quot;Keep-Alive&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // If we add an &quot;Accept-Encoding: gzip&quot; header field we&apos;re responsible for also decompressing</span><br><span class="line">    // the transfer stream.</span><br><span class="line">    var transparentGzip = false</span><br><span class="line">    if (userRequest.header(&quot;Accept-Encoding&quot;) == null &amp;&amp; userRequest.header(&quot;Range&quot;) == null) &#123;</span><br><span class="line">      transparentGzip = true</span><br><span class="line">      requestBuilder.header(&quot;Accept-Encoding&quot;, &quot;gzip&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val cookies = cookieJar.loadForRequest(userRequest.url)</span><br><span class="line">    if (cookies.isNotEmpty()) &#123;</span><br><span class="line">      requestBuilder.header(&quot;Cookie&quot;, cookieHeader(cookies))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (userRequest.header(&quot;User-Agent&quot;) == null) &#123;</span><br><span class="line">      requestBuilder.header(&quot;User-Agent&quot;, userAgent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val networkRequest = requestBuilder.build()</span><br><span class="line">    val networkResponse = chain.proceed(networkRequest)</span><br><span class="line"></span><br><span class="line">    cookieJar.receiveHeaders(networkRequest.url, networkResponse.headers)</span><br><span class="line"></span><br><span class="line">    val responseBuilder = networkResponse.newBuilder()</span><br><span class="line">        .request(networkRequest)</span><br><span class="line"></span><br><span class="line">    if (transparentGzip &amp;&amp;</span><br><span class="line">        &quot;gzip&quot;.equals(networkResponse.header(&quot;Content-Encoding&quot;), ignoreCase = true) &amp;&amp;</span><br><span class="line">        networkResponse.promisesBody()) &#123;</span><br><span class="line">      val responseBody = networkResponse.body</span><br><span class="line">      if (responseBody != null) &#123;</span><br><span class="line">        val gzipSource = GzipSource(responseBody.source())</span><br><span class="line">        val strippedHeaders = networkResponse.headers.newBuilder()</span><br><span class="line">            .removeAll(&quot;Content-Encoding&quot;)</span><br><span class="line">            .removeAll(&quot;Content-Length&quot;)</span><br><span class="line">            .build()</span><br><span class="line">        responseBuilder.headers(strippedHeaders)</span><br><span class="line">        val contentType = networkResponse.header(&quot;Content-Type&quot;)</span><br><span class="line">        responseBuilder.body(RealResponseBody(contentType, -1L, gzipSource.buffer()))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return responseBuilder.build()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/c0e233ce4e0756a352282c27063e8ce2.png" alt><br><img src="http://nunu03.github.io/2022/05/31/OkHttp%E6%80%BB%E7%BB%93/d177c850ea0bcf7069e89ced97702fcd.png" alt></p>
<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><p><a href="https://github.com/square/OkHttp" target="_blank" rel="noopener">OkHttp</a><br>来自享学直播</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OkHttp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit架构解析]]></title>
      <url>/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="Retrofit-是什么"><a href="#Retrofit-是什么" class="headerlink" title="Retrofit 是什么?"></a>Retrofit 是什么?</h2><p><a href="https://square.github.io/retrofit/" target="_blank" rel="noopener">Retrofit</a>是Square公司开发的一款针对Android网络请求的框架，Retrofit2底层基于OkHttp实现的.<br><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/retrofit-what.png" alt></p>
<a id="more"></a>
<p> <img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/4de77ad35503abbd00c13c147323ca21.png" alt></p>
<h2 id="Retrofit-设计的任务"><a href="#Retrofit-设计的任务" class="headerlink" title="Retrofit 设计的任务"></a>Retrofit 设计的任务</h2><p> <img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/retrofit-task.png" alt></p>
<h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public Retrofit build() &#123;</span><br><span class="line">    //默认支持okhttp3请求</span><br><span class="line">    Platform platform = Platform.get();</span><br><span class="line"></span><br><span class="line">    okhttp3.Call.Factory callFactory = this.callFactory;</span><br><span class="line">    if (callFactory == null) &#123;</span><br><span class="line">    callFactory = new OkHttpClient();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //添加一个线程管理Executor，okhttp切换线程需要手动操作，但是retrofit不需要，就是因为这个Executor的存在，其实他就是一个handler。</span><br><span class="line">    Executor callbackExecutor = this.callbackExecutor;</span><br><span class="line">    if (callbackExecutor == null) &#123;</span><br><span class="line">    callbackExecutor = platform.defaultCallbackExecutor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Make a defensive copy of the adapters and add the default Call adapter.</span><br><span class="line">    List&lt;CallAdapter.Factory&gt; callAdapterFactories = new ArrayList&lt;&gt;(this.callAdapterFactories);</span><br><span class="line">    List&lt;? extends CallAdapter.Factory&gt; defaultCallAdapterFactories =</span><br><span class="line">        platform.createDefaultCallAdapterFactories(callbackExecutor);</span><br><span class="line">    callAdapterFactories.addAll(defaultCallAdapterFactories);</span><br><span class="line"></span><br><span class="line">    // Make a defensive copy of the converters.</span><br><span class="line">    List&lt;? extends Converter.Factory&gt; defaultConverterFactories =</span><br><span class="line">        platform.createDefaultConverterFactories();</span><br><span class="line">    int defaultConverterFactoriesSize = defaultConverterFactories.size();</span><br><span class="line">    List&lt;Converter.Factory&gt; converterFactories =</span><br><span class="line">        new ArrayList&lt;&gt;(1 + this.converterFactories.size() + defaultConverterFactoriesSize);</span><br><span class="line"></span><br><span class="line">    // Add the built-in converter factory first. This prevents overriding its behavior but also</span><br><span class="line">    // ensures correct behavior when using converters that consume all types.</span><br><span class="line">    converterFactories.add(new BuiltInConverters());</span><br><span class="line">    converterFactories.addAll(this.converterFactories);</span><br><span class="line">    converterFactories.addAll(defaultConverterFactories);</span><br><span class="line"></span><br><span class="line">    return new Retrofit(</span><br><span class="line">        callFactory,</span><br><span class="line">        baseUrl,</span><br><span class="line">        unmodifiableList(converterFactories),</span><br><span class="line">        defaultConverterFactoriesSize,</span><br><span class="line">        unmodifiableList(callAdapterFactories),</span><br><span class="line">        defaultCallAdapterFactories.size(),</span><br><span class="line">        callbackExecutor,</span><br><span class="line">        validateEagerly);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><p>所有请求都会通过这里，通过动态代理封装retrofit接口为ServiceMethod，这里动态代理目的就是实现了AOP思想。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"> @SuppressWarnings(&quot;unchecked&quot;) // Single-interface proxy creation guarded by parameter safety.</span><br><span class="line">  public &lt;T&gt; T create(final Class&lt;T&gt; service) &#123;</span><br><span class="line">    validateServiceInterface(service);</span><br><span class="line">    return (T)</span><br><span class="line">        Proxy.newProxyInstance(</span><br><span class="line">            service.getClassLoader(),</span><br><span class="line">            new Class&lt;?&gt;[] &#123;service&#125;,</span><br><span class="line">            new InvocationHandler() &#123;</span><br><span class="line">              private final Object[] emptyArgs = new Object[0];</span><br><span class="line"></span><br><span class="line">              @Override</span><br><span class="line">              public @Nullable Object invoke(Object proxy, Method method, @Nullable Object[] args)</span><br><span class="line">                  throws Throwable &#123;</span><br><span class="line">                // If the method is a method from Object then defer to normal invocation.</span><br><span class="line">                //说明方法的过滤，会过滤掉默认的不需要的管理的方法。</span><br><span class="line">                if (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">                  return method.invoke(this, args);</span><br><span class="line">                &#125;</span><br><span class="line">                args = args != null ? args : emptyArgs;</span><br><span class="line">                Platform platform = Platform.get();</span><br><span class="line">                //默认情况下，java的接口是不能够有默认实现的，但是java8可以默认实现，所以要排除</span><br><span class="line">                //invoke 执行的是ServiceMethod的invoke</span><br><span class="line">                return platform.isDefaultMethod(method)</span><br><span class="line">                    ? platform.invokeDefaultMethod(method, service, proxy, args)</span><br><span class="line">                    : loadServiceMethod(method).invoke(args);</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">   //ServiceMethod,把所有请求参数封装到一个ServiceMethod里，采用反射获取接口中设置的参数信息，性能低？用到了缓存啊，把ServiceMethod缓存到一个map里</span><br><span class="line">   ServiceMethod&lt;?&gt; loadServiceMethod(Method method) &#123;</span><br><span class="line">    ServiceMethod&lt;?&gt; result = serviceMethodCache.get(method);</span><br><span class="line">    if (result != null) return result;</span><br><span class="line"></span><br><span class="line">    synchronized (serviceMethodCache) &#123;</span><br><span class="line">      result = serviceMethodCache.get(method);</span><br><span class="line">      if (result == null) &#123;</span><br><span class="line">        result = ServiceMethod.parseAnnotations(this, method);</span><br><span class="line">        serviceMethodCache.put(method, result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">  &#125;</span><br><span class="line">// 这里执行invoke的时候，创建了OkHttpCall，</span><br><span class="line">final @Nullable ReturnT invoke(Object[] args) &#123;</span><br><span class="line">    Call&lt;ResponseT&gt; call = new OkHttpCall&lt;&gt;(requestFactory, args, callFactory, responseConverter);</span><br><span class="line">    return adapt(call, args);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/3f88aeb47d686803669d2f6f49aeffc8.png" alt></p>
<h2 id="请求示例"><a href="#请求示例" class="headerlink" title="请求示例"></a>请求示例</h2><p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/dc5d144c8361d27781f2e68e8153a0af.png" alt></p>
<p>那Retrofit可以用单例吗？可以啊，如果接口请求频繁，可以用，如果点击一次，请求一次，就可以用构造者模式。同时接口越多，缓存的也越多。</p>
<h2 id="接口请求时如何解析的？"><a href="#接口请求时如何解析的？" class="headerlink" title="接口请求时如何解析的？"></a>接口请求时如何解析的？</h2><p>ServiceMethod，封装成一个OKhttp请求的Call使用，并返回一个Call。Okhttpcall就是衔接sm和okhttp的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">static &lt;ResponseT, ReturnT&gt; HttpServiceMethod&lt;ResponseT, ReturnT&gt; parseAnnotations(</span><br><span class="line">      Retrofit retrofit, Method method, RequestFactory requestFactory) &#123;</span><br><span class="line">    boolean isKotlinSuspendFunction = requestFactory.isKotlinSuspendFunction;</span><br><span class="line">    boolean continuationWantsResponse = false;</span><br><span class="line">    boolean continuationBodyNullable = false;</span><br><span class="line">    boolean continuationIsUnit = false;</span><br><span class="line"></span><br><span class="line">    Annotation[] annotations = method.getAnnotations();</span><br><span class="line">    Type adapterType;</span><br><span class="line">    if (isKotlinSuspendFunction) &#123;</span><br><span class="line">      Type[] parameterTypes = method.getGenericParameterTypes();</span><br><span class="line">      Type responseType =</span><br><span class="line">          Utils.getParameterLowerBound(</span><br><span class="line">              0, (ParameterizedType) parameterTypes[parameterTypes.length - 1]);</span><br><span class="line">      if (getRawType(responseType) == Response.class &amp;&amp; responseType instanceof ParameterizedType) &#123;</span><br><span class="line">        // Unwrap the actual body type from Response&lt;T&gt;.</span><br><span class="line">        responseType = Utils.getParameterUpperBound(0, (ParameterizedType) responseType);</span><br><span class="line">        continuationWantsResponse = true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        continuationIsUnit = Utils.isUnit(responseType);</span><br><span class="line">        // TODO figure out if type is nullable or not</span><br><span class="line">        // Metadata metadata = method.getDeclaringClass().getAnnotation(Metadata.class)</span><br><span class="line">        // Find the entry for method</span><br><span class="line">        // Determine if return type is nullable or not</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      adapterType = new Utils.ParameterizedTypeImpl(null, Call.class, responseType);</span><br><span class="line">      annotations = SkipCallbackExecutorImpl.ensurePresent(annotations);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      adapterType = method.getGenericReturnType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CallAdapter&lt;ResponseT, ReturnT&gt; callAdapter =</span><br><span class="line">        createCallAdapter(retrofit, method, adapterType, annotations);</span><br><span class="line">    Type responseType = callAdapter.responseType();</span><br><span class="line">    if (responseType == okhttp3.Response.class) &#123;</span><br><span class="line">      throw methodError(</span><br><span class="line">          method,</span><br><span class="line">          &quot;&apos;&quot;</span><br><span class="line">              + getRawType(responseType).getName()</span><br><span class="line">              + &quot;&apos; is not a valid response body type. Did you mean ResponseBody?&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if (responseType == Response.class) &#123;</span><br><span class="line">      throw methodError(method, &quot;Response must include generic type (e.g., Response&lt;String&gt;)&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    // TODO support Unit for Kotlin?</span><br><span class="line">    if (requestFactory.httpMethod.equals(&quot;HEAD&quot;)</span><br><span class="line">        &amp;&amp; !Void.class.equals(responseType)</span><br><span class="line">        &amp;&amp; !Utils.isUnit(responseType)) &#123;</span><br><span class="line">      throw methodError(method, &quot;HEAD method must use Void or Unit as response type.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Converter&lt;ResponseBody, ResponseT&gt; responseConverter =</span><br><span class="line">        createResponseConverter(retrofit, method, responseType);</span><br><span class="line"></span><br><span class="line">    okhttp3.Call.Factory callFactory = retrofit.callFactory;</span><br><span class="line">    if (!isKotlinSuspendFunction) &#123;</span><br><span class="line">      return new CallAdapted&lt;&gt;(requestFactory, callFactory, responseConverter, callAdapter);</span><br><span class="line">    &#125; else if (continuationWantsResponse) &#123;</span><br><span class="line">      //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.</span><br><span class="line">      return (HttpServiceMethod&lt;ResponseT, ReturnT&gt;)</span><br><span class="line">          new SuspendForResponse&lt;&gt;(</span><br><span class="line">              requestFactory,</span><br><span class="line">              callFactory,</span><br><span class="line">              responseConverter,</span><br><span class="line">              (CallAdapter&lt;ResponseT, Call&lt;ResponseT&gt;&gt;) callAdapter);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      //noinspection unchecked Kotlin compiler guarantees ReturnT to be Object.</span><br><span class="line">      return (HttpServiceMethod&lt;ResponseT, ReturnT&gt;)</span><br><span class="line">          new SuspendForBody&lt;&gt;(</span><br><span class="line">              requestFactory,</span><br><span class="line">              callFactory,</span><br><span class="line">              responseConverter,</span><br><span class="line">              (CallAdapter&lt;ResponseT, Call&lt;ResponseT&gt;&gt;) callAdapter,</span><br><span class="line">              continuationBodyNullable,</span><br><span class="line">              continuationIsUnit);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="执行请求"><a href="#执行请求" class="headerlink" title="执行请求"></a>执行请求</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">return new CallAdapter&lt;Object, Call&lt;?&gt;&gt;() &#123;</span><br><span class="line">      @Override</span><br><span class="line">      public Type responseType() &#123;</span><br><span class="line">        return responseType;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      @Override</span><br><span class="line">      public Call&lt;Object&gt; adapt(Call&lt;Object&gt; call) &#123;</span><br><span class="line">        return executor == null ? call : new ExecutorCallbackCall&lt;&gt;(executor, call);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">// 动态代理返回的InvocationHandler，就是这个ExecutorCallbackCall</span><br><span class="line">  static final class ExecutorCallbackCall&lt;T&gt; implements Call&lt;T&gt; &#123;</span><br><span class="line">    final Executor callbackExecutor;</span><br><span class="line">    final Call&lt;T&gt; delegate;</span><br><span class="line"></span><br><span class="line">    ExecutorCallbackCall(Executor callbackExecutor, Call&lt;T&gt; delegate) &#123;</span><br><span class="line">      this.callbackExecutor = callbackExecutor;</span><br><span class="line">      this.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void enqueue(final Callback&lt;T&gt; callback) &#123;</span><br><span class="line">      Objects.requireNonNull(callback, &quot;callback == null&quot;);</span><br><span class="line">        //delegate就是OkHttpCall</span><br><span class="line">      delegate.enqueue(</span><br><span class="line">          new Callback&lt;T&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(Call&lt;T&gt; call, final Response&lt;T&gt; response) &#123;</span><br><span class="line">              callbackExecutor.execute(</span><br><span class="line">                  () -&gt; &#123;</span><br><span class="line">                    if (delegate.isCanceled()) &#123;</span><br><span class="line">                      // Emulate OkHttp&apos;s behavior of throwing/delivering an IOException on</span><br><span class="line">                      // cancellation.</span><br><span class="line">                      callback.onFailure(ExecutorCallbackCall.this, new IOException(&quot;Canceled&quot;));</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                      callback.onResponse(ExecutorCallbackCall.this, response);</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Call&lt;T&gt; call, final Throwable t) &#123;</span><br><span class="line">              callbackExecutor.execute(() -&gt; callback.onFailure(ExecutorCallbackCall.this, t));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Moshi替换gson解析数据：</p>
<p>ExecutorCallbackCall是对okhttpcall的封装，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">  public void enqueue(final Callback&lt;T&gt; callback) &#123;</span><br><span class="line">    Objects.requireNonNull(callback, &quot;callback == null&quot;);</span><br><span class="line"></span><br><span class="line">    okhttp3.Call call;</span><br><span class="line">    Throwable failure;</span><br><span class="line"></span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">      if (executed) throw new IllegalStateException(&quot;Already executed.&quot;);</span><br><span class="line">      executed = true;</span><br><span class="line"></span><br><span class="line">      call = rawCall;</span><br><span class="line">      failure = creationFailure;</span><br><span class="line">      if (call == null &amp;&amp; failure == null) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          call = rawCall = createRawCall();</span><br><span class="line">        &#125; catch (Throwable t) &#123;</span><br><span class="line">          throwIfFatal(t);</span><br><span class="line">          failure = creationFailure = t;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (failure != null) &#123;</span><br><span class="line">      callback.onFailure(this, failure);</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (canceled) &#123;</span><br><span class="line">      call.cancel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    call.enqueue(</span><br><span class="line">        new okhttp3.Callback() &#123;</span><br><span class="line">          @Override</span><br><span class="line">          public void onResponse(okhttp3.Call call, okhttp3.Response rawResponse) &#123;</span><br><span class="line">            Response&lt;T&gt; response;</span><br><span class="line">            try &#123;</span><br><span class="line">              response = parseResponse(rawResponse);</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">              throwIfFatal(e);</span><br><span class="line">              callFailure(e);</span><br><span class="line">              return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">              callback.onResponse(OkHttpCall.this, response);</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">              throwIfFatal(t);</span><br><span class="line">              t.printStackTrace(); // TODO this is not great</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          @Override</span><br><span class="line">          public void onFailure(okhttp3.Call call, IOException e) &#123;</span><br><span class="line">            callFailure(e);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          private void callFailure(Throwable e) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">              callback.onFailure(OkHttpCall.this, e);</span><br><span class="line">            &#125; catch (Throwable t) &#123;</span><br><span class="line">              throwIfFatal(t);</span><br><span class="line">              t.printStackTrace(); // TODO this is not great</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">//requestFactory.create(args) 请求参数</span><br><span class="line">  private okhttp3.Call createRawCall() throws IOException &#123;</span><br><span class="line">    okhttp3.Call call = callFactory.newCall(requestFactory.create(args));</span><br><span class="line">    if (call == null) &#123;</span><br><span class="line">      throw new NullPointerException(&quot;Call.Factory returned null.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return call;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/11a1c471fea2388400d028ad1e3e5c86.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/b2e24d8c55efa10ec2f3f2c0c342bdcf.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/52f007abdde12af0368acc90e6ad7bc1.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/10f558ccfa699d1d0bd6afc839784611.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/493e40be01c7d3e6ce6bf85e33ecaa9d.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/623abf36e4328994281d47f6032582d6.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/a1905ededaf02ced2e8be88021cd04e2.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/691c561fa2e426c642bb201f21257290.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/8ad1e995d647ced7a696a2b46f9ce129.png" alt><br><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/d1ff069a231166788959b23fdaff0c8b.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/2192ab9b92405da66522fcae02489717.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/06662df34b597e5de2c9b03b3b7fe054.png" alt></p>
<p><img src="http://nunu03.github.io/2022/05/31/Retrofit%E6%9E%B6%E6%9E%84%E8%A7%A3%E6%9E%90/507b53189e26fafacc1271729e0f60dc.png" alt></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>来自享学直播 </p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Retrofit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android知识点整理]]></title>
      <url>/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="循序表（数组arraylist）和linklist-（-双向链表）链表的插入、删除、查询的效率？"><a href="#循序表（数组arraylist）和linklist-（-双向链表）链表的插入、删除、查询的效率？" class="headerlink" title="循序表（数组arraylist）和linklist （ 双向链表）链表的插入、删除、查询的效率？"></a>循序表（数组arraylist）和linklist （ 双向链表）链表的插入、删除、查询的效率？</h3><h3 id="如果一个数组反复插入删除怎么降低时间复杂度？"><a href="#如果一个数组反复插入删除怎么降低时间复杂度？" class="headerlink" title="如果一个数组反复插入删除怎么降低时间复杂度？"></a>如果一个数组反复插入删除怎么降低时间复杂度？</h3><p>A.数组插入、删除：是在下标i的地方，后边的数组整体system.copy一份，然后插入到i位置。Copy是一个循环。</p>
<a id="more"></a>
<p>链表插入、删除：是一个节点node，node包含两部分，数组和指针，当前指针指向下一个数组。</p>
<p>数组，查找快，直接用下标获取。</p>
<p>链表，查找慢，需要循环获取。</p>
<p>B.标记-查找：删除的时候不删除，赋值为null或者标记其他，这个下次在插入的时候直接赋值即可。然后在适当的机会，循环删除值为null的数组即可。这样就可以优化了对象的反复创建和删除。</p>
<p>C.linkedlist，查询第一个和最后一个时间复杂度一样？一样，查询第一个和倒数第二个一样吗？不一样，liankedlist是双向链表。倒数第二个需要两步。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/2354eb28445e06f90aa01870843db321.png" alt="descript"></p>
<h3 id="hashmap？长度默认16"><a href="#hashmap？长度默认16" class="headerlink" title="hashmap？长度默认16"></a>hashmap？长度默认16</h3><h4 id="jdk-1-7-为什么用链表？用的是hash碰撞原理"><a href="#jdk-1-7-为什么用链表？用的是hash碰撞原理" class="headerlink" title="jdk 1.7:为什么用链表？用的是hash碰撞原理"></a>jdk 1.7:为什么用链表？用的是hash碰撞原理</h4><p>A。把key通过hashcode对length取模，设置下标。所以hashmap的table表是顺序的。然后创建一个节点（数据hashmapentry），放到这个下标的位置。同时每个下表对应的所有节点是一个单链表。</p>
<p>B。Hashcode的获取，就是一个hash碰撞的过程。比如hashcode=1和hashcode=17，是在一个下标上。</p>
<p>C。Get一个数据，就是用过key获取链表，然后在通过key循环具体的值，循环过程中要判断hashcode一致，判断key一致。</p>
<p>D。Hash表在什么情况性能最差？所有数据在一个节点上，那链表久非常大，效率就非常低了。</p>
<p>E。什么长度是16？因为在hash下标的过程中。16的二进制是10000.</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/98a374c9642bd13c072c8df2daa3c646.png" alt="descript"></p>
<h4 id="jdk1-8-每一个节点，用了红黑树。Treenode。但不是每一个节点都是红黑树。"><a href="#jdk1-8-每一个节点，用了红黑树。Treenode。但不是每一个节点都是红黑树。" class="headerlink" title="jdk1.8:每一个节点，用了红黑树。Treenode。但不是每一个节点都是红黑树。"></a>jdk1.8:每一个节点，用了红黑树。Treenode。但不是每一个节点都是红黑树。</h4><p>A。hash冲突后不在用链表保存相同的index节点，而是采用红黑树保存冲突节点。</p>
<p>B。红黑树构建的时候很复杂、效率很低（旋转）。所以当链表超过8个才使用红黑树。</p>
<p>hashmap线程安全问题：不安全。</p>
<p>如果链表被同时操作就会出现问题。</p>
<p>Hashtable线程安全；所有函数（put、get，remove）的时候用到了synchronized。但是这样的任何访问都加了锁，包括所有hashcode上。</p>
<p>Synchronized，内置锁，开锁和关锁都是jvm完成的。所以get时候不能put。只能执行其中一个。</p>
<p>Concurrenthashmap：是基于hashtable的优化，它是在具体的链表上锁，也是用到了synchronized，但是它只是锁在了链表上。</p>
<h2 id="广播注册方式？有什么不同？通信原理是什么？"><a href="#广播注册方式？有什么不同？通信原理是什么？" class="headerlink" title="广播注册方式？有什么不同？通信原理是什么？"></a>广播注册方式？有什么不同？通信原理是什么？</h2><p>动态，静态。原理都是Binder。静态广播不需要手动取消注册，周期是整个app期间。动态广播需要。</p>
<h2 id="hashmap和sparsearray哪个更优？"><a href="#hashmap和sparsearray哪个更优？" class="headerlink" title="hashmap和sparsearray哪个更优？"></a>hashmap和sparsearray哪个更优？</h2><p>Hashmap：hashcode操作，耗时。Hashmap是任意对象。装载因子（阀值）是0.75。达到16*0.75=12，开始扩容，也是耗时操作。浪费了4个空间，所以耗内存。Get是遍历获取链表，耗时。</p>
<p><strong>Sparsearray：两个数组：默认空间10；key[],value[]. Key与value是一一对应的。Sparsearray是int，节省内存空间。对应的key应该存在数组的哪里？采用了二分查找，找到数组中的位置，然后通过system。Copy移动数组插入。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/66fc84f2a6a39740d7143af12213dbab.png" alt="descript"></p>
<p>get？通过二分查找找到下标，然后就可以了。速度快。</p>
<p>拷贝效率也低啊？但是这里，remove时是没有具体删除的，而是标记一个delete。这样插入的时候直接赋值就可以了。而hashmap是循环。</p>
<p>所以，<strong>sparsearray</strong>时间更快。但是hashmap空间更小。</p>
<h2 id="单例模式："><a href="#单例模式：" class="headerlink" title="单例模式："></a>单例模式：</h2><h3 id="A：双重校验："><a href="#A：双重校验：" class="headerlink" title="A：双重校验："></a>A：双重校验：</h3><h4 id="如何防止指令重排，添加volatile。"><a href="#如何防止指令重排，添加volatile。" class="headerlink" title="如何防止指令重排，添加volatile。"></a>如何防止指令重排，添加volatile。</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/10be1191f3475ec1fdefec72e0668d45.png" alt="descript"></p>
<h3 id="B-懒汉式单利"><a href="#B-懒汉式单利" class="headerlink" title="B:懒汉式单利"></a>B:懒汉式单利</h3><h4 id="线程不安全"><a href="#线程不安全" class="headerlink" title="线程不安全"></a>线程不安全</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/5cbd42da18a01320e01436dd6e9ce19c.png" alt="descript"></p>
<h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/48fe275d98c3eb469652933e10a72617.png" alt="descript">但是同步锁粒度太大：下边的粒度就小很多；</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/74efdc6c4e5cb88666f1ad66ce7750eb.png" alt="descript"></p>
<h3 id="C-饿汉式单例：线程安全"><a href="#C-饿汉式单例：线程安全" class="headerlink" title="C.饿汉式单例：线程安全"></a>C.饿汉式单例：线程安全</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/644b0d78d0f1b1e88a263b90ad976567.png" alt="descript"></p>
<h3 id="D-静态内部类单例：线程安全的："><a href="#D-静态内部类单例：线程安全的：" class="headerlink" title="D.静态内部类单例：线程安全的："></a>D.静态内部类单例：线程安全的：</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/773c5d7794f7a708bdaab1927d05111a.png" alt="descript"></p>
<h3 id="E-采用枚举：枚举默认线程安全；"><a href="#E-采用枚举：枚举默认线程安全；" class="headerlink" title="E.采用枚举：枚举默认线程安全；"></a>E.采用枚举：枚举默认线程安全；</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a5d69258dd6bb64fef4fbf71942dc5a1.png" alt="descript"></p>
<h3 id="F-使用容器实现单例："><a href="#F-使用容器实现单例：" class="headerlink" title="F.使用容器实现单例："></a>F.使用容器实现单例：</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/02ef798bd8a121e1afc05bd67aaf4d9c.png" alt="descript"></p>
<h2 id="string-的-与equals的区别？"><a href="#string-的-与equals的区别？" class="headerlink" title="string 的== 与equals的区别？"></a>string 的== 与equals的区别？</h2><p>String str1 = “a”常量池是在堆内存里的。==比较的是内存存放的位置。但是他们对hanshcode是相等的。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/459264b8012eb9e62c17eda6fc85302d.png" alt="descript"></p>
<p>equals比较的是字符串的序列，是具体的字字符比较。</p>
<p>Stirng str = “阿”。str = str+“阿”。与string ds = new string （“阿阿”）；str和ds是一个对象，string是不可变的，因为string类里的方法，都是final。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/52f7e8888b5476de8457a5008857ce45.png" alt="descript"></p>
<h2 id="volatile："><a href="#volatile：" class="headerlink" title="volatile："></a>volatile：</h2><h3 id="A-多线程可见"><a href="#A-多线程可见" class="headerlink" title="A.多线程可见"></a>A.多线程可见</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/97b51f640aa7d54114060bba0eeb81e0.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/dec4eee4d976bed18eba9d17faddfdef.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/3bd1f9f4b7ffc671a609f6255866bdbf.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/d20dcdfe6c476ecd5c1339738c31901e.png" alt="descript"><strong>所以，volatile就相当于一个总线嗅探机制，当其中一个线程变化后，会修改主内存的值，其他线程会被通知，从新从主内存获取数据。并且8个操作是原子性的，其中一个指令执行，其他不会操作的。原理是：当一个线程执行write时，是被加了锁的（如下图的lock）。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/d848ab1e8edc6cdebe123e1c49e41e49.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/15d6be9cef1c056686289c51c56b1309.png" alt="descript"></p>
<h3 id="B：禁止指令重排（半初始化），原理是内存屏障。"><a href="#B：禁止指令重排（半初始化），原理是内存屏障。" class="headerlink" title="B：禁止指令重排（半初始化），原理是内存屏障。"></a>B：禁止指令重排（半初始化），原理是内存屏障。</h3><p><strong>双重检测的单例，为啥加volatile？就是禁止指令重排。顺序如下：</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/fe8052d5f7c4b30c7f1923f2858c4651.png" alt="descript"></p>
<p>但是在cpu执行过程中，这个顺序会改变。如果在单线程里，这个顺序改变了也没关系，但是在多线程中，如果在一个线程创建了引用，而另一个线程在执行时，就会拿到这个引用，从而，拿到的值有可能是第一个线程未赋值的初始值0，而第二个还在初始化对象。</p>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/fd841b7835ce24d859bd0f9bec799f5e.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/b4b7fbfe5930e8ceeb2df9b92d10166e.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/71eb21ec07af0113c280da265c13619d.png" alt="descript"></p>
<p><strong>上述代码：多线程并发问题。会出现i–，最后不为0的情况。</strong></p>
<h3 id="A．synchronized：内置锁，重量级锁"><a href="#A．synchronized：内置锁，重量级锁" class="headerlink" title="A．synchronized：内置锁，重量级锁"></a>A．synchronized：内置锁，重量级锁</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/838f183a70ef127976756a9c26cb3d31.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7671fb42b8ab08a0242b16ca3255486b.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/da5750fc9016f156bec0b0a69b35561b.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/046bcab402e983036d50f5737c779c55.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/68547c4a3bd8971bae7521ccc6631ad0.png" alt="descript"></p>
<h3 id="B．AtomicInteger：乐观锁：无锁机制"><a href="#B．AtomicInteger：乐观锁：无锁机制" class="headerlink" title="B．AtomicInteger：乐观锁：无锁机制."></a>B．AtomicInteger：乐观锁：无锁机制.</h3><p>比synchronized快。<strong>缺点是：i.decrementAndGet的i—是可操作的。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ba8063b2ae18ed7d6358d9b37466b00b.png" alt="descript">原理：根据堆内存中的偏移量来获取value，比通过对象.value的拷贝方式要快。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/3983caf6f9c91c28896dc421c065c8c8.png" alt="descript"></p>
<h3 id="C-ReentrantLock：可重入锁，也叫显示锁"><a href="#C-ReentrantLock：可重入锁，也叫显示锁" class="headerlink" title="C.ReentrantLock：可重入锁，也叫显示锁"></a>C.ReentrantLock：可重入锁，也叫显示锁</h3><p><strong>是接口lock锁的实现类。也可以自己实现公平锁或者不公平锁，因为队列线程是我们自己的。也是重量级锁。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/1ae7cddbd38e40899d68c1bb77efe995.png" alt="descript"></p>
<p>原理、执行过程：</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/807a85b110a59cc44fab3b7b8b28b238.png" alt="descript"></p>
<h3 id="D-CAS：先比较再交换。也是一种乐观锁，无锁机制。"><a href="#D-CAS：先比较再交换。也是一种乐观锁，无锁机制。" class="headerlink" title="D.CAS：先比较再交换。也是一种乐观锁，无锁机制。"></a>D.CAS：先比较再交换。也是一种乐观锁，无锁机制。</h3><p><strong>高并发不适合。但是如果只有几个线程，速度非常快。</strong></p>
<p><strong>而且CAS有ABA问题：尤其是对象操作的时候。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/923a0c790e4887ac2522ad868c47b2da.png" alt="descript"></p>
<h2 id="Context是什么？抽象类"><a href="#Context是什么？抽象类" class="headerlink" title="Context是什么？抽象类"></a>Context是什么？抽象类</h2><p>A.上下文，贯穿整个应用。</p>
<p>B．运行环境：提供了一个应用运行所需要的信息、资源、系统服务等。</p>
<p>C．场景：用户操作和系统交互这一过程就是一个场景。比如Activity之间的切换、服务的启动等都离不开Context。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/dd1bdce2ec3a15c50cdb3f31b336c191.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/1854e4b259dbab826ac133d2fc1fa5d0.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/0cd76fb4f3da0531d0f64d209f5cbc75.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/f1aec1b60d5fb8b251e5f7c6366fe109.png" alt="descript"></p>
<h2 id="什么是Activit、View、Window？"><a href="#什么是Activit、View、Window？" class="headerlink" title="什么是Activit、View、Window？"></a>什么是Activit、View、Window？</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/3f223045ae4a60aa1753642f9df25c50.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/914b2724138ef7381142762ae6f73651.png" alt="descript"></p>
<h2 id="Dex文件"><a href="#Dex文件" class="headerlink" title="Dex文件"></a>Dex文件</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/5061be4497ea2dc76626057bf0ee910b.png" alt="descript"></p>
<h2 id="APK打包流程"><a href="#APK打包流程" class="headerlink" title="APK打包流程"></a>APK打包流程</h2><p><strong>Xml通过aapt编译成R.JAVA</strong></p>
<p><strong>Aidl通过aidl文件生成java文件</strong></p>
<p><strong>然后通过javaCompiler把java文件转化为class文件。</strong></p>
<p><strong>然后通过dex把class打包成.Dex文件。</strong></p>
<p><strong>用apkbuild把所有文件，包括资源，图片文件通过zip压缩打包成apk，然后通过对齐，签名形成一个可运行的apk。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9cf4771de7e387e22c75fc4052511d42.png" alt="descript"></p>
<h2 id="事件分发处理机制"><a href="#事件分发处理机制" class="headerlink" title="事件分发处理机制"></a>事件分发处理机制</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ea05017670bab7fd803e422e2d7373c9.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/88c0a2afb4981b79d034e8c67b46d19a.png" alt="descript"></p>
<h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/d9fe85dbe0218bb757875b3899ae1d94.png" alt="descript"></p>
<h3 id="Down事件的分发流程"><a href="#Down事件的分发流程" class="headerlink" title="Down事件的分发流程"></a>Down事件的分发流程</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/be635e4cec123a1908da7c4db6a8a67a.png" alt="descript"></p>
<h2 id="measureSpec是什么？原理是什么？"><a href="#measureSpec是什么？原理是什么？" class="headerlink" title="measureSpec是什么？原理是什么？"></a>measureSpec是什么？原理是什么？</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/e0131b0ad4b2f1caaded3ff72ced90d7.png" alt="descript"></p>
<p><strong>测量主要解决parent和wrap的测量。</strong></p>
<p><strong>FlowLayout-》onMeasure：</strong></p>
<p><strong>//计算孩子的宽/高:</strong></p>
<p><strong>Width=100;height=300;</strong></p>
<p><strong>//设置自己的宽/高：</strong></p>
<p><strong>setMeasureDimension（width，height）</strong></p>
<p><strong>那如何计算孩子的宽高？如何度量？其中view的大小，不是int，而是MeasureSpec。</strong></p>
<p><strong>所有通过childView.getMeasureWidth(),childView.getMeasureheigth(),但是需要在获取之前设置度量孩子的大小childView.measure(widthMeasureSpec,heightMeasureSpec), widthMeasureSpec,heightMeasureSpec是什么？可以认为是父类宽高，childView的最大宽度，就是父类的宽高减去padding。那MeasureSpec如何得到？因为当前的子view也有可能有子view，所以.measure的时候，还需要通过getChildMeasureSpec获取widthMeasureSpec,heightMeasureSpec。</strong></p>
<p><strong>通俗的说？widthMeasureSpec,heightMeasureSpec就是能给chaildView的具体的大小。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/48d6d5718255cba3d97c87f4f31f348e.png" alt="descript"></p>
<p><strong>那为什要measure？因为只有把父类的具体大小给孩子，才能测量出孩子的具体宽高。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/f76030a1d33b9cec8be961434904f3cd.png" alt="descript"></p>
<h2 id="layout自定义View布局原理？"><a href="#layout自定义View布局原理？" class="headerlink" title="layout自定义View布局原理？"></a>layout自定义View布局原理？</h2><p><strong>就是确定每一个view的left，top，right，bottom。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/543de1ef139cc3b29c1fa2a93c9f365c.png" alt="descript"><strong>onLayout是用的视图坐标系：因为你布局的时候，是根据父布局进行布局的。</strong></p>
<p><strong>Layoutparams保存了view的坐标。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/3aac2163213b1687e10a5fa536f15873.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/3204210597a90c40f9183661222f43f9.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/2adb5515b610efc599bd7c37fa3be5cb.png" alt="descript"></p>
<p>## </p>
<h2 id="inflate解析xml过程？"><a href="#inflate解析xml过程？" class="headerlink" title="inflate解析xml过程？"></a>inflate解析xml过程？</h2><p><strong>Xml-》解析-？然后创建view，通过反射创建，比如自定义view在xml中使用，需要全路径名-》创建view后，会把解析的属性给view。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7f8958e7e49458f6ab8405e4f914579e.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7d7e522690b1332b3a393f5dcb3f395c.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/db859dea09d4f9f958d8ace4c6f07bd2.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/17127d6dfeeda274e264f023570785e6.png" alt="descript"></p>
<h2 id="沉浸式开发原理？状态栏和ui一致背景？"><a href="#沉浸式开发原理？状态栏和ui一致背景？" class="headerlink" title="沉浸式开发原理？状态栏和ui一致背景？"></a>沉浸式开发原理？状态栏和ui一致背景？</h2><h2 id="ViewPage？默认缓存3个界面。"><a href="#ViewPage？默认缓存3个界面。" class="headerlink" title="ViewPage？默认缓存3个界面。"></a>ViewPage？默认缓存3个界面。</h2><p>Setoffscreenpagelimit（1）， Limint为1.他的意思是最多缓存当前界面的左右两个界面，加上当前就是3个界面。</p>
<p>预加载：问题？缓存，会耗费更多内存，时间？会耗费更多时间。</p>
<p>所以采用懒加载方案，就是loading或者白屏的时候。</p>
<p>所以解决这个问题的原理：populate：填充+fragment adapter适配器模式。</p>
<p>缓存：就是创建fragment放入到arraylist里。</p>
<p>适配：当左右滑动时，先处理左边或右边的界面？如何处理，初始化（instantiateItem）一个fragment（放入arraylist）和销毁（destroyItem）掉一个fragment（从arraylist中删除）。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/bd4ed3c5cb23a36045848bc825ae204a.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/65b13e836a3a44450a536e66ee0bff70.png" alt="descript">Attch，fragment不会立即执行。这个时候，首先还要把刚初始化的页面设置为不可见setUerVisibleHint，也就是即将要缓存起来的item不可见。</p>
<p>看下图：首先要缓存tab4，把tab1设为不可见，设置当前的目标tab3设为可见，并且直接用的FragmentCompat，。但是这个可见是在finishUpdate的commit之前执行的，所以，viewpage的fragment的生命周期，第一个是setUserVisibleHint。如下下图。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/91b2b685a083675d8d50d870b7d87ff9.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ca1082bdee1ec80dd6f3c190346a205e.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/d751a058b3cb0be13cab98114068c28e.png" alt="descript">setPrimaryItem会执行两个动作：之前的item设置为不可见，新的item设为可见。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/4e47cd4f410f9eefdd6fefbd8043ae08.png" alt="descript"></p>
<p>只有执行fragment的CommitAllowingStateLoss之后才会走fragment生命周期。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/0e3fd078dba2c55ad0e3588d3e4835de.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/948c3c01ae485bf5a7ba2a58ea1ed80a.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/311c922df3a027ebc3ada7afa53bf422.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/430f2bada823b24413bc51adb5070675.png" alt="descript"></p>
<h2 id="RecycleView"><a href="#RecycleView" class="headerlink" title="RecycleView"></a>RecycleView</h2><p>缓存和复用都是ViewHolder。其实就是一个itemView。那缓存有几级？</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/07ebef7e90f4badae58976b345ab25ea.png" alt="descript"></p>
<p>以下就是处理复用机制：</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/0d3638b50174dc4deaab14a2f7a1f072.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/987d0997e9ef341174e1216861fb8ea0.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/668659b35581382ec091a572e6e89889.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/1317567285774c88e4af660821ce9042.png" alt="descript"><strong>从滑动看复用填充流程：</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a52dc82434afcb4864b7e02ae442a3c4.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/d854812d61c8aa3e50a4fb8b76d9b7c5.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a3df54f181c1a07bde7cb509d37583f5.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a40fafe272966be716dc5929d8c1806b.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a589026286ef062d4e198cac4eb4823f.png" alt="descript"></p>
<p><strong>从onLayout看复用填充流程：最终也会到fill入口，跟之前一样。</strong></p>
<p><strong>缓存？=========================================================================</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/1c563da00d4883f8e6b741cb5a12b30b.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/1af42ed9ce59f8fd8e8e72aa94a45d88.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/447c41fc97a4f9fe14c81335f6af2f49.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/65649e3b4b2acf026819ac58fb7fc3c4.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/fd2453949e93532eaa90eb7ce4034ad2.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ea6cab41f3c237e0dded4b1ca2ab43e9.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/3970f166048626b19c75284830d6c73d.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/cb42b87159dadeef9f3a6ac477ee31a6.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a5731d7b0173bb237fe1877bd7fc4943.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ea75310a241454f4dba09e8b18645c2c.png" alt="descript"></p>
<h2 id="OOM是如何发生的？"><a href="#OOM是如何发生的？" class="headerlink" title="OOM是如何发生的？"></a>OOM是如何发生的？</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/575a2a1abdcf2634bdfb6d22cc351b0a.png" alt="descript"></p>
<h2 id="Java回收机制？如何减少OOM的概率？"><a href="#Java回收机制？如何减少OOM的概率？" class="headerlink" title="Java回收机制？如何减少OOM的概率？"></a>Java回收机制？如何减少OOM的概率？</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/0dcfb462ed52c5eedeed7ac5c7d9b2bf.png" alt="descript"></p>
<h2 id="如何排除应用崩溃原因？ANR？"><a href="#如何排除应用崩溃原因？ANR？" class="headerlink" title="如何排除应用崩溃原因？ANR？"></a>如何排除应用崩溃原因？ANR？</h2><p><strong>1.把崩溃堆栈传到服务。</strong></p>
<ol>
<li><p><strong>使用第三方开源库。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/edcf259e74b9ac4ba28396d06bb6605c.png" alt="descript"></p>
</li>
</ol>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ac6380ec8de6a9d4859c5e3e2f2d0788.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/3da26c11d9d71428a03f1e814279597a.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/76c8bf211224d76c2487b80d2f712c73.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/b25a3ffd98a6278558e86bcc87487d51.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/c805a1f591455134dccaad6a9ddbf641.png" alt="descript"></p>
<h2 id="App启动优化，速度优化？"><a href="#App启动优化，速度优化？" class="headerlink" title="App启动优化，速度优化？"></a>App启动优化，速度优化？</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7078146c6ab06539faed8078e244d62f.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7f8dfa18d380d7138d4168a8593df813.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/27850ea8a3f0120b7c17dcf49a50de86.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/0d0935b6e3ba27c2d27a45cd0a2275ea.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/b81ce39e216eb9089e9040b8d324c284.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6a262da28456b323b396dc2e2ff25a39.png" alt="descript"></p>
<h2 id="热修复原理？"><a href="#热修复原理？" class="headerlink" title="热修复原理？"></a>热修复原理？</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/dff5a74d4ec95b8d4c4e5653c7b6fac1.png" alt="descript"></p>
<h3 id="AndFix："><a href="#AndFix：" class="headerlink" title="AndFix："></a>AndFix：</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6f560ddb1327c4a9d04ed308a6bfbd29.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/d105740dbf0f8cf4899fa85cb7175231.png" alt="descript"></p>
<h3 id="Robust："><a href="#Robust：" class="headerlink" title="Robust："></a>Robust：</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/444c15764f2d15d1a411f9e50488037b.png" alt="descript"></p>
<h3 id="Tinker-amp-类加载机制"><a href="#Tinker-amp-类加载机制" class="headerlink" title="Tinker&amp;类加载机制:"></a>Tinker&amp;类加载机制:</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/395088494eb8803e301054672bd40862.png" alt="descript"></p>
<h4 id="Bsdiff差分工具："><a href="#Bsdiff差分工具：" class="headerlink" title="Bsdiff差分工具："></a>Bsdiff差分工具：</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ec935385d5019548913111cb73824e11.png" alt="descript">如何拿当前的apk问价：PackageManager</p>
<h4 id="CalssLoader："><a href="#CalssLoader：" class="headerlink" title="CalssLoader："></a>CalssLoader：</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9b816c989988a4d68cd147b1deeadd83.png" alt="descript"><strong>自己写的类，用的PathClassLoader（mainactivity），系统的类，就是BootClassLoader（application，activity）。</strong></p>
<p><strong>加载一个类方法：PathClassLoader.loadClass();-&gt;BaseDexClassLoader-&gt;ClassLoader.loadClass(),所以通过一个类全路径，获取Class对象。</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/87ad9b5c28554f7631ba4d68a3510dac.png" alt="descript"></p>
<p>所有的类在dex文件里。FindLoadedClass从缓存获取class对象。如果没有，在通过parent .loadClass();parent也是一个ClassLoader。这里用的就是双亲委托机制。为什么要有这个机制：一是安全，而是避免重复加载。但是如果是我们的自己的类，parent肯定加载不到，所以执行findClass（）。而这个classloader，是pathclassloader。所以最后看到baseDexClassLoader。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/626820d057048fc5cb5b6280fd10436d.png" alt="descript"></p>
<p>然后看到，通过for循环找，dexElements，是一个数组【class1.dex，class2.dex，。。。。。。】。从而拿到了dex中的Class类对象。所以，我们得到了修复之后的dex，那怎么办，只要把这个dex放到数组的最前面即可，因为是顺序的，所以在使用的时候，拿到这个正确的之后，就直接return了，不会在查询class2.dex……..。最后，先getClassLoader拿到pathclassloader，通过反射，拿到DexPathList，在拿到这个类里的dexElements数组，把这个dex，放到dexElements里即可。</p>
<h4 id="双亲委托机制："><a href="#双亲委托机制：" class="headerlink" title="双亲委托机制："></a>双亲委托机制：</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/d0b7b8f33f239510d8f733f5f21ada3b.png" alt="descript">在用户的加载类里，如果要加载Activity系统类，这个时候，不需要自己加载，由parent=BootClassLoader加载了。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/042fe19c111690d7d93a975547b4cbc0.png" alt="descript"></p>
<h3 id="Qzone："><a href="#Qzone：" class="headerlink" title="Qzone："></a>Qzone：</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/5d1d7b52a9d787a009e58786de105603.png" alt="descript"></p>
<h2 id="如何判断文件的一致性？"><a href="#如何判断文件的一致性？" class="headerlink" title="如何判断文件的一致性？"></a>如何判断文件的一致性？</h2><p>crc方法。CRC32 即循环冗余校验码（Cyclic Redundancy Check）：是数据通信领域中最常用的一种查错校验码，其特征是信息字段和校验字段的长度可以任意选定。循环冗余检查（CRC ）是一种数据传输检错功能，对数据进行多项式计算，并将得到的结果附在帧的后面，接收设备也执行类似的算法，以保证数据传输的正确性和完整性。</p>
<h2 id="多进程-文件共享"><a href="#多进程-文件共享" class="headerlink" title="多进程-文件共享"></a>多进程-文件共享</h2><p>Messenger，Bundle，文件共享，Content Provider……</p>
<h2 id="sp、mmkv、mmap"><a href="#sp、mmkv、mmap" class="headerlink" title="sp、mmkv、mmap"></a>sp、mmkv、mmap</h2><h3 id="SharedPreference："><a href="#SharedPreference：" class="headerlink" title="SharedPreference："></a>SharedPreference：</h3><p>map持久化： 在内存中时，在文件中序列化是xml。</p>
<p>初始化：在子线程里，通过io，获取xml文件，反序列化成map。</p>
<p>如果数据比较大时：读写数据时，awaitLoadedLocket：等待加载完成。所以数据大，需要解析时间长，如果没有解析完，就读写，这个时候需要等待子线程初始化数据完成。</p>
<p>并且sp创建后无法被回收。</p>
<p>写新数据：map-》序列化xml，写入文件。commit同步提交，会阻塞调用线程。Apply异步，无法获取结果，没有事务性api。无法保证数据一致性。同时哪怕异步提交都可能会导致<strong>ANR</strong>的发生。</p>
<p>更新数据：sp没有更新的概念，是整体的读写操作。哪怕只修改了1条数组，sp也需要全部序列化为xml，覆盖文件进行保存。（全量更新）</p>
<p><strong>优化点：</strong></p>
<p>高效的文件操作；MMAP;</p>
<p>数据格式更精简；二进制；</p>
<p>String一个字节占8位，如“1”（0000 0001）浪费了7位，其实只需要1位就可以；而二进制，一个字节就可以8个数据；</p>
<p>更优的数据更新方式；</p>
<h3 id="FileChannel："><a href="#FileChannel：" class="headerlink" title="FileChannel："></a>FileChannel：</h3><p>拷贝文件比IO快6-7倍。为什么这么快？底层用到了零拷贝技术;如sendfile,mmap。</p>
<h3 id="MMKV：速度非常快。并且实现了sp和sp-editor接口。用了mmap技术。"><a href="#MMKV：速度非常快。并且实现了sp和sp-editor接口。用了mmap技术。" class="headerlink" title="MMKV：速度非常快。并且实现了sp和sp.editor接口。用了mmap技术。"></a>MMKV：速度非常快。并且实现了sp和sp.editor接口。用了mmap技术。</h3><p>零拷贝：是不需要CPU参与的技术。DMA COPY是从内存拷贝到Disk。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/4eb4e93c97ad7e6f4ee1b416d7e1d187.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6b88a4d20e9f9b298babd4ccd4c8386a.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/95e6b3ca2fc96177f4560c8c528d2262.png" alt="descript">映射内存是通过Vma：vm_area_struct-》内存结构。</p>
<p>HTTP2:多路复用。</p>
<p>http1=字符串、文本</p>
<p>http2=二进制。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/93cd1f2bc2a028ffca9d24c825bdf047.png" alt="descript"></p>
<p>总长度（key长度+key值+value长度 +value值 ……）长度数据不一定是一个字节。</p>
<p>那map数据存到文件的过程要通过序列化。</p>
<p>那数据格式Protobuf：比json更加精简。Protobuf编码是一个变长编码，就是有可能把int原有4个字节，编码成1，2，3，4，5个字节。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/b96b2764b40ffe5a5c2322b4964f8027.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/8e06fb9023f3729afa57afb600c9c6be.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/99f8f989467495b5f9fdff7e252c5e3f.png" alt="descript"></p>
<h2 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/17d37bf4880d2c8cb04eb11637cf638c.png" alt="descript">1. 不会。</p>
<p>2. 深拷贝。Equal</p>
<p>3. Budle用的是Parcel，为什么不用map，bundle是跨进程传输一些小的对象。</p>
<p>4. 版本控制。</p>
<p>5. 原理：binder，binder大小就是1M-8kb；binder创建的线程池默认15个（我记得是31个）。内核中映射的最大内核空间，只有4M。有没有办法Intent突破1M？mmap的大小可以修改，但是不可以超过4M.还可以把数据写入数据库或者文件，传递数据的文件名。</p>
<p>6. Activity的启动流程要和AMS打交道，是要跨进程。两个不同进程，数据只有序列化之后才能带过去。</p>
<p>7. 序列化是跨进程通信使用的。持久化是保存数据。</p>
<h2 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/cb65dfa0bcca85478e30d6676af9c96a.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/e576dab941e4cade11bf7ae1899df72d.png" alt="descript"></p>
<p><strong>面试题：为什么glide不能再子线程中with？再子线程中不会添加生命周期管理，只有再主线程中才会用空白的Fragment监听Activity或者Fragment的生命周期。看下面源码：4.11</strong></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/87341e6c8978a866c74713d9ce7d9b37.png" alt="descript"></p>
<p>正在显示的是活动缓存，然后是内存缓存。</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/4d023604873a430955342f5076b7c011.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/c985abd398ff3ae0f5e5393969b86361.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a67afd5010e0a779f7c1c090cc228274.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/40bc8a8e04973ac12a35bec2c370df1b.png" alt="descript"></p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/f630917431e2dee24662c7eaf02f83d1.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/b94c0d49b02351f8632c2b6eab3c9878.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/97fd31e5db9f00917bf4c774e4d36b1d.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7a415daf91f1c482c4f917198ea93a38.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/bdc70d79f8df0613963e2ba34b02d271.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/e14d98891dbc58ff9e64b1f7c3cc8b2c.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6c4e1a43ed7348d4ef934356f87d61fc.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/bc669550b92f8d10c2fe05046676cbb2.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a1abf478ae2ff98b85d52874a5c9b2e2.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/550c497b21ea96d924a8bd0c273b2e8b.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/4c84e163cb533f6a34cb11a94740f7a2.png" alt="descript"></p>
<p><strong>所有javac处理自定义注解类，也是通过ServiceLoader（spi）的方式处理生成实现类的。</strong></p>
<p><strong><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/4cadd6a2c158acff4657a4b6a8f8e1a8.png" alt="descript"></strong></p>
<h2 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/f7c78f92e4117d7bd36fc5ef79e4f414.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7a7bcbc4d3c64c67244c02b86038bc50.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/37c73c38bc033cc3f6273e2bf513890d.png" alt="descript"></p>
<h2 id="ASM字节码插桩"><a href="#ASM字节码插桩" class="headerlink" title="ASM字节码插桩"></a>ASM字节码插桩</h2><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/f9ac20500d65766902ae8e16c9964362.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/4588df91bfcd812e37af8c7a4dbf5077.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/0c8ad188faf52772f993a412975a0d8d.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/73c5f05c4afa6fc2da249e86b6beafd9.png" alt="descript"></p>
<h2 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h2><h3 id="类加载机制：双亲委派机制"><a href="#类加载机制：双亲委派机制" class="headerlink" title="类加载机制：双亲委派机制"></a>类加载机制：双亲委派机制</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/245496a2b11ae3c7a7675af174cc1ed0.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/e12292eff45077a698f91e8c93b3b93f.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/c451e60f6b6385a0983566fe1a276380.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/5d18d28bf057b294735cbeb327aefae0.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/066c66d28c1b1f94ce8456bb3f84e9c7.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/65ba33652d6dacb94c53c0c834706dce.png" alt="descript"></p>
<h3 id="findClass流程"><a href="#findClass流程" class="headerlink" title="findClass流程"></a>findClass流程</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/50e22c6be224a4059344788331e16b21.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/d679aef524bbeacf9291bec387b56764.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/cfa50202ee8a1ab52d0757750a9bc2ce.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a254d9fc5628bfd7775a960bbe027961.png" alt="descript"></p>
<h3 id="合并第三方Dex"><a href="#合并第三方Dex" class="headerlink" title="合并第三方Dex"></a>合并第三方Dex</h3><p>思路：</p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9c709c1cbe71044d9427156752dbed20.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/eba45c4804a05cd2520db40c05d729ff.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/93097b8654d6c663b897fc8fb4c7b411.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/818f87241d934cd60c1fa6b7e69544b5.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/bb01c55815b7bfd643e92d83b7d291c6.png" alt="descript"></p>
<h3 id="Hook-Activity"><a href="#Hook-Activity" class="headerlink" title="Hook Activity"></a>Hook Activity</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/faa99012c413a386cb911a79a4c41f04.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/c93e9bd01b21b1b25206d2f11f203525.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/deea25f55f63c53da5751618042b8fa3.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ef1a8708b3b3d2122d36c68d4d3d9c68.png" alt="descript"></p>
<p>代码流程：</p>
<h4 id="先实现"><a href="#先实现" class="headerlink" title="先实现"></a>先实现</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/f5ba44f99df815fad5ba3acb68a32ba4.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/1e21aeeb53f84215fef750f738959a47.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/0c2d721b0a2749d6306e80eb98c6468e.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/2ff790c4784d43966807cd8b4d06b061.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/c9ec0a3dc223dcec292f8efc6333b325.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6eaa21a63ffbaeb945e801c97534686c.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/423791c6337f65c1e89f7be39caa2bee.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a21f4ceeb103a242c95bc431cc473578.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/8a374352380f9a927eb711d55fc6a14c.png" alt="descript"></p>
<h4 id="再实现"><a href="#再实现" class="headerlink" title="再实现"></a>再实现</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a227d8a6a3bf52a3d03ba2c80d3ac8f0.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a73c647ed7aa225bddb18b5b3e463f6d.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/8518f606181552e494de9d22939667d3.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/8b5f89f180d5a09ae296ec07dc058879.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/43cf24d2e84bde43eb5e0afb11392538.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/219ef2df52aaf8540eefe3c05d10ac51.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/0c7a9cd671e05f869fa7604358c0946a.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/b22ac4fde49a6d5ae50a8443d3f58c12.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6a97da7c803efa2e4bcf8961d8b1654d.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/2e823d4997e7ec7c1e788138956767dd.png" alt="descript"></p>
<h4 id="版本适配"><a href="#版本适配" class="headerlink" title="版本适配"></a>版本适配</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/51ea360b77953be42859d544e6338829.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/17325f14527e598e37498204eacbf069.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/f9c41de16f6ef873b197c4ac3a57a0f4.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/8ce717d61520d015dcb5df46646795a7.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/76f638e3724f5d740d9574caa8938f17.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/664f93481eeb0ea2ef8c0c146b4eea71.png" alt="descript"><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/3aa9821dac70d9430d53cda63fbef6f2.png" alt="descript"></p>
<h3 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ed443be21b351498ff31086ea0f1ef8c.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/fcdd29ef256af515e1fffb482cc12481.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/a9fde05805195b9c98fbe040061f8bae.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/2134005ae83b1d7e6d3c5e8f7f6c6000.png" alt="descript"></p>
<h3 id="资源插件：创建"><a href="#资源插件：创建" class="headerlink" title="资源插件：创建"></a>资源插件：创建</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/3f034f7a00b15e9807e093aeb60908b7.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7e9639c0347b363f32083a5fd61440da.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/ab6fe04bd29b4968aafdfc435d2c2ff1.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/bcda7e0cd5eb0cc77bdbe29bfc3970b2.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/24e86439ed7206f7e7e28392a124858a.png" alt="descript"></p>
<h4 id="解决资源文件冲突："><a href="#解决资源文件冲突：" class="headerlink" title="解决资源文件冲突："></a>解决资源文件冲突：</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/537d9e6e845dc09a689ec2f041718da9.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/d10b35aade1612e4072d385390939841.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/4f378f1ffc86a6c73b6fb25dbb747b9c.png" alt="descript"></p>
<h4 id="具体冲突：改变插件Context的mResources"><a href="#具体冲突：改变插件Context的mResources" class="headerlink" title="具体冲突：改变插件Context的mResources"></a>具体冲突：改变插件Context的mResources</h4><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/16403b183da60875225158c20e7467e7.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/8a108ef2e26261a4e15185663b3af422.png" alt="descript"></p>
<p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/82642ad0b23412bf9b14ce23848894ed.png" alt="descript"></p>
<h2 id="开机启动流程"><a href="#开机启动流程" class="headerlink" title="开机启动流程"></a>开机启动流程</h2><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/loadstart.png" alt="descript"></p>
<h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>从按下电源开始，会通过Boot Rom中的引导芯片代码开始运行。加载引导程序BootLoader到RAM，然后执行。BootLoader会引导操作系统启动。</p>
<h3 id="Kernel"><a href="#Kernel" class="headerlink" title="Kernel"></a>Kernel</h3><p>首先启动内核态（idle pid=0），初始化进程管理、内存管理、驱动（Binder，Display，Camera等等）相关工作，并创建内核进程kthreadd（pid=2），同时创建工作的线程kworkder，软中断线程等等守护进程等。这些都在内核态中进行。</p>
<h3 id="init"><a href="#init" class="headerlink" title="init"></a>init</h3><p>然后启动用户进程init进程，也是第一个用户进程。从而手机进入了用户态。同时init进程是用户进程的鼻祖。每一个进程都有一个main函数。通过linux一系列执行，最终会进入init.cpp,通过LoadBootScripts方法解析init.rc文件，init会挂载一些文件，通过while循环，启动zygote，ServiceManager进程，音频进程，Camera进程等等。看如下图，包括usb，hardware等等。所以init进程主要启动我们后台需要的一些服务进程。while是一个死循环，保证进程的保活，进程无事可做，就通过epoll机制，休眠。<br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/initrc.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/zygote-init.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/zygote.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/init-server.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/init-zongjie.png" alt></p>
<h3 id="zygote"><a href="#zygote" class="headerlink" title="zygote"></a>zygote</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/zygote-zongjie.png" alt><br>启动入口：app_main.cpp中main函数（android 10,11,12）,再main函数中构建了AppRuntime，然后在runtime设置进程名，属性，然后会执行start;如下图<br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/runtime-main.png" alt><br>在start里，发现启动了vm虚拟机（通过startVm），并设置了vm的参数，如下图：<br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/vm-start.png" alt><br>设置好参数后，接着就创建虚拟机（通过CreateJavaVm方法）<br><strong>虚拟机作用是什么？管理内存。</strong><br>虚拟机创建完了，接着通过startReg方法注册android常用的JNI；JNI是啥，就是nativie中间件，用来函数的静态（动态）注册。<br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/msg-java.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/msg-native.png" alt><br>接着执行zygoteInit.java的main函数：<br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/zygote-main.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/zygote-main-1.png" alt><br>在zygote中通过preload预加载函数，会预加载系统类和资源（ImageView、TexetView，Resource）等。<br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/zygote-preload.png" alt><br>zygoteserver就是为zygote创建了一个socket服务器。<br>这时候zygote已经做了很多事情了，接下来该创建SystemServer（大儿子），并通过反射方式调用进程初始化的main函数；<br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/systemserver-fanshe.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/systemserver-service.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/systemserver-zongjie.png" alt><br>接着进入循环等待过程，如下图：<br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/zygote-main-2.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/zygote-main-3.png" alt></p>
<h3 id="SystemServer"><a href="#SystemServer" class="headerlink" title="SystemServer"></a>SystemServer</h3><p>SystemServer通过SystemServiceManager管理启动一系列系统服务SystemService（AMS,WMS,ATMS,PMS），而系统服务创建的时候就会创建一个Binder添加到ServiceManager里.<br>ServiceManager是一个守护进程，独立进程，只是存放了服务的Binder。<br>两者不一样,SystemService通过ServiceManager暴漏给上层app。<br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/systemserver-note.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/systemserver-jiazhi.png" alt></p>
<h3 id="app进程"><a href="#app进程" class="headerlink" title="app进程"></a>app进程</h3><p><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/app-qidong.png" alt><br><img src="http://nunu03.github.io/2022/05/29/Android%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/app-url.png" alt></p>
<h2 id="WMS原理"><a href="#WMS原理" class="headerlink" title="WMS原理"></a>WMS原理</h2><p><a href="https://nunu03.github.io/2022/06/01/Android-WMS%E5%8E%9F%E7%90%86/">WMS原理</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 配置]]></title>
      <url>/2022/05/29/hello-world/</url>
      <content type="html"><![CDATA[<p>通过git+hexo搭建个人博客</p>
<a id="more"></a>
<p>More info: <a href="https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#%E4%BD%BF%E7%94%A8hexo%E5%86%99%E5%8D%9A%E5%AE%A2" target="_blank" rel="noopener">Deployment</a></p>
<h2 id="相关指令"><a href="#相关指令" class="headerlink" title="相关指令"></a>相关指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br><span class="line">hexo init</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo d</span><br><span class="line">npm install hexo --save</span><br><span class="line">hexo new &apos;kotlin使用笔记&apos;</span><br><span class="line">出现异常：使用下面命令，安装所有插件。</span><br><span class="line">npm ls --depth 0</span><br></pre></td></tr></table></figure>

<h2 id="标签抬头"><a href="#标签抬头" class="headerlink" title="标签抬头"></a>标签抬头</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2019-07-02 20:25:40</span><br><span class="line">type: tags</span><br><span class="line">layout: tags</span><br><span class="line">reward: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="分类抬头"><a href="#分类抬头" class="headerlink" title="分类抬头"></a>分类抬头</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2019-04-24 15:30:30</span><br><span class="line">type: categories</span><br><span class="line">layout: categories</span><br><span class="line">reward: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h2 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h2><h3 id="直接引用markdown插入"><a href="#直接引用markdown插入" class="headerlink" title="直接引用markdown插入"></a>直接引用markdown插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![lena](https://alexcld.com/images/pengyuyan.jpg)</span><br></pre></td></tr></table></figure>

<h3 id="使用html方法引入"><a href="#使用html方法引入" class="headerlink" title="使用html方法引入"></a>使用html方法引入</h3><ul>
<li><p>固定图片大小</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://alexcld.com/images/pengyuyan.jpg&quot; width=256 height=256 /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>百分比的方式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;https://alexcld.com/images/pengyuyan.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>图像加个标注</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;</span><br><span class="line">&lt;img src=&quot;https://alexcld.com/images/pengyuyan.jpg&quot; width=&quot;25%&quot; height=&quot;25%&quot; /&gt;</span><br><span class="line">Figure 1. xx</span><br><span class="line">&lt;/center&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>图和标注间距离增大<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;</span><br><span class="line">&lt;img src=&quot;https://alexcld.com/images/pengyuyan.jpg&quot; width=&quot;25%&quot; height=&quot;25%&quot; /&gt;</span><br><span class="line">$ $</span><br><span class="line">Figure 1. xx</span><br><span class="line">&lt;/center&gt;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="mellow"><a href="#mellow" class="headerlink" title="mellow"></a>mellow</h2><p><a href="https://github.com/codefine/hexo-theme-mellow/wiki" target="_blank" rel="noopener">mellow</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[epic原理浅析]]></title>
      <url>/2022/04/08/epic%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="Art-amp-Dalvik"><a href="#Art-amp-Dalvik" class="headerlink" title="Art &amp; Dalvik"></a>Art &amp; Dalvik</h2><p>Art（Android Runtime）虚拟机是 Android 4.4 发布的，用来替换 Dalvik 虚拟机，但是在Android 4.4 默认采用的还是Dalvik 虚拟机，但是可以选择使用Art。在Android 5.0版本中默认使用Art了，Dalvik退出了历史舞台，所以可以说是在Android在5.0开始正式使用Art虚拟机。</p>
<a id="more"></a>
<p>Dalvik中的应用每次运行时，字节码搜需要通过JIT编译器编译成机器码，这会使得应用程序的运行效率降低。而在 ART 中，系统在安装应用程序时会进行一次 AOT（ahead of time compilation, 预编译），将字节码预先编译成机器码并存储在本地，用于生成OAT文件，这个OAT文件既包含转化前的dex文件，又包含机器指令，这样应用程序每次运行时就不需要执行编译了，运行效率会大大提升，设备的耗电量也会降低。不过采用 AOT 也有缺点，主要有两个：第一个是 AOT 会使得应用程序的安装时间变长，尤其是一些复杂的应用；第二个是字节码预先编译成机器码，机器码需要的存储空间会多一些。为了弥补以上两个缺点，Android 7.0 版本的 ART 加入了即时编译器 JIT，引入了混合编译模式，作为 AOT 的一个补充，在应用程序安装时不会将字节码全部编译成机器码，而是在运行中将热点代码编译成机器码，从而缩短了应用程序的安装时间并节省了存储空间。<br>   <strong>基本概念和名词</strong></p>
<ul>
<li>.dex文件：App所有java源代码编译后生成众多class文件，由DX/D8，编译为一个/多个（multiDex）dex文件，由Android虚拟机编译执行</li>
<li>.odex文件：dex文件经过验证和优化后的产物，art下的odex文件包含经过AOT编译后的代码以及dex的完整内容，但Android8.0之后odex中的dex内容移动到了.vdex文件</li>
<li>.art文件：art下根据配置文件生成odex文件时同时生成.art文件，主要是为了提升运行时加载odex中热点代码的速度，包含了类信息和odex中热点方法的索引，运行App时会首先根据这个文件来加载odex中已经编译过的代码</li>
<li>解释器（Interpreter）：用于程序运行时对代码进行逐行解释，翻译成对应平台的机器码执行</li>
<li>JIT编译（Just In Time）：由于解释器方式运行太慢引入，对于<strong>频繁运行的热点代码（判定标准一般是在某个时间段内执行次数达到某个阈值）进行实时编译（在ART下以方法为粒度）执行，并且缓存JIT编译后的代码在内存中用于下次执行。由于以方法为粒度（ArtMethod）</strong>进行编译，JIT编较于解释器可以生成效率更高的代码，运行更快。</li>
<li>AOT编译（Ahead-Of-Time）：应用安装时全量编译所有代码为本地机器码，运行时直接执行机器码。<br><img src="http://nunu03.github.io/2022/04/08/epic%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/art.jpg" alt><br>从这幅图中我们看到：<br>在Dalvik虚拟机上，APK中的Dex文件在安装时会被优化成odex文件，在运行时，会被JIT编译器编译成native代码。<br>而在ART虚拟机上安装时，Dex文件会直接由dex2oat工具翻译成oat格式的文件，oat文件中既包含了dex文件中原先的内容，也包含了已经编译好的native代码。<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><a href="https://blog.csdn.net/weixin_33928467/article/details/89614535" target="_blank" rel="noopener">Android上的ART虚拟机</a><br><a href="https://bbs.pediy.com/thread-250490.htm" target="_blank" rel="noopener">开源Hook框架-epic-实现浅析</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python设置Host代理]]></title>
      <url>/2022/02/16/python-%E8%AE%BE%E7%BD%AEHost%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们在客户端沙箱环境测试接口的时候，一般都是通过Charles设置，</p>
<blockquote>
<p>Host Name:testcapp.com<br>Address: 10.167.192.17 </p>
</blockquote>
<p>那如果我们要是在通过Python脚本进行接口请求，在沙箱环境下，设置Host时要如何做呢？看下面代码设置：</p>
<a id="more"></a>
<h2 id="配置Host"><a href="#配置Host" class="headerlink" title="配置Host"></a>配置Host</h2><p>上代码：</p>
<p>配置Host，沙箱环境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dataUrl = &quot;https://10.167.192.17/tst/positions/ful/dat&quot;</span><br><span class="line">req = urllib2.Request(dataUrl)</span><br><span class="line">req.add_header(&apos;Host&apos;, &apos;testcapp.com&apos;)</span><br><span class="line">req.add_header(&apos;version&apos;, versionName)</span><br><span class="line">resp = urllib2.urlopen(req)</span><br></pre></td></tr></table></figure>

<p>正式线上环境：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataUrl = &quot;https://testcapp.com/tst/positions/ful/dat&quot;</span><br><span class="line">req = urllib2.Request(dataUrl)</span><br><span class="line">req.add_header(&apos;version&apos;, versionName)</span><br><span class="line">resp = urllib2.urlopen(req)</span><br></pre></td></tr></table></figure>

<p><strong>注意：Host一定要是正式线上的域名，而不是Ip地址，下边设置是不对的,我们习惯了Charles写法，如果按下面设置，header中Host的key就错了，语法就不对：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dataUrl = &quot;https://testcapp.com/tst/positions/ful/dat&quot;</span><br><span class="line">req = urllib2.Request(dataUrl)</span><br><span class="line">req.add_header(&apos;testcapp.com&apos;, &apos;10.167.192.17&apos;)</span><br><span class="line">req.add_header(&apos;version&apos;, versionName)</span><br><span class="line">resp = urllib2.urlopen(req)</span><br><span class="line">req.add_header(&apos;testcapp.com&apos;, &apos;testcapp.com&apos;)</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Pngquant-图片压缩]]></title>
      <url>/2021/12/27/Pngquant-%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</url>
      <content type="html"><![CDATA[<h2 id="pngquant"><a href="#pngquant" class="headerlink" title="pngquant"></a>pngquant</h2><p>pngquant是一个命令行实用程序，也是一个用于有损压缩PNG图像的库。转换后可以显著减小文件大小（通常高达70%），并保持完全的alpha透明度。生成的图像与所有web浏览器和操作系统兼容。具有以下特点：</p>
<ul>
<li><p>结合矢量化运算的高质量的调色板。</p>
</li>
<li><p>独特的自适应抖动算法。</p>
</li>
<li><p>跨平台： windows ， Mac OS X ， Linux 。 </p>
</li>
<li><p>可以与shell脚本、GUI和服务器端软件轻松地集成。</p>
</li>
<li><p>快速模式处理大量图像。</p>
<a id="more"></a>
<blockquote>
<p>Options：请参阅 pngquant -h 完整的选项列表。</p>
</blockquote>
</li>
<li><p>–ext new.png<br>为输出文件名设置自定义扩展。默认-or8.png或被-fs8.png使用。</p>
</li>
<li><p>–quality min-max<br>指示pngquant使用达到或超过最高质量所需的最少量的颜色。如果转换结果的质量低于最低质量，图像将不会被保存（如果输出到标准输出，则会输出24位原始图像），pngquant并将以状态码99退出。<br>最小值和最大值是范围0（最差）到100（完美）的数字，类似于JPEG。<br>pngquant –quality=65-80 image.png</p>
</li>
<li><p>–speed N， -sN<br>速度/品质取舍从1（蛮力）到10（最快）。默认值为3. Speed 10的质量下降了5％，但比默认的速度快了8倍。</p>
</li>
<li><p>–iebug<br>IE6的解决方法，只显示完全不透明的像素。pngquant会使几乎不透明的像素完全不透明，并会避免创建新的透明颜色。</p>
</li>
<li><p>–version<br>将版本信息打印到标准输出。</p>
</li>
<li><p>-<br>-从stdin读取图像并将结果发送到stdout。</p>
</li>
<li><p>–<br>停止参数的处理。这允许使用以开头的文件名-。如果您pngquant在脚本中使用，建议在文件名前加上：<br>pngquant $OPTIONS – “$FILE”</p>
</li>
</ul>
<p>官网地址:<a href="https://pngquant.org/" target="_blank" rel="noopener">https://pngquant.org/</a></p>
<h2 id="Mac端安装使用"><a href="#Mac端安装使用" class="headerlink" title="Mac端安装使用"></a>Mac端安装使用</h2><ul>
<li><p>1.官网下载pngquant,解压到pngquant目录；<br><img src="http://nunu03.github.io/2021/12/27/Pngquant-%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/pngdown.jpg" alt></p>
</li>
<li><p>2.拷贝图片到pngquant目录；  </p>
</li>
<li><p>3.通过pngquant命令压缩图片：<br>Pro:pngquant chenyulong01$ ./pngquant img.png；</p>
</li>
<li><p>4.通过pngquant命令压缩多个图片：<br>Pro:pngquant chenyulong01$ ./pngquant ./img/*.png</p>
</li>
<li><p>5.将压缩后的-fs8.png移到新文件夹：<br>Pro:pngquant chenyulong01$ mkdir ./img/compress/</p>
<p>Pro:pngquant chenyulong01$ mv ./img/*-fs8.png ./img/compress/</p>
</li>
<li><p>6.目录结构如下：</p>
<img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/pngcompress.jpg" width="70%" height="70%">

</li>
</ul>
<h2 id="压缩前后文件对比"><a href="#压缩前后文件对比" class="headerlink" title="压缩前后文件对比"></a>压缩前后文件对比</h2><p>先看下效果图：<br><img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/compress.jpg" width="70%" height="70%"><br>大小：从398kb降到了140kb，减少了258kb，优化率达到64.8%<br>文件类型：从24位png，转换成了8位png。</p>
<blockquote>
<p>PNG图片主要有三个类型，分别为 PNG-8，PNG-24，PNG-32：</p>
</blockquote>
<p>PNG 8：PNG 8中的8，其实指的是8bits，相当于用2^8（2的8次方）大小来存储一张图片的颜色种类，2^8等于256，也就是说PNG 8能存储256种颜色，一张图片如果颜色种类很少，将它设置成PNG 8得图片类型是非常适合的。</p>
<p>PNG 24：PNG 24中的24，相当于3乘以8 等于 24，就是用三个8bits分别去表示 R（红）、G（绿）、B（蓝）。R(0-255),G(0-255),B(0-255)，可以表达256乘以256乘以256=16777216种颜色的图片，这样PNG 24就能比PNG 8表示色彩更丰富的图片。但是所占用的空间相对就更大了。</p>
<p>PNG 32：PNG 32中的32，相当于PNG 24 加上 8bits的透明颜色通道，就相当于R（红）、G（绿）、B（蓝）、A（透明）。R(0-255),G(0-255),B(0-255),A(0-255)。比PNG 24多了一个A（透明），也就是说PNG 32能表示跟PNG 24一样多的色彩，并且还支持256种透明的颜色，能表示更加丰富的图片颜色类型。</p>
<p><strong>从file命令来看：</strong><br>24位PNG（每通道8位 - 无alpha通道）</p>
<blockquote>
<p>$ file img2.png<br>img2.png: PNG image data, 540 x 1170, 8-bit/color RGB, non-interlaced</p>
</blockquote>
<p>8位PNG（256色）：</p>
<blockquote>
<p>$ file img2-fs8.png<br>img2-fs8.png: PNG image data, 540 x 1170, 8-bit colormap, non-interlaced</p>
</blockquote>
<p><strong>从png数据块来看：</strong><br><img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/compare-header.jpg" width="70%" height="70%"></p>
<img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/png_pre.png" width="70%" height="70%">

<img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/png_pre.png" width="70%" height="70%">
8950 4e47 0d0a 1a0a：这个是PNG图片的头，所有的PNG图片的头都是这一串编码，图片软件通过这串编码判定这个文件是不是PNG格式的图片。
0000 000d：iHDR数据块的长度(转十进制13)。
4948 4452：数据块的type,为IHDR，之后紧跟着是data。
0000 021c：图片宽度(转十进制540)。
0000 0492：图片高度(转十进制1170)。
08:图像深度。
02/03:颜色类型。
00:压缩算法。
00:滤波器方法。
00:非隔行扫描方法。
75 f6a0:循环冗余检测。
[详细参数看这里](https://www.cnblogs.com/ECJTUACM-873284962/p/8986391.html)
所有我们可以得到png数据块结构：
<img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/pngchunk.drawio.png" width="70%" height="70%">

<h2 id="Png图片类型"><a href="#Png图片类型" class="headerlink" title="Png图片类型"></a>Png图片类型</h2><img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/possible-color-type.jpg" width="70%" height="70%">
* 1.Truecolour with alpha:带alpha的Truecolour,每个像素由四个样本组成：红色、绿色、蓝色和alpha。
* 2.Greyscale with alpha:灰度带alpha,每个像素由两个样本组成：灰度和alpha。
* 3.Truecolour:真彩色,每个像素由三个样本组成：红色、绿色和蓝色。alpha通道可以由单个像素值表示。匹配的像素是完全透明的，其他所有像素都是完全不透明的。如果alpha通道没有以这种方式表示，则所有像素都是完全不透明的。
* 4.Greyscale:灰度,每个像素由一个样本组成：灰色。与前一种情况一样，alpha通道可以由单个像素值表示。如果alpha通道没有以这种方式表示，则所有像素都是完全不透明的。
* 5.Indexed-colour: 索引颜色,每个像素都包含一个调色板索引（以及相关的alpha值表，如果存在）。

<p>每个像素的格式取决于PNG图像类型和位深度。对于非索引颜色的PNG图像类型，位深度指定每个样本的位数，而不是每个像素的总位数。对于索引彩色图像，位深度指定每个调色板索引中的位数，而不是调色板或alpha表中颜色的采样深度。在像素内，根据PNG图像类型，采样按以下顺序显示。</p>
<ul>
<li>a.带alpha的真彩色：红、绿、蓝、alpha。</li>
<li>b.带alpha的灰度：灰色，alpha。</li>
<li>c.真彩色：红、绿、蓝。</li>
<li>d.灰度：灰色。</li>
<li>e.索引颜色：调色板索引。<h2 id="索引彩色图像"><a href="#索引彩色图像" class="headerlink" title="索引彩色图像"></a>索引彩色图像</h2>如果不同像素值的数量为256或更少，且RGB采样深度不大于8，且alpha通道不存在或正好为8位深，或者每个像素是完全透明或完全不透明的，则称为索引颜色的替代表示可能更有效地进行编码。每个像素都被调色板中的索引替换。调色板是一个条目列表，每个条目包含三个8位样本（红色、绿色、蓝色）。如果存在alpha通道，则还存在8位alpha采样的并行表。<img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/png-indexing-color.jpg" width="70%" height="70%">
即使PNG图像没有索引颜色，也可以构建一个或多个建议调色板，以帮助只能显示有限数量颜色的观众。
对于索引彩色图像，编码器可以重新排列调色板，以便将具有最大alpha值的表格条目分组到最后。在这种情况下，表格可以用不包含这些条目的缩写形式进行编码。

</li>
</ul>
<h2 id="PNG图片IDAT数据块图例"><a href="#PNG图片IDAT数据块图例" class="headerlink" title="PNG图片IDAT数据块图例"></a>PNG图片IDAT数据块图例</h2><h3 id="目标图："><a href="#目标图：" class="headerlink" title="目标图："></a>目标图：</h3><center>
<img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/png-target.jpg" width="60%" height="60%">

<p>$ $<br>target.jpg</p>
</center>

<h3 id="真彩-7x7-IDAT数据块"><a href="#真彩-7x7-IDAT数据块" class="headerlink" title="真彩 7x7 IDAT数据块"></a>真彩 7x7 IDAT数据块</h3><img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/png-rgb.jpg" width="68%" height="68%">

<h3 id="索引-7x7-IDAT数据块"><a href="#索引-7x7-IDAT数据块" class="headerlink" title="索引 7x7 IDAT数据块"></a>索引 7x7 IDAT数据块</h3><img src="http://nunu03.github.io/2021/12/27/Pngquant-图片压缩/png-indexcolor.jpg" width="70%" height="70%">

<h2 id="Png数据块表"><a href="#Png数据块表" class="headerlink" title="Png数据块表"></a>Png数据块表</h2><table bordercolor="#000000" cellspacing="2" width="532" border="1" id="table9">
              <tbody><tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2"><b>
                </b></font><p align="center"><font lang="ZH-CN" size="2"><b>数据块符号</b></font></p></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2"><b>
                </b></font><p align="center"><font lang="ZH-CN" size="2"><b>数据块名称</b></font></p></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2"><b>
                </b></font><p align="center"><font lang="ZH-CN" size="2"><b>多数据块</b></font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2"><b>
                </b></font><p align="center"><font lang="ZH-CN" size="2"><b>可选否</b></font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2"><b>
                </b></font><p align="center"><font lang="ZH-CN" size="2"><b>位置限制</b></font></p></td>
              </tr>
              <tr>
                <td valign="top" width="14%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">IHDR</font></td>
                <td valign="top" width="30%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">文件头数据块</font></td>
                <td valign="top" width="13%" bgcolor="#ffffff" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="32%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">第一块</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">cHRM</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                基色和白色点数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">
                在PLTE和IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">gAMA</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">图像γ数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">
                在PLTE和IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">sBIT</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                样本有效位数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">
                在PLTE和IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">PLTE</font></td>
                <td valign="top" width="30%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">调色板数据块</font></td>
                <td valign="top" width="13%" bgcolor="#ffffff" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">在IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">bKGD</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">背景颜色数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">
                在PLTE之后IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">hIST</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                图像直方图数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">
                在PLTE之后IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">tRNS</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">图像透明数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">
                在PLTE之后IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">oFFs</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                (专用公共数据块)</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">在IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">pHYs</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                物理像素尺寸数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">在IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">sCAL</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                (专用公共数据块)</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">在IDAT之前</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">IDAT</font></td>
                <td valign="top" width="30%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">图像数据块</font></td>
                <td valign="top" width="13%" bgcolor="#ffffff" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="10%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="32%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">与其他IDAT连续</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">tIME</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                图像最后修改时间数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">无限制</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">tEXt</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">文本信息数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">无限制</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">zTXt</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">压缩文本数据块</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">无限制</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">fRAc</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                (专用公共数据块)</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">无限制</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">gIFg</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                (专用公共数据块)</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">无限制</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">gIFt</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                (专用公共数据块)</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">无限制</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%"><font lang="ZH-CN" size="2">gIFx</font></td>
                <td valign="top" width="30%"><font lang="ZH-CN" size="2">
                (专用公共数据块)</font></td>
                <td valign="top" width="13%" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="10%"><font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">是</font></p></td>
                <td valign="top" width="32%"><font lang="ZH-CN" size="2">无限制</font></td>
              </tr>
              <tr>
                <td valign="top" width="14%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">IEND</font></td>
                <td valign="top" width="30%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">图像结束数据</font></td>
                <td valign="top" width="13%" bgcolor="#ffffff" colspan="3">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="10%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">
                </font><p align="center"><font lang="ZH-CN" size="2">否</font></p></td>
                <td valign="top" width="32%" bgcolor="#ffffff">
                <font lang="ZH-CN" size="2">最后一个数据块</font></td>
              </tr>
            </tbody></table>

<h2 id="安卓图片压缩"><a href="#安卓图片压缩" class="headerlink" title="安卓图片压缩"></a>安卓图片压缩</h2><p>首先在Android Gradle Plugin版本为不低于3.3的情况下，有一个接口BaseVariantImpl.allRawAndroidResources.files可以在编译期间获取到所有的资源文件。所有包含jar，aar，module等等。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public interface BaseVariant &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Returns file collection containing all raw Android resources, including the ones from</span><br><span class="line">     * transitive dependencies.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;&lt;strong&gt;This is an incubating API, and it can be changed or removed without</span><br><span class="line">     * notice.&lt;/strong&gt;</span><br><span class="line">     */</span><br><span class="line">    //返回包含所有原始Android资源的文件集合，包括来自传递依赖项的资源</span><br><span class="line">    //这是一个正在孵化的API，可以更改或删除它，恕不另行通知</span><br><span class="line">    @Incubating</span><br><span class="line">    @NonNull</span><br><span class="line">    FileCollection getAllRawAndroidResources();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个前提下，可以结合pngquant，编写一个无侵入性的图片压缩插件，可以在构建过程中对所有图片进行有配置的压缩，从而减少包对体积大小。具体实现可以看抖音的开源McImage插件介绍<a href="https://github.com/smallSohoSolo/McImage" target="_blank" rel="noopener">https://github.com/smallSohoSolo/McImage</a>：</p>
<blockquote>
<p>优势：McImage在编译期间 hook 资源，采用开源的算法 pngquant/guetzli 进行压缩，支持 webp 压缩。与 tinypng 等一些已知的方案相比，存在以下优势：</p>
</blockquote>
<ul>
<li>McImage 现支持 webp 压缩，压缩比高于 tinypng，不过 Android 上 webp 需要做兼容，下文会详细介绍；</li>
<li>tinypng 不开源，每个账号每个月只能免费压缩 500 张；McImage 使用的压缩算法都是基于开源算法；</li>
<li>McImage 不仅可以压缩 module 中的图片，还能压缩 jar 和 aar 中的图片；</li>
<li>McImage 支持压缩算法扩展，有更优的压缩算法选择时扩展方便；</li>
<li>和行业里其他方案相比，McImage 还能够支持压缩包含透明度的 webp 图片，并且兼容了 aapt2 对资源的 hook。</li>
</ul>
<blockquote>
<p>收益:McImage 支持两种优化方式，但是两种优化方式不可同时使用:</p>
</blockquote>
<ul>
<li>Compress，pngquant 压缩 png 图片，guetzli 压缩 jpg 图片；</li>
<li>ConvertWebp，webp 压缩 png\png 图片。</li>
<li>Webp 的压缩比要高于 pngquant、guetzli，推荐使用 ConvertWebp 压缩方式。</li>
</ul>
<blockquote>
<p>功能：除了压缩、优化图片，McImage 还提供了以下功能：</p>
</blockquote>
<ul>
<li>大图检测。阈值可在 McImageConfig 里进行设置，方便大图复盘优化包大小；也支持编译阶段检测，检测到大图直接 block 编译，可及时发现大图提交；</li>
<li>压缩算法方便扩展。如果想接入其他压缩算法，只需要继承 AbstractTask，实现 ITask 接口中的 work 方法即可；</li>
<li>支持多线程压缩。把所有 task 的执行放入线程池中执行，大大缩短了 mcimage 的执行时间；</li>
<li>增加了图片缓存 cache，进一步缩短打包时间。在开启多线程+图片缓存的情况下，全部命中缓存的情况下，整个 mcimage 的过程不到 10s；缓存路径可配置；</li>
<li>压缩质量可配置，满足不同的压缩质量需求，缓存文件也会按照不同的压缩质量进行保存和命中；</li>
<li>图片白名单功能；</li>
<li>debug打包模式是否开启设置；</li>
</ul>
<blockquote>
<p>配置文件代码：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">McImageConfig &#123;</span><br><span class="line">    isCheckSize true //Whether to detect image size，default true</span><br><span class="line">    optimizeType &quot;Compress&quot; //Optimize Type，&quot;ConvertWebp&quot; or &quot;Compress&quot;，default &quot;Compress&quot;, &quot;CompressWebp&quot; is a better compression ratio but it don&apos;t support api &lt; 18</span><br><span class="line">    maxSize 1*1024*1024 //big image size threshold，default 1MB</span><br><span class="line">    enableWhenDebug false //switch in debug build，default true</span><br><span class="line">    isCheckPixels true // Whether to detect image pixels of width and height，default true</span><br><span class="line">    maxWidth 1000 //default 1000</span><br><span class="line">    maxHeight 1000 //default 1000</span><br><span class="line">    whiteList = [ //do not do any optimization for the images who in the list </span><br><span class="line">              &quot;icon_launcher.png&quot;</span><br><span class="line">    ]</span><br><span class="line">    mctoolsDir &quot;$rootDir&quot;</span><br><span class="line">    isSupportAlphaWebp false  //Whether support convert the Image with Alpha chanel to Webp，default false, the images with alpha chanels will be compressed.if config true, its need api level &gt;=18 or do some compatible measures </span><br><span class="line">    multiThread true  //Whether open multi-thread processing，default true</span><br><span class="line">    bigImageWhiteList = [] //do not detect big size or large pixels for the images who in the list</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.codenong.com/cs105675686/" target="_blank" rel="noopener">图片压缩原理</a><br><a href="http://www.360doc.com/content/11/0428/12/1016783_112894280.shtml" target="_blank" rel="noopener">PNG文件结构分析</a><br><a href="https://www.w3.org/TR/PNG/" target="_blank" rel="noopener">PNG文件格式白皮书</a><br><a href="https://segmentfault.com/a/1190000020864056" target="_blank" rel="noopener">手动生成一张PNG图片</a><br><a href="https://dev.gameres.com/Program/Visual/Other/PNGFormat.htm" target="_blank" rel="noopener">PNG格式</a></p>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle 4.0 jar包assets资源丢失原因分析]]></title>
      <url>/2021/11/15/Gradle-4-0-jar%E5%8C%85assets%E8%B5%84%E6%BA%90%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在gradle升级到4.0.2时遇到了release包构建成功，并且在构建过程中无异常提示，但是百度地图BaiduLBS_Android.jar中assets下文件丢失，导致地图相应功能丢失，app崩溃情况。在解决问题的过程中，耗费时间较长，一度以为是混淆问题，因为debug包没问题，并且release在打开R8的情况下，也可以解决，gradle升级到4.1也可以解决。但是具体原因是什么呢？到底是混淆问题，还是其他原因，带着这个问题我们分析下第三方jar包assets下资源文件是如何打包到apk中的。</p>
<a id="more"></a>
<h2 id="总流程"><a href="#总流程" class="headerlink" title="总流程"></a>总流程</h2><p>第三方jar包assets下资源文件构建总流程如下：<br><img src="http://nunu03.github.io/2021/11/15/Gradle-4-0-jar%E5%8C%85assets%E8%B5%84%E6%BA%90%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/jar-assets-general-flow-chart.jpg" alt><br>主要是分为以下几步：</p>
<ol>
<li>jar包中的assets下资源文件在生成aar后，不是在aar的assets目录下，而是在classed.jar的assets目录下，同时aar中libs下的jar包，不在包含assets目录,只有源码目录文件。</li>
<li>在构建过程中，通过mergeReleaseJavaResource合并java资源Task解析classes.jar并生成out.jar文件，out.jar中包含所有的非res文件，以及源码目录非claaes文件。例如：out/com/baidu/pano/platform/res/indoor_in.png </li>
<li>在minifyReleaseWithProguard的Task中，out.jar会被解析重新生成一个minified.jar文件，这个minified.jar文件不仅包含了out.jar内容，也包含了所有的classes文件。</li>
<li>在最后打包packageRelease的Task中，读取minified.jar文件中的assets目录文件，直接add到apk中。</li>
</ol>
<h2 id="PackageRelease-分析"><a href="#PackageRelease-分析" class="headerlink" title="PackageRelease 分析"></a>PackageRelease 分析</h2><p>先看下如下构建时序图：<br><img src="http://nunu03.github.io/2021/11/15/Gradle-4-0-jar%E5%8C%85assets%E8%B5%84%E6%BA%90%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/pack-release-time.jpg" alt></p>
<ol>
<li>run:主要读取文件信息，manifest、dex、javaRes、assets、res、so、……等等。</li>
<li>updateFiles:更新所有存档中所有新的、更改的和删除的文件，也就是dex、android res、java res、assets、so等等。</li>
<li>addFiles:写入andoid 资源文件，和java资源文件。</li>
</ol>
<p>在最后一步我们看到有两种文件处理方式：那么4.0版本我们用的是ApkZFileCreator，4.1版本我们用的是ApkFlinger。我们还可以通过设置android.useNewApkCreator配置决定使用哪个打包工具，值为true用ApkFlinger，否则用ApkZFileCreator，并且android.useNewApkCreator默认值为true，那么我们在4.0版本应该使用的是否则用ApkZFileCreator，然后我们跟踪一下4.0源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (!apkFormatIsFile || !debuggableBuild) &#123;</span><br><span class="line">    mApkCreatorType = ApkCreatorType.APK_Z_FILE_CREATOR;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    mApkCreatorType = apkCreatorType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以发现，无论我们如何，release构建都是用的ApkZFileCreator，debug用的是ApkFlinger。然后我们在看一下4.1源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (!apkFormatIsFile) &#123;</span><br><span class="line">    mApkCreatorType = ApkCreatorType.APK_Z_FILE_CREATOR;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    mApkCreatorType = apkCreatorType;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以发现，无论我们如何，release构建都是用的ApkFlinger。</p>
<p>通过以上比较，和通过4.1进行构建打包，发现4.1是正常的，所以我们定位到4.0构建打包jar下assets目录文件和使用ApkZFileCreator文件有关。</p>
<h2 id="ApkZFileCreator分析"><a href="#ApkZFileCreator分析" class="headerlink" title="ApkZFileCreator分析"></a>ApkZFileCreator分析</h2><p>下面的源码片段展示了写入的主要逻辑，分为如下 3 步：</p>
<ol>
<li>创建 ZFile 对象，读取 zip 文件将 central directory 中的每项加入到 entries 中;</li>
<li>遍历 ZFile 中的 entries，将压缩的资源文件合并到 APK 文件中;</li>
<li>遍历 ZFile 中的 entries，将非压缩的资源文件写入到 APK 文件中;</li>
</ol>
<p>ApkZFileCreator:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public void writeZip(File zip, @Nullable Function&lt;String, String&gt; transform, @Nullable Predicate&lt;String&gt; isIgnored) throws IOException &#123;</span><br><span class="line">    Closer closer = Closer.create();</span><br><span class="line">    try &#123;</span><br><span class="line">      ZFile toMerge = closer.register(ZFile.openReadWrite(zip));</span><br><span class="line">    </span><br><span class="line">      Predicate&lt;String&gt; ignorePredicate;</span><br><span class="line">      if (isIgnored == null) &#123;</span><br><span class="line">        ignorePredicate = s -&gt; false;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        ignorePredicate = isIgnored;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">      // Files that *must* be uncompressed in the result should not be merged and should be</span><br><span class="line">      // added after. This is just very slightly less efficient than ignoring just the ones</span><br><span class="line">      // that were compressed and must be uncompressed, but it is a lot simpler :)</span><br><span class="line">      Predicate&lt;String&gt; noMergePredicate =</span><br><span class="line">          v -&gt; ignorePredicate.apply(v) || noCompressPredicate.apply(v);</span><br><span class="line">    </span><br><span class="line">      this.zip.mergeFrom(toMerge, noMergePredicate);</span><br><span class="line">    </span><br><span class="line">      for (StoredEntry toMergeEntry : toMerge.entries()) &#123;</span><br><span class="line">        String path = toMergeEntry.getCentralDirectoryHeader().getName();</span><br><span class="line">        if (noCompressPredicate.apply(path) &amp;&amp; !ignorePredicate.apply(path)) &#123;</span><br><span class="line">          // This entry *must* be uncompressed so it was ignored in the merge and should</span><br><span class="line">          // now be added to the apk.</span><br><span class="line">          try (InputStream ignoredData = toMergeEntry.open()) &#123;</span><br><span class="line">            this.zip.add(path, ignoredData, false);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">      throw closer.rethrow(t);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      closer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ZFile.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private void readData() throws IOException &#123;</span><br><span class="line">  // ...</span><br><span class="line">  readEocd();</span><br><span class="line">  readCentralDirectory();</span><br><span class="line">  // ...</span><br><span class="line">  if (directoryEntry != null) &#123;</span><br><span class="line"> // ...</span><br><span class="line"> for (StoredEntry entry : directory.getEntries().values()) &#123;</span><br><span class="line">   // ...</span><br><span class="line">   entries.put(entry.getCentralDirectoryHeader().getName(), mapEntry);</span><br><span class="line">   //...</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> directoryStartOffset = directoryEntry.getStart();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line"> // ...</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void mergeFrom(ZFile src, Predicate&lt;String&gt; ignoreFilter) throws IOException &#123;</span><br><span class="line">  // ...</span><br><span class="line">  for (StoredEntry fromEntry : src.entries()) &#123;</span><br><span class="line"> if (ignoreFilter.apply(fromEntry.getCentralDirectoryHeader().getName())) &#123;</span><br><span class="line">   continue;</span><br><span class="line"> &#125;</span><br><span class="line"> // ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在调试过程中发现读取minified.jar文件创建的ZFile中的entries中文件读取不全，没有 Java 资源文件，而在前面 IncrementalSplitterRunnable.execute 中调 PackageAndroidArtifact.getChangedJavaResources获取改变的Java资源文件时，使用ZipCentralDirectory能正常读取到Java资源文件，由此说明ZFile存在缺陷。图示如下：<br>ZipCentralDirectory读取minified.jar:<br><img src="http://nunu03.github.io/2021/11/15/Gradle-4-0-jar%E5%8C%85assets%E8%B5%84%E6%BA%90%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/zifcenter-minified.jpg" alt><br>ZFile读取minified.jar:<br><img src="http://nunu03.github.io/2021/11/15/Gradle-4-0-jar%E5%8C%85assets%E8%B5%84%E6%BA%90%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/zif-minified.jpg" alt><br><strong>ZipCentralDirectory读取minified.jar:获取changeJavaResources文件数是101377</strong>，</p>
<p><strong>ZFile读取minified.jar:获取entries文件数是35841</strong>，</p>
<p>两种方式读取的文件数完全不一样。</p>
<p>而且ZFile注释中所述,它不是通用的 zip 工具类，对 zip 格式和不支持的特性有严格的要求；它在某些特殊条件下存在限制，可能会出现读取文件缺失等问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* &lt;p&gt;Because &#123;@code ZFile&#125; was designed to be used in a build system and not as general-purpose zip</span><br><span class="line"> * utility, it is very strict (and unforgiving) about the zip format and unsupported features.</span><br></pre></td></tr></table></figure>

<p>那么为啥开启R8就没问题了呢？看一下R8的流程图：可以看到开启R8后，生成的java 资源文件是shrunkJavaRes.jar，这个shrunkJavaRes.jar文件和minified.jar相比仅仅包含了out.jar内容，不包含classes文件。<br><img src="http://nunu03.github.io/2021/11/15/Gradle-4-0-jar%E5%8C%85assets%E8%B5%84%E6%BA%90%E4%B8%A2%E5%A4%B1%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/jar-assets-general-flow-chart-r8.jpg" alt></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>4.0版本构建release包不管如何设置打包方式，都是执行的ApkZFileCreator;</li>
<li>4.0版本构建debug包，执行的新打包方式ApkFlinger;</li>
<li>4.1版本构建release包，可以通过android.useNewApkCreator设置打包方式（ApkZFileCreator/ApkFlinger），默认为true，执行ApkFlinger;</li>
<li>4.0版本构建release包虽然打包方式是ApkZFileCreator，但是经过了R8混淆，生成的java资源文件shrunkJavaRes.jar，并且此文件和minified.jar相比仅仅包含了out.jar内容，不包含classes文件;</li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://segmentfault.com/a/1190000040612479" target="_blank" rel="noopener">AGP 升级之旅</a></p>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android代码混淆语法]]></title>
      <url>/2021/10/08/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="混淆设置参数"><a href="#混淆设置参数" class="headerlink" title="混淆设置参数"></a>混淆设置参数</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-optimizationpasses 5                       # 代码混淆的压缩比例，值介于0-7，默认5</span><br><span class="line">-verbose                                    # 混淆时记录日志</span><br><span class="line">-dontoptimize                               # 不优化输入的类文件</span><br><span class="line">-dontshrink                                 # 关闭压缩</span><br><span class="line">-dontpreverify                              # 关闭预校验(作用于Java平台，Android不需要，去掉可加快混淆)</span><br><span class="line">-dontoptimize                               # 关闭代码优化</span><br><span class="line">-dontobfuscate                              # 关闭混淆</span><br><span class="line">-ignorewarnings                             # 忽略警告</span><br><span class="line">-dontwarn com.squareup.okhttp.**            # 指定类不输出警告信息</span><br><span class="line">-dontusemixedcaseclassnames                 # 混淆后类型都为小写</span><br><span class="line">-dontskipnonpubliclibraryclasses            # 不跳过非公共的库的类</span><br><span class="line">-printmapping mapping.txt                   # 生成原类名与混淆后类名的映射文件mapping.txt</span><br><span class="line">-useuniqueclassmembernames                  # 把混淆类中的方法名也混淆</span><br><span class="line">-allowaccessmodification                    # 优化时允许访问并修改有修饰符的类及类的成员</span><br><span class="line">-renamesourcefileattribute SourceFile       # 将源码中有意义的类名转换成SourceFile，用于混淆具体崩溃代码</span><br><span class="line">-keepattributes SourceFile,LineNumberTable  # 保留行号</span><br><span class="line">-keepattributes *Annotation*,InnerClasses,Signature,EnclosingMethod # 避免混淆注解、内部类、泛型、匿名类</span><br><span class="line">-optimizations !code/simplification/cast,!field/ ,!class/merging/   # 指定混淆时采用的算法</span><br></pre></td></tr></table></figure>

<h2 id="保持不被混淆的设置"><a href="#保持不被混淆的设置" class="headerlink" title="保持不被混淆的设置"></a>保持不被混淆的设置</h2><h3 id="保持命令"><a href="#保持命令" class="headerlink" title="保持命令"></a>保持命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-keep                           # 防止类和类成员被移除或被混淆；</span><br><span class="line">-keepnames                      # 防止类和类成员被混淆；</span><br><span class="line">-keepclassmembers	            # 防止类成员被移除或被混淆；</span><br><span class="line">-keepclassmembernames           # 防止类成员被混淆；</span><br><span class="line">-keepclasseswithmembers         # 防止拥有该成员的类和类成员被移除或被混淆；</span><br><span class="line">-keepclasseswithmembernames     # 防止拥有该成员的类和类成员被混淆；</span><br></pre></td></tr></table></figure>

<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">具体的类</span><br><span class="line">访问修饰符 → public、private、protected</span><br><span class="line">通配符(*) → 匹配任意长度字符，但不包含包名分隔符(.)</span><br><span class="line">通配符(**) → 匹配任意长度字符，且包含包名分隔符(.)</span><br><span class="line">extends → 匹配实现了某个父类的子类</span><br><span class="line">implements → 匹配实现了某接口的类</span><br><span class="line">$ → 内部类</span><br></pre></td></tr></table></figure>

<h3 id="成员"><a href="#成员" class="headerlink" title="成员"></a>成员</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">匹配所有构造器 → &lt;init&gt;</span><br><span class="line">匹配所有域 → &lt;field&gt;</span><br><span class="line">匹配所有方法 → &lt;methods&gt;</span><br><span class="line">访问修饰符 → public、private、protected</span><br><span class="line">除了 * 和 ** 通配符外，还支持 *** 通配符，匹配任意参数类型</span><br><span class="line">... → 匹配任意长度的任意类型参数，如void test(...)可以匹配不同参数个数的test方法</span><br></pre></td></tr></table></figure>

<h3 id="常用自定义混淆规则范例"><a href="#常用自定义混淆规则范例" class="headerlink" title="常用自定义混淆规则范例"></a>常用自定义混淆规则范例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"># 不混淆某个类的类名，及类中的内容</span><br><span class="line">-keep class cn.coderpig.myapp.example.Test &#123; *; &#125;</span><br><span class="line"></span><br><span class="line"># 不混淆指定包名下的类名，不包括子包下的类名</span><br><span class="line">-keep class cn.coderpig.myapp*</span><br><span class="line"></span><br><span class="line"># 不混淆指定包名下的类名，及类里的内容</span><br><span class="line">-keep class cn.coderpig.myapp* &#123;*;&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆指定包名下的类名，包括子包下的类名</span><br><span class="line">-keep class cn.coderpig.myapp**</span><br><span class="line"></span><br><span class="line"># 不混淆某个类的子类</span><br><span class="line">-keep public class * extends cn.coderpig.myapp.base.BaseFragment</span><br><span class="line"></span><br><span class="line"># 不混淆实现了某个接口的类</span><br><span class="line">-keep class * implements cn.coderpig.myapp.dao.DaoImp</span><br><span class="line"></span><br><span class="line"># 不混淆类名中包含了&quot;entity&quot;的类，及类中内容</span><br><span class="line">-keep class **.*entity*.** &#123;*;&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆内部类中的所有public内容</span><br><span class="line">-keep class cn.coderpig.myapp.widget.CustomView$OnClickInterface &#123;</span><br><span class="line">    public *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆指定类的所有方法</span><br><span class="line">-keep cn.coderpig.myapp.example.Test &#123;</span><br><span class="line">    public &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆指定类的所有字段</span><br><span class="line">-keep cn.coderpig.myapp.example.Test &#123;</span><br><span class="line">    public &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆指定类的所有构造方法</span><br><span class="line">-keep cn.coderpig.myapp.example.Test &#123;</span><br><span class="line">    public &lt;init&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆指定参数作为形参的方法</span><br><span class="line">-keep cn.coderpig.myapp.example.Test &#123;</span><br><span class="line">    public &lt;methods&gt;(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆类的特定方法</span><br><span class="line">-keep cn.coderpig.myapp.example.Test &#123;</span><br><span class="line">    public test(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆native方法</span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆枚举类</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">  public static **[] values();</span><br><span class="line">  public static ** valueOf(java.lang.String);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#不混淆资源类</span><br><span class="line">-keepclassmembers class **.R$* &#123;</span><br><span class="line">    public static &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆自定义控件</span><br><span class="line">-keep public class * entends android.view.View &#123;</span><br><span class="line">    *** get*();</span><br><span class="line">    void set*(***);</span><br><span class="line">    public &lt;init&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆实现了Serializable接口的类成员，此处只是演示，也可以直接 *;</span><br><span class="line">-keepclassmembers class * implements java.io.Serializable &#123;</span><br><span class="line">    static final long serialVersionUID;</span><br><span class="line">    private static final java.io.ObjectStreamField[] serialPersistentFields;</span><br><span class="line">    private void writeObject(java.io.ObjectOutputStream);</span><br><span class="line">    private void readObject(java.io.ObjectInputStream);</span><br><span class="line">    java.lang.Object writeReplace();</span><br><span class="line">    java.lang.Object readResolve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 不混淆实现了parcelable接口的类成员</span><br><span class="line">-keep class * implements android.os.Parcelable &#123;</span><br><span class="line">    public static final android.os.Parcelable$Creator *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 注意事项：</span><br><span class="line">#</span><br><span class="line"># ① jni方法不可混淆，方法名需与native方法保持一致；</span><br><span class="line"># ② 反射用到的类不混淆，否则反射可能出问题；</span><br><span class="line"># ③ 四大组件、Application子类、Framework层下的类、自定义的View默认不会被混淆，无需另外配置；</span><br><span class="line"># ④ WebView的JS调用接口方法不可混淆；</span><br><span class="line"># ⑤ 注解相关的类不混淆；</span><br><span class="line"># ⑥ GSON、Fastjson等解析的Bean数据类不可混淆；</span><br><span class="line"># ⑦ 枚举enum类中的values和valuesof这两个方法不可混淆(反射调用)；</span><br><span class="line"># ⑧ 继承Parceable和Serializable等可序列化的类不可混淆；</span><br><span class="line"># ⑨ 第三方库或SDK，请参考第三方提供的混淆规则，没提供的话，建议第三方包全部不混淆；</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.cn/post/6966526844552085512#heading-5" target="_blank" rel="noopener">补齐Android技能树 - 从害怕到玩转Android代码混淆</a></p>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义Gradle Plugin发布到本地]]></title>
      <url>/2021/09/06/%E8%87%AA%E5%AE%9A%E4%B9%89Gradle-Plugin%E5%8F%91%E5%B8%83%E5%88%B0%E6%9C%AC%E5%9C%B0/</url>
      <content type="html"><![CDATA[<h2 id="插件build-gradle"><a href="#插件build-gradle" class="headerlink" title="插件build.gradle"></a>插件build.gradle</h2><p>采用com.lenebf.plugin插件demo方式。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * This file was generated by the Gradle &apos;init&apos; task.</span><br><span class="line"> *</span><br><span class="line"> * This generated file contains a sample Gradle plugin project to get you started.</span><br><span class="line"> * For more details take a look at the Writing Custom Plugins chapter in the Gradle</span><br><span class="line"> * User Manual available at https://docs.gradle.org/6.6.1/userguide/custom_plugins.html</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">plugins &#123;</span><br><span class="line">    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins</span><br><span class="line">    id &apos;java-gradle-plugin&apos;</span><br><span class="line">    // Apply the Groovy plugin to add support for Groovy</span><br><span class="line">    id &apos;groovy&apos;</span><br><span class="line"></span><br><span class="line">    // 应用 Maven Publish Plugin 发布插件</span><br><span class="line">    id &apos;maven-publish&apos;</span><br><span class="line"></span><br><span class="line">    id &apos;com.jfrog.bintray&apos; version &quot;1.8.5&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task sourcesJar(type: Jar, dependsOn: classes) &#123;</span><br><span class="line">    def classifier = getArchiveClassifier()</span><br><span class="line">    classifier.set(&apos;sources&apos;)</span><br><span class="line">    classifier.convention(&apos;sources&apos;)</span><br><span class="line">    from sourceSets.main.allSource</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">publishing &#123;</span><br><span class="line">    publications &#123;</span><br><span class="line">        apkRename(MavenPublication) &#123;</span><br><span class="line">            // 组件类型，我们的插件其实就是Java组件</span><br><span class="line">            from components.java</span><br><span class="line">            // 插件的组ID，建议设置为插件的包名</span><br><span class="line">            groupId = &apos;com.lenebf.plugin&apos;</span><br><span class="line">            // 翻译过来是 工件ID，我的理解是插件的名字</span><br><span class="line">            artifactId = &apos;McImage&apos;</span><br><span class="line">            version = &apos;1.5.0&apos;</span><br><span class="line">            artifact sourcesJar</span><br><span class="line">            // artifact javadocJar</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            // $rootProject 表示你项目的根目录</span><br><span class="line">            url = &quot;$rootDir/repo&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        groovy &#123;</span><br><span class="line">            srcDir &apos;src/main/groovy&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        resources &#123;</span><br><span class="line">            srcDir &apos;src/main/resources&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bintray &#123;</span><br><span class="line">    user = System.getenv(&apos;BINTRAY_USER&apos;)</span><br><span class="line">    key = System.getenv(&apos;BINTRAY_KEY&apos;)</span><br><span class="line">    publications = [&apos;McImage&apos;]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        // 必填项，前面我们创建的仓库名称</span><br><span class="line">        repo = &apos;maven&apos;</span><br><span class="line"></span><br><span class="line">        // 必填项，我们要上传的包的名称</span><br><span class="line">        name = &apos;McImage&apos;</span><br><span class="line">        // 每次上传直接发布</span><br><span class="line">        publish = true</span><br><span class="line"></span><br><span class="line">        // 开原许可，如果是开源包必须有，否则可选</span><br><span class="line">        // 文档原话：your package licenses (mandatory if the package doesn&apos;t exist yet and must be created,</span><br><span class="line">        // and if the package is an OSS package; optional otherwise)</span><br><span class="line">//        licenses = [&apos;Apache-2.0&apos;]</span><br><span class="line"></span><br><span class="line">        // 版本控制系统地址（一般为git地址）如果是开源包必须有，否则可选</span><br><span class="line">        // 文档原话：your VCS URL (mandatory if the package doesn&apos;t exist yet and must be created,</span><br><span class="line">        // and if the package is an OSS package; optional otherwise)</span><br><span class="line">//        vcsUrl = &apos;https://github.com/lenebf/GradlePluginTutorial&apos;</span><br><span class="line"></span><br><span class="line">        // 包的版本信息</span><br><span class="line">        version &#123;</span><br><span class="line">            // 必填，版本名称</span><br><span class="line">            name = &apos;0.0.6&apos;</span><br><span class="line">            // 选填，版本描述</span><br><span class="line">            desc = &apos;McImage Plugin 0.0.6&apos;</span><br><span class="line">            // 选填，版本发布日期</span><br><span class="line">            released = new Date()</span><br><span class="line">            // 选填，版本控制系统的对象的tag名称</span><br><span class="line">            vcsTag = &apos;tag_0.0.6&apos;</span><br><span class="line">            // 选填，该版本的附件属性信息，可以任意填写</span><br><span class="line">            attributes = [&apos;McImage&apos;: &apos;a simple plugin.&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    // Use jcenter for resolving dependencies.</span><br><span class="line">    // You can declare any Maven/Ivy/file repository here.</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line">gradlePlugin &#123;</span><br><span class="line">    // Define the plugin</span><br><span class="line">    plugins &#123;</span><br><span class="line">        mcImage &#123;</span><br><span class="line">            id = &apos;McImage&apos;</span><br><span class="line">            implementationClass = &apos;com.lenebf.plugin.ImagePlugin&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;com.android.tools.build:gradle:4.0.2&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="发布-settings-gradle"><a href="#发布-settings-gradle" class="headerlink" title="发布 settings.gradle"></a>发布 settings.gradle</h2><blockquote>
<p>include ‘:McImage’</p>
</blockquote>
<h2 id="工程-build-gradle"><a href="#工程-build-gradle" class="headerlink" title="工程 build.gradle"></a>工程 build.gradle</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url uri(&apos;./repo&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:4.0.2&apos;</span><br><span class="line">        classpath &apos;com.lenebf.plugin:McImage:1.5.0&apos;</span><br><span class="line">//        classpath &apos;com.smallsoho.mobcase:McImage:1.5.1&apos;</span><br><span class="line"></span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url uri(&apos;./repo&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle之android.precompileDependenciesResources配置介绍]]></title>
      <url>/2021/09/06/Gradle%E4%B9%8Bandroid.precompileDependenciesResources%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>本地版用了一个第三方图片压缩插件，用来减少包大小大约2.6兆，但是在gradle升级后，并没有达到预期的效果。之后在gradle.properties中设置了android.precompileDependenciesResources=false后，解决了该问题。android.precompileDependenciesResources是Gradle 3.6版本以后增加的一个配置，并且默认是打开的，但是不知道他具体的作用。我们在开发过程中也很少用到关闭的情况。 所以本次具体介绍一下它的作用，主要从以下几个方面介绍：</p>
<a id="more"></a>
<blockquote>
<ul>
<li>precompileDependenciesResources的配置</li>
<li>MergeResources任务流程解析</li>
<li>McImage图片压缩插件问题解决</li>
<li>总结</li>
</ul>
</blockquote>
<hr>
<h2 id="precompileDependenciesResources在依赖逻辑中的处理"><a href="#precompileDependenciesResources在依赖逻辑中的处理" class="headerlink" title="precompileDependenciesResources在依赖逻辑中的处理"></a>precompileDependenciesResources在依赖逻辑中的处理</h2><hr>
<p>在BooleanOption中可以看到默认设置是true:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRECOMPILE_DEPENDENCIES_RESOURCES(&quot;android.precompileDependenciesResources&quot;, true, FeatureStage.Supported)</span><br></pre></td></tr></table></figure>

<p>看一下调用的地方，在这里可以看到其实返回是和图片压缩一起判断的，所以这里的注释要注意下：意思是<strong>如果使用图片压缩就需要所有的资源都能通过MergeResources任务过程</strong>，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 这里也判断了shrinkResources，我们默认资源缩减是false，所以在不配置android.precompileDependenciesResources=false的情况下，一直返回true，如果</span><br><span class="line">* android.precompileDependenciesResources设置false或者shrinkResources=true，都会返回false。</span><br><span class="line">*/</span><br><span class="line">public boolean isPrecompileDependenciesResourcesEnabled() &#123;</span><br><span class="line">        // Resource shrinker expects MergeResources task to have all the resources merged and with</span><br><span class="line">        // overlay rules applied, so we have to go through the MergeResources pipeline in case it&apos;s</span><br><span class="line">        // enabled, see b/134766811.</span><br><span class="line">        return globalScope.getProjectOptions().get(BooleanOption.PRECOMPILE_DEPENDENCIES_RESOURCES)</span><br><span class="line">                &amp;&amp; !useResourceShrinker();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>同时在为true的情况下，在依赖处理的逻辑中注册了转化flat的Transform</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> if (globalScope.projectOptions[BooleanOption.PRECOMPILE_DEPENDENCIES_RESOURCES]) &#123;</span><br><span class="line">    dependencies.registerTransform(</span><br><span class="line">        AarResourcesCompilerTransform::class.java</span><br><span class="line">    )</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MergeResources"><a href="#MergeResources" class="headerlink" title="MergeResources"></a>MergeResources</h2><hr>
<p>我们先找出mergeReleaseResourcesTask对应的类：根据下面命令可以拿到具体的处理在类MergeResources中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01deMacBook-Pro:MyActivityTest chenyulong01$ ./gradlew -q help --task app:mergeReleaseResources</span><br><span class="line">Detailed task information for app:mergeReleaseResources</span><br><span class="line">Path</span><br><span class="line">     :app:mergeReleaseResources</span><br><span class="line">Type</span><br><span class="line">     MergeResources (com.android.build.gradle.tasks.MergeResources)</span><br><span class="line">Description</span><br><span class="line">     -</span><br><span class="line">Group</span><br><span class="line">     -</span><br><span class="line">chenyulong01deMacBook-Pro:MyActivityTest chenyulong01$</span><br></pre></td></tr></table></figure>

<p>任务执行开始doFullTaskAction方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">protected void doFullTaskAction() throws IOException, JAXBException &#123;</span><br><span class="line">     ResourcePreprocessor preprocessor = getPreprocessor();</span><br><span class="line"></span><br><span class="line">     // this is full run, clean the previous outputs</span><br><span class="line">     File destinationDir = getOutputDir().get().getAsFile();</span><br><span class="line">     FileUtils.cleanOutputDir(destinationDir);</span><br><span class="line">     if (getDataBindingLayoutInfoOutFolder().isPresent()) &#123;</span><br><span class="line">          FileUtils.deleteDirectoryContents(getDataBindingLayoutInfoOutFolder().get().getAsFile());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     //获取所有的 ResourceSet  </span><br><span class="line">     List&lt;ResourceSet&gt; resourceSets = getConfiguredResourceSets(preprocessor);</span><br><span class="line"></span><br><span class="line">     // create a new merger and populate it with the sets.</span><br><span class="line">     ResourceMerger merger = new ResourceMerger(getMinSdk().get());</span><br><span class="line">     .....</span><br><span class="line">     try (WorkerExecutorFacade workerExecutorFacade = getAaptWorkerFacade();</span><br><span class="line">          ResourceCompilationService resourceCompiler = getResourceProcessor() &#123;</span><br><span class="line">          ......</span><br><span class="line">          //过滤ResourceSet，设置了setAllowedFolderPrefix(FD_RES_VALUES)的非values资源（drawable、layout、。。。。。）不走下面流程      </span><br><span class="line">          for (ResourceSet resourceSet : resourceSets) &#123;</span><br><span class="line">               resourceSet.loadFromFiles(new LoggerWrapper(getLogger()));</span><br><span class="line">               merger.addDataSet(resourceSet);</span><br><span class="line">          &#125;</span><br><span class="line">          ......        </span><br><span class="line">          MergedResourceWriter writer = new MergedResourceWriter();</span><br><span class="line">          ......</span><br><span class="line">          merger.mergeData(writer, false /*doCleanUp*/));</span><br><span class="line">          .....</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下如何获取所有ResourceSet：getConfiguredResourceSets方法里调用了compute方法，这个方法很重要，尤其时注释，说明的很清楚，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;ResourceSet&gt; getConfiguredResourceSets(ResourcePreprocessor preprocessor) &#123;</span><br><span class="line">processedInputs = getResourcesComputer().compute(precompileDependenciesResources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>compute方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* Computes resource sets for merging, if [precompileDependenciesResources] flag is enabled we</span><br><span class="line">* filter out the non-values resources as it&apos;s precompiled and is consumed directly in the</span><br><span class="line">* linking step.</span><br><span class="line">* 计算用于合并的资源集，如果启用[PrecompiledDependenciesResources]标志，</span><br><span class="line">* 我们将在预编译时过滤掉非值资源，并在链接步骤中直接使用。</span><br><span class="line">*/</span><br><span class="line">@JvmOverloads</span><br><span class="line">fun compute(precompileDependenciesResources: Boolean = false): List&lt;ResourceSet&gt; &#123;</span><br><span class="line">     ......</span><br><span class="line">     val resourceSetList = ArrayList&lt;ResourceSet&gt;(size)</span><br><span class="line">     // 这里要注意，过滤的是libraries库的资源。</span><br><span class="line">     addLibraryResources(libraries, resourceSetList,                       precompileDependenciesResources)</span><br><span class="line">     ......</span><br><span class="line">    return resourceSetList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候我们知道在compute处理了非值资源，其实就是非values资源。其实这里不是过滤，是给所有的文件都设置了value标记。<br>setAllowedFolderPrefix(FD_RES_VALUES)，这个标记在读取的时候会用到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private fun addLibraryResources(</span><br><span class="line">     libraries: ArtifactCollection?,</span><br><span class="line">     resourceSetList: MutableList&lt;ResourceSet&gt;,</span><br><span class="line">     resourceArePrecompiled: Boolean</span><br><span class="line">) &#123;</span><br><span class="line">     // add at the beginning since the libraries are less important than the folder based</span><br><span class="line">     // resource sets.</span><br><span class="line">     // get the dependencies first</span><br><span class="line">     libraries?.let &#123;</span><br><span class="line">          val libArtifacts = it.artifacts</span><br><span class="line">          // the order of the artifact is descending order, so we need to reverse it.</span><br><span class="line">          for (artifact in libArtifacts) &#123;</span><br><span class="line">               val resourceSet = ResourceSet()</span><br><span class="line">               .......</span><br><span class="line">               resourceSet.isFromDependency = true</span><br><span class="line">               //我们在loadFromFiles处理resourceSet时，会遍历这个set</span><br><span class="line">               resourceSet.addSource(artifact.file)</span><br><span class="line"></span><br><span class="line">               if (resourceArePrecompiled) &#123;</span><br><span class="line">               // For values resources we impose stricter rules different from aapt so they need to go</span><br><span class="line">               // through the merging step.</span><br><span class="line">               // 设置了setAllowedFolderPrefix(FD_RES_VALUES)</span><br><span class="line">               resourceSet.setAllowedFolderPrefix(FD_RES_VALUES)</span><br><span class="line">               &#125;</span><br><span class="line">               // add to 0 always, since we need to reverse the order.</span><br><span class="line">               resourceSetList.add(0, resourceSet)</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上其实都是对资源文件的配置，看一下读取，读取开始就是resourceSet.loadFromFiles方法，最近进入readSourceFolder方法，对文件进行处理、过滤，看下面debug图比较清晰，<br><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/readfiles.png" alt></p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/ignorefiles.png" alt></p>
<p>然后我们看一下，分别设置precompileDependenciesResources后mergerReleaseResources执行完后的/build/res/merged/debug/文件数量对比：<br><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/comp.png" alt><br>我们发现，未设置false时.flat文件比设置后少了好多，那在processRleaseResources时，这些文件从哪里来呢？肯定不会丢失.我们打印一下processRleaseResources时，task.inputs.files输入文件：执行./gradlew :app:processReleaseResources</p>
<p>precompileDependenciesResources = true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/5f74d6550e3a0049fba9165d4efc08e0/androidx.appcompat</span><br><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/2efc557459e42f3d4a45ed4fdeadd8e6/android.support.constraint</span><br><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/b26cf8ef1b89aa3b84e14c53ba7689f8/androidx.fragment</span><br><span class="line">......</span><br><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/aa6c769bb172babdd442b10f9ded6c0f/androidx.arch.core</span><br><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/3d7ded961afb1450efaaf93a54ba3962/androidx.interpolator</span><br><span class="line">input file:/Users/chenyulong01/AndroidStudioProjects/MyActivityTest/app/build/intermediates/res/merged/release</span><br><span class="line">input file:/Users/chenyulong01/AndroidStudioProjects/MyActivityTest/app/build/intermediates/merged_manifests/release</span><br></pre></td></tr></table></figure>

<p>precompileDependenciesResources = false</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input file:/Users/chenyulong01/AndroidStudioProjects/MyActivityTest/app/build/intermediates/res/merged/release</span><br><span class="line">input file:/Users/chenyulong01/AndroidStudioProjects/MyActivityTest/app/build/intermediates/merged_manifests/release</span><br></pre></td></tr></table></figure>

<p>所以，precompileDependenciesResources = true时，libraries的非values资源都是从caches中获取<br>最后我们看一下gradle 4.0的mergeReleaseResources的Task任务流程：</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/mergeResources.png" alt></p>
<h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><hr>
<p>McImage是无侵入式的全量压缩资源图片插件，包括Jar包中的图、AAR中的图、Module中的图。使用了三种算法：pngquant算法压缩png、guetzli算法压缩jpg、cwebp算法转webp。<a href="https://github.com/smallSohoSolo/McImage" target="_blank" rel="noopener">https://github.com/smallSohoSolo/McImage</a>。</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/compress-blank.png" alt></p>
<p>Gradle未升级前，由于引入了McImage图片压缩插件，会降低包大小2.6M,但是在升级到4.0.2后，只降低了1.4M。那问题出现在了哪里？为社么会有1.2M左右的差值，当时第一反应就是，压缩失败，插件没有适配Gradle版本。所以在开始就研究了一下McImage的插件源码，然后在工程中直接使用McImage源码。但是根据打印信息来看，跟直接依赖插件输出也完全一样。那么说明插件没有问题。那么到底问题出现在了哪里？</p>
<p>在未解决问题之前，曾想找一个替代插件，看到了<a href="https://booster.johnsonlee.io/preface/" target="_blank" rel="noopener">https://booster.johnsonlee.io/preface/</a>。 介绍到，Booster是一款专门为移动应用设计的易用、轻量级且可扩展的质量优化框架，其目标主要是为了解决随着APP复杂度的提升而带来的性能、稳定性、包体积等一系列质量问题。这里我们只关注包体积相关模块即可。包体积优化，包含资源去冗余、<strong>资源压缩</strong>等功能模块。<br>在看到图片压缩时，实现思路是选择在mergeResources和processResources任务之间插入PNG压缩任务，如下图所示：</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/noun.png" alt></p>
<p>根据这个思路，查看一下McImage相关源码：源码中有这么一行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mergeResourcesTask.dependsOn(project.tasks.findByName(mcPicTask.name))</span><br></pre></td></tr></table></figure>

<p>好吧，源码错了，修改，移动压缩task到mergerResourcesTask后面，结果就是压缩没有问题。但是包大小还是不对。继续往下看booster文档，在看到图片压缩时，看到有这么一个注释：</p>
<blockquote>
<p>WARNING<br>Android Gradle Plugin 3.6 及以上版本，需要在 gradle.properties 中设置：<br>android.precompileDependenciesResources=false</p>
</blockquote>
<p>好吧，尝试一下：结果成功了。那为什么压缩处理的Task是在mergeResources的Task之前执行，跟思路图不同，但是有效呢。我们知道从agp3.0开始，google默认开启了aapt2作为资源编译的编译器，如果是使用aapt，上面的思路就没问题，但是我们已经开启了aapt2编译，那就只能说明上边的思路和当前的的图片压缩思路不一致，不是当前的思路图。因为我们在升级前，agp版本是3.4.3，也没有关闭aapt2，再次证明上述思路针对当前agp版本是错误的。插件代码是没问题的。</p>
<p>agp版本从3.3开始，通过getAllRawAndroidResources获取所有的资源文件，包括来自传递依赖项的资源，举例几个来源：</p>
<pre><code>res/,
app/src/main/res,
app/src/debug/res,
intermediates/packaged_res/debug,
catche/aeec173e09252e6f19e949e00c8c5eec/jetified-XXXX-10010.4.36/res,
build/generated/res/,
build-types/debug/res</code></pre><p>BaseVariantImpl:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Returns file collection containing all raw Android resources, including the ones from</span><br><span class="line">     * transitive dependencies.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;&lt;strong&gt;This is an incubating API, and it can be changed or removed without</span><br><span class="line">     * notice.&lt;/strong&gt;</span><br><span class="line">     */</span><br><span class="line">    @Incubating</span><br><span class="line">    @NonNull</span><br><span class="line">    FileCollection getAllRawAndroidResources();</span><br></pre></td></tr></table></figure>

<h2 id="缓存flat生成"><a href="#缓存flat生成" class="headerlink" title="缓存flat生成"></a>缓存flat生成</h2><hr>
<p>上述说到aar的flat资源不是在mergeResourceTask生成的。但是在processResources中，发现aar的flat来自catch，那缓存中的flat是什么时候生成的呢？在开始将依赖逻辑处理时我们注册了一个AarResourcesCompilerTransform。这个Transform就是处理aar资源flat转换的。所以，当我们在mergeResourceTask之前处理图片的时候，其实aar的资源和图片，都已经转换成了flat。虽然我们压缩没问题，但是我们的flat在压缩之前就完成了转换。所以，我们的包大小并没有减少。也就是1.2M差距的原因。<br><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/compress.png" alt></p>
<h2 id="gradle断点调试"><a href="#gradle断点调试" class="headerlink" title="gradle断点调试"></a>gradle断点调试</h2><hr>
<ol>
<li>打开Edit Configurations</li>
<li>选中Remote，点击+，Remote</li>
<li>输入Name，拷贝Command line agruments for remote JVM:</li>
<li>打开gradle.properties</li>
<li>修改替换org.gradle.jvmargs值为3中拷贝内容。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<ul>
<li>1.Gradle升级版本差距较大的情况下，有问题首先看源码，多调试，更新文档一般不会提及这种小点。</li>
<li>2.precompileDependenciesResources默认true情况下，默认开启aapt2会减少构建时间。</li>
<li>3.图片压缩插件可指定具体压缩文件，减少构建时间，可以作为优化构建时间的一个优化点。</li>
<li>4.MergerResources是合并生成flat文件。<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><a href="https://blog.csdn.net/dbs1215/category_10281748.html" target="_blank" rel="noopener">Android构建流程</a><br><a href="https://www.cnblogs.com/mingfeng002/p/11751309.html" target="_blank" rel="noopener">Gradle之Android Gradle Plugin 主要 Task分析</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle升级到4.0之图片压缩问题]]></title>
      <url>/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>本地版用了一个第三方图片压缩插件，用来减少包大小大约2.6兆，但是在gradle升级后，并没有达到预期的效果,只降低了1.4M。之后在gradle.properties中设置了android.precompileDependenciesResources=false后，解决了该问题。而android.precompileDependenciesResources是Gradle 3.6版本以后增加的一个配置，并且默认是打开的，但是不知道他具体的作用，我们在开发过程中也很少用到关闭的情况。 所以通过下面几点具体介绍压缩问题解决流程：</p>
<a id="more"></a>
<blockquote>
<ul>
<li>图片压缩介绍</li>
<li>precompileDependenciesResources的配置</li>
<li>MergeResources任务流程解析</li>
<li>缓存flat</li>
<li>调试总结</li>
</ul>
</blockquote>
<h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>总上所知，Gradle升级前后，压缩结果会有1.2M左右的差距。那问题出现在了哪里？为社么会有1.2M左右的差值，当时第一反应就是，压缩失败，插件没有适配Gradle版本。所以在开始就研究了一下McImage的插件源码，然后在工程中直接使用McImage源码。但是根据打印信息来看，跟直接依赖插件输出也完全一样。那么说明插件没有问题。那么到底问题出现在了哪里？</p>
<p>在未解决问题之前，曾想找一个替代插件，看到了<a href="https://booster.johnsonlee.io/preface/" target="_blank" rel="noopener">https://booster.johnsonlee.io/preface/</a>。 介绍到，Booster是一款专门为移动应用设计的易用、轻量级且可扩展的质量优化框架，其目标主要是为了解决随着APP复杂度的提升而带来的性能、稳定性、包体积等一系列质量问题。这里我们只关注包体积相关模块即可。包体积优化，包含资源去冗余、<strong>资源压缩</strong>等功能模块。<br>在看到图片压缩时，实现思路是选择在mergeResources和processResources任务之间插入PNG压缩任务，如下图所示：</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/noun.png" alt></p>
<p>根据这个思路，查看了一下McImage压缩插件相关源码：源码中有这么一行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mergeResourcesTask.dependsOn(project.tasks.findByName(mcPicTask.name))</span><br></pre></td></tr></table></figure>

<p>好吧，看来是源码错了，修改，移动压缩task到mergerResourcesTask后面，结果就是压缩还是没有问题。但是包大小还是不对。继续往下看booster文档，在看到图片压缩时，看到有这么一个注释：</p>
<blockquote>
<p>WARNING<br>Android Gradle Plugin 3.6 及以上版本，需要在 gradle.properties 中设置：<br>android.precompileDependenciesResources=false</p>
</blockquote>
<p>把这个配置尝试添加到我们工程中：结果成功了。那为什么压缩处理的Task是在mergeResources的Task之前执行，跟思路图完全不同，但是有效呢。其实我们知道从agp3.0开始，google默认开启了aapt2作为资源编译的编译器，如果是使用aapt，上面的思路就没问题，但是我们已经开启了aapt2编译，那就只能说明上边的思路和当前的的图片压缩思路不一致，不是当前的思路图。因为我们在升级前，agp版本是3.4.3，也没有关闭aapt2，再次证明上述思路针对当前agp版本是错误的。插件没有问题，只是压缩思路应该是先压缩再merge，</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/noun2.png" alt></p>
<p>那么就只是我们的gradle配置错误。那么McImage具体是怎么压缩的呢？</p>
<p>McImage是无侵入式的全量压缩资源图片插件，包括Jar包中的图、AAR中的图、Module中的图。使用了三种算法：pngquant算法压缩png、guetzli算法压缩jpg、cwebp算法转webp。<a href="https://github.com/smallSohoSolo/McImage" target="_blank" rel="noopener">https://github.com/smallSohoSolo/McImage</a>。</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/compress-blank.png" alt></p>
<p>agp版本从3.3开始，通过getAllRawAndroidResources获取所有的资源文件，包括来自传递依赖项的资源，举例几个来源：</p>
<pre><code>res/,
app/src/main/res,
app/src/debug/res,
intermediates/packaged_res/debug,
catche/aeec173e09252e6f19e949e00c8c5eec/jetified-XXXX-10010.4.36/res,
build/generated/res/,
build-types/debug/res</code></pre><p>BaseVariantImpl:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Returns file collection containing all raw Android resources, including the ones from</span><br><span class="line">     * transitive dependencies.</span><br><span class="line">     *</span><br><span class="line">     * &lt;p&gt;&lt;strong&gt;This is an incubating API, and it can be changed or removed without</span><br><span class="line">     * notice.&lt;/strong&gt;</span><br><span class="line">     */</span><br><span class="line">    @Incubating</span><br><span class="line">    @NonNull</span><br><span class="line">    FileCollection getAllRawAndroidResources();</span><br></pre></td></tr></table></figure>

<h2 id="precompileDependenciesResources在依赖逻辑中的处理"><a href="#precompileDependenciesResources在依赖逻辑中的处理" class="headerlink" title="precompileDependenciesResources在依赖逻辑中的处理"></a>precompileDependenciesResources在依赖逻辑中的处理</h2><p>在BooleanOption中可以看到默认设置是true:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRECOMPILE_DEPENDENCIES_RESOURCES(&quot;android.precompileDependenciesResources&quot;, true, FeatureStage.Supported)</span><br></pre></td></tr></table></figure>

<p>看一下调用的地方，在这里可以看到其实返回是和图片压缩一起判断的，所以这里的注释要注意下：意思是<strong>如果使用图片压缩就需要所有的资源都能通过MergeResources任务过程</strong>，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* 这里也判断了shrinkResources，我们默认资源缩减是false，所以在不配置android.precompileDependenciesResources=false的情况下，一直返回true，如果</span><br><span class="line">* android.precompileDependenciesResources设置false或者shrinkResources=true，都会返回false。</span><br><span class="line">*/</span><br><span class="line">public boolean isPrecompileDependenciesResourcesEnabled() &#123;</span><br><span class="line">        // Resource shrinker expects MergeResources task to have all the resources merged and with</span><br><span class="line">        // overlay rules applied, so we have to go through the MergeResources pipeline in case it&apos;s</span><br><span class="line">        // enabled, see b/134766811.</span><br><span class="line">        return globalScope.getProjectOptions().get(BooleanOption.PRECOMPILE_DEPENDENCIES_RESOURCES)</span><br><span class="line">                &amp;&amp; !useResourceShrinker();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>同时在为true的情况下，在依赖处理的逻辑中注册了转化flat的Transform</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> if (globalScope.projectOptions[BooleanOption.PRECOMPILE_DEPENDENCIES_RESOURCES]) &#123;</span><br><span class="line">    dependencies.registerTransform(</span><br><span class="line">        AarResourcesCompilerTransform::class.java</span><br><span class="line">    )</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MergeResources"><a href="#MergeResources" class="headerlink" title="MergeResources"></a>MergeResources</h2><hr>
<p>我们先找出mergeReleaseResourcesTask对应的类：根据下面命令可以拿到具体的处理在类MergeResources中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01deMacBook-Pro:MyActivityTest chenyulong01$ ./gradlew -q help --task app:mergeReleaseResources</span><br><span class="line">Detailed task information for app:mergeReleaseResources</span><br><span class="line">Path</span><br><span class="line">     :app:mergeReleaseResources</span><br><span class="line">Type</span><br><span class="line">     MergeResources (com.android.build.gradle.tasks.MergeResources)</span><br><span class="line">Description</span><br><span class="line">     -</span><br><span class="line">Group</span><br><span class="line">     -</span><br><span class="line">chenyulong01deMacBook-Pro:MyActivityTest chenyulong01$</span><br></pre></td></tr></table></figure>

<p>任务执行开始doFullTaskAction方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">protected void doFullTaskAction() throws IOException, JAXBException &#123;</span><br><span class="line">     ResourcePreprocessor preprocessor = getPreprocessor();</span><br><span class="line"></span><br><span class="line">     // this is full run, clean the previous outputs</span><br><span class="line">     File destinationDir = getOutputDir().get().getAsFile();</span><br><span class="line">     FileUtils.cleanOutputDir(destinationDir);</span><br><span class="line">     if (getDataBindingLayoutInfoOutFolder().isPresent()) &#123;</span><br><span class="line">          FileUtils.deleteDirectoryContents(getDataBindingLayoutInfoOutFolder().get().getAsFile());</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     //获取所有的 ResourceSet  </span><br><span class="line">     List&lt;ResourceSet&gt; resourceSets = getConfiguredResourceSets(preprocessor);</span><br><span class="line"></span><br><span class="line">     // create a new merger and populate it with the sets.</span><br><span class="line">     ResourceMerger merger = new ResourceMerger(getMinSdk().get());</span><br><span class="line">     .....</span><br><span class="line">     try (WorkerExecutorFacade workerExecutorFacade = getAaptWorkerFacade();</span><br><span class="line">          ResourceCompilationService resourceCompiler = getResourceProcessor() &#123;</span><br><span class="line">          ......</span><br><span class="line">          //过滤ResourceSet，设置了setAllowedFolderPrefix(FD_RES_VALUES)的非values资源（drawable、layout、。。。。。）不走下面流程      </span><br><span class="line">          for (ResourceSet resourceSet : resourceSets) &#123;</span><br><span class="line">               resourceSet.loadFromFiles(new LoggerWrapper(getLogger()));</span><br><span class="line">               merger.addDataSet(resourceSet);</span><br><span class="line">          &#125;</span><br><span class="line">          ......        </span><br><span class="line">          MergedResourceWriter writer = new MergedResourceWriter();</span><br><span class="line">          ......</span><br><span class="line">          merger.mergeData(writer, false /*doCleanUp*/));</span><br><span class="line">          .....</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一下如何获取所有ResourceSet：getConfiguredResourceSets方法里调用了compute方法，这个方法很重要，尤其时注释，说明的很清楚，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;ResourceSet&gt; getConfiguredResourceSets(ResourcePreprocessor preprocessor) &#123;</span><br><span class="line">processedInputs = getResourcesComputer().compute(precompileDependenciesResources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>compute方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* Computes resource sets for merging, if [precompileDependenciesResources] flag is enabled we</span><br><span class="line">* filter out the non-values resources as it&apos;s precompiled and is consumed directly in the</span><br><span class="line">* linking step.</span><br><span class="line">* 计算用于合并的资源集，如果启用[PrecompiledDependenciesResources]标志，</span><br><span class="line">* 我们将在预编译时过滤掉非值资源，并在链接步骤中直接使用。</span><br><span class="line">*/</span><br><span class="line">@JvmOverloads</span><br><span class="line">fun compute(precompileDependenciesResources: Boolean = false): List&lt;ResourceSet&gt; &#123;</span><br><span class="line">     ......</span><br><span class="line">     val resourceSetList = ArrayList&lt;ResourceSet&gt;(size)</span><br><span class="line">     // 这里要注意，过滤的是libraries库的资源。</span><br><span class="line">     addLibraryResources(libraries, resourceSetList,                       precompileDependenciesResources)</span><br><span class="line">     ......</span><br><span class="line">    return resourceSetList</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候我们知道在compute处理了非值资源，其实就是非values资源。其实这里不是过滤，是给所有的文件都设置了value标记。<br>setAllowedFolderPrefix(FD_RES_VALUES)，这个标记在读取的时候会用到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private fun addLibraryResources(</span><br><span class="line">     libraries: ArtifactCollection?,</span><br><span class="line">     resourceSetList: MutableList&lt;ResourceSet&gt;,</span><br><span class="line">     resourceArePrecompiled: Boolean</span><br><span class="line">) &#123;</span><br><span class="line">     // add at the beginning since the libraries are less important than the folder based</span><br><span class="line">     // resource sets.</span><br><span class="line">     // get the dependencies first</span><br><span class="line">     libraries?.let &#123;</span><br><span class="line">          val libArtifacts = it.artifacts</span><br><span class="line">          // the order of the artifact is descending order, so we need to reverse it.</span><br><span class="line">          for (artifact in libArtifacts) &#123;</span><br><span class="line">               val resourceSet = ResourceSet()</span><br><span class="line">               .......</span><br><span class="line">               resourceSet.isFromDependency = true</span><br><span class="line">               //我们在loadFromFiles处理resourceSet时，会遍历这个set</span><br><span class="line">               resourceSet.addSource(artifact.file)</span><br><span class="line"></span><br><span class="line">               if (resourceArePrecompiled) &#123;</span><br><span class="line">               // For values resources we impose stricter rules different from aapt so they need to go</span><br><span class="line">               // through the merging step.</span><br><span class="line">               // 设置了setAllowedFolderPrefix(FD_RES_VALUES)</span><br><span class="line">               resourceSet.setAllowedFolderPrefix(FD_RES_VALUES)</span><br><span class="line">               &#125;</span><br><span class="line">               // add to 0 always, since we need to reverse the order.</span><br><span class="line">               resourceSetList.add(0, resourceSet)</span><br><span class="line">          &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上其实都是对资源文件的配置，看一下读取，读取开始就是resourceSet.loadFromFiles方法，最终进入readSourceFolder方法，对文件进行处理、过滤，看下面debug图比较清晰，</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/readfiles.png" alt></p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/ignorefiles.png" alt></p>
<p>然后我们看一下，分别设置precompileDependenciesResources后mergerReleaseResources执行完后的/build/res/merged/debug/文件数量对比：</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/comp.png" alt></p>
<p>我们发现，未设置false时.flat文件比设置后少了好多，那在processRleaseResources时，这些文件从哪里来呢？肯定不会丢失.我们打印一下processRleaseResources时，task.inputs.files输入文件：执行./gradlew :app:processReleaseResources</p>
<p>precompileDependenciesResources = true</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/5f74d6550e3a0049fba9165d4efc08e0/androidx.appcompat</span><br><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/2efc557459e42f3d4a45ed4fdeadd8e6/android.support.constraint</span><br><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/b26cf8ef1b89aa3b84e14c53ba7689f8/androidx.fragment</span><br><span class="line">......</span><br><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/aa6c769bb172babdd442b10f9ded6c0f/androidx.arch.core</span><br><span class="line">input file:/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/3d7ded961afb1450efaaf93a54ba3962/androidx.interpolator</span><br><span class="line">input file:/Users/chenyulong01/AndroidStudioProjects/MyActivityTest/app/build/intermediates/res/merged/release</span><br><span class="line">input file:/Users/chenyulong01/AndroidStudioProjects/MyActivityTest/app/build/intermediates/merged_manifests/release</span><br></pre></td></tr></table></figure>

<p>precompileDependenciesResources = false</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">input file:/Users/chenyulong01/AndroidStudioProjects/MyActivityTest/app/build/intermediates/res/merged/release</span><br><span class="line">input file:/Users/chenyulong01/AndroidStudioProjects/MyActivityTest/app/build/intermediates/merged_manifests/release</span><br></pre></td></tr></table></figure>

<p>所以，precompileDependenciesResources = true时，libraries的非values资源都是从caches中获取<br>最后我们看一下gradle 4.0的mergeReleaseResources的Task任务流程：</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/mergeResources.png" alt></p>
<h2 id="缓存flat生成"><a href="#缓存flat生成" class="headerlink" title="缓存flat生成"></a>缓存flat生成</h2><hr>
<p>上述说到aar的flat资源不是在mergeResourceTask生成的。但是在processResources中，发现aar的flat来自catch，那缓存中的flat是什么时候生成的呢？在开始依赖逻辑处理时我们注册了一个AarResourcesCompilerTransform。其实这个Transform就是处理aar资源flat转换的。所以，当我们在mergeResourceTask之前处理图片的时候，其实aar的资源和图片，都已经转换成了flat。虽然我们压缩没问题，但是我们的flat在压缩之前就完成了转换。所以，我们的包大小并没有减少。也就是1.2M差距的原因。</p>
<p><img src="http://nunu03.github.io/2021/08/18/Gradle%E5%8D%87%E7%BA%A7%E5%88%B04-0%E4%B9%8B%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9%E9%97%AE%E9%A2%98/compress.png" alt></p>
<h2 id="gradle断点调试"><a href="#gradle断点调试" class="headerlink" title="gradle断点调试"></a>gradle断点调试</h2><hr>
<ol>
<li>打开Edit Configurations</li>
<li>选中Remote，点击+，Remote</li>
<li>输入Name，拷贝Command line agruments for remote JVM:</li>
<li>打开gradle.properties</li>
<li>修改替换org.gradle.jvmargs值为3中拷贝内容。</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<ul>
<li>1.Gradle升级版本差距较大的情况下，有问题首先看源码，多调试，更新文档一般不会提及这种小点。</li>
<li>2.precompileDependenciesResources默认true情况下，默认开启aapt2会减少构建时间。</li>
<li>3.图片压缩插件可指定具体压缩文件，减少构建时间，可以作为优化构建时间的一个优化点。</li>
<li>4.aapt2 MergerResources是合并生成flat文件。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle打包流程-Gradle Wrapper]]></title>
      <url>/2021/07/07/Gradle%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h2><h3 id="Gradle是什么？"><a href="#Gradle是什么？" class="headerlink" title="Gradle是什么？"></a>Gradle是什么？</h3><p>Gradle其实就是个构建系统,一个构建项目的工具，即把一堆堆的目录、文件按照一定的规则关联起来，形成一个项目的自动化构建工具,能够简化你的编译、打包、测试过程。Gradle版本,如下gradle-6.1.1-all.zip。</p>
<a id="more"></a>
<p>位置:项目主目录 gradle 文件夹-&gt;wrapper-&gt;gradle-wrapper.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME // ~/.gradle</span><br><span class="line">distributionPath=wrapper/dists</span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=wrapper/dists  // 下载到本地的~/.gradle/wrapper/dists目录</span><br><span class="line">distributionUrl=https\://services.gradle.org/distributions/gradle-6.1.1-all.zip //要下载的gradle的地址</span><br></pre></td></tr></table></figure>

<ul>
<li><p>gradle-xx-all.zip是完整版，包含了各种二进制文件，源代码文件，和离线的文档。例如，<a href="https://services.gradle.org/distributions/gradle-6.1.1-all.zip" target="_blank" rel="noopener">https://services.gradle.org/distributions/gradle-6.1.1-all.zip</a></p>
</li>
<li><p>gradle-xx-bin.zip是二进制版，只包含了二进制文件（可执行文件），没有文档和源代码。例如，<a href="https://services.gradle.org/distributions/gradle-6.1.1-bin.zip" target="_blank" rel="noopener">https://services.gradle.org/distributions/gradle-6.1.1-bin.zip</a></p>
</li>
<li><p>gradle-xx-src.zip是源码版，只包含了Gradle源代码，不能用来编译你的工程。例如，<a href="https://services.gradle.org/distributions/gradle-6.1.1-src.zip" target="_blank" rel="noopener">https://services.gradle.org/distributions/gradle-6.1.1-src.zip</a></p>
</li>
</ul>
<h3 id="Gradle-Wrapper是什么？"><a href="#Gradle-Wrapper是什么？" class="headerlink" title="Gradle Wrapper是什么？"></a>Gradle Wrapper是什么？</h3><p>Gradle Wrapper的作用是简化Gradle本身的安装、部署。不同版本的项目可能需要不同版本的Gradle，手工部署的话比较麻烦，而且可能产生冲突，所以需要Gradle Wrapper帮你搞定这些事情。Gradle Wrapper是Gradle项目的一部分.gradle-wrapper.jar/gradle-wrapper.properties，gradle-wrapper.jar是Gradle Wrapper的主体功能包。在Android Studio安装过程中产生gradle-wrapper.jar.然后每次新建项目，会将gradle-wrapper.jar拷贝到你的项目的gradle/wrapper目录中。</p>
<h3 id="Gradle插件又是什么？"><a href="#Gradle插件又是什么？" class="headerlink" title="Gradle插件又是什么？"></a>Gradle插件又是什么？</h3><p>Gradle插件是针对Gradle发行版和Android SDK Build Tools封装的一个工具，是一堆适合Android开发的Gradle插件的集合,主要有两大功能：</p>
<blockquote>
<p>调用Gradle本身的代码和批处理工具来构建项目</p>
<p>调用Android SDK的编译、打包功能</p>
</blockquote>
<p><strong>Gradle插件版本</strong>:项目主目录下的 build.gradle 中，如“com.android.tools.build:gradle:4.0.2”:它会下载到~.gradle\caches\modules-2\files-2.1\com.android.tools.build目录中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    classpath &apos;com.android.tools.build:gradle:4.0.2&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Android SDK Build Tools Version</strong>：Android SDK 构建工具版本;<br>buildToolsVersion 位置:app 目录-&gt;buid.gradle 文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion 28</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId &quot;com.myapplication&quot;</span><br><span class="line">        minSdkVersion 23</span><br><span class="line">        targetSdkVersion 28</span><br><span class="line">        versionCode 1</span><br><span class="line">        versionName &quot;1.0&quot;</span><br><span class="line">        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled false</span><br><span class="line">            proguardFiles getDefaultProguardFile(&apos;proguard-android-optimize.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>明确概念:</p>
<ul>
<li><p>Gradle Plugin Version: Gradle 插件版本</p>
</li>
<li><p>Gradle Version: Gradle发行版本</p>
</li>
<li><p>Android SDK Build Tools Version：Android SDK 构建工具版本<br>Gradle Plugin 有不同的版本号。 即我们常见的：classpath ‘com.android.tools.build:gradle:4.0.2’】，<br>每个插件版本号又对应一个或一些 Gradle 发行版本【即我们常见的：gradle-6.1.1-all.zip】<br>如果这两个版本对应不上了，那么构建项目的时候就会报错。<br><a href="https://developer.android.google.cn/studio/releases/gradle-plugin" target="_blank" rel="noopener">Android Gradle 插件版本说明</a></p>
</li>
</ul>
<p>Gradle Plugin 还和 Android SDK BuildTool 有关联,因为它还负责和编译相关的功能，这也是为何我们要在 build.gradle 里注明 buildToolsVersion 的原因。</p>
<h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p><img src="http://nunu03.github.io/2021/07/07/Gradle%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/debug.jpg" alt="debug调试"></p>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>先看一下<a href="https://juejin.cn/post/6844904142725447687#heading-29" target="_blank" rel="noopener">来自掘金社区</a>Gradle构建的核心流程图<br><img src="http://nunu03.github.io/2021/07/07/Gradle%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.image" alt="核心流程图"><br>时序图：<br><img src="http://nunu03.github.io/2021/07/07/Gradle%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/pretask.png" alt="时序图"><br>1.当我们执行一个 gralde 命令时，便会调用 gradle/wrapper/gradle-wrapper.jar 里面 org.gradle.wrapper.GradleWrapperMain 类的 main 方法，它就是 gradle 的一个入口方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        ......</span><br><span class="line">        WrapperExecutor wrapperExecutor = WrapperExecutor.forWrapperPropertiesFile(propertiesFile);</span><br><span class="line">        wrapperExecutor.execute(</span><br><span class="line">                args,</span><br><span class="line">                new Install(logger, new Download(logger, &quot;gradlew&quot;, UNKNOWN_VERSION), new PathAssembler(gradleUserHome)),</span><br><span class="line">                new BootstrapMainStarter());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2.WrapperExecutor 的 execute 方法:createDist,会根据config的配置去校验版本和下载gradle wrapper需要的依赖与源码；start方法开始执行gradle的构建流程。Gradle对应版本下载完成之后，Gradle Wrapper的使命基本完成了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void execute(String[] args, Install install, BootstrapMainStarter bootstrapMainStarter) throws Exception &#123;</span><br><span class="line">        File gradleHome = install.createDist(config);</span><br><span class="line">        bootstrapMainStarter.start(args, gradleHome);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>3.<br>BootstrapMainStarter的start做了什么：就是调用GradleMain里的main方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void start(String[] args, File gradleHome) throws Exception &#123;</span><br><span class="line">        ......</span><br><span class="line">        Class&lt;?&gt; mainClass = contextClassLoader.loadClass(&quot;org.gradle.launcher.GradleMain&quot;);</span><br><span class="line">        Method mainMethod = mainClass.getMethod(&quot;main&quot;, String[].class);</span><br><span class="line">        mainMethod.invoke(null, new Object[]&#123;args&#125;);</span><br><span class="line">        if (contextClassLoader instanceof Closeable) &#123;</span><br><span class="line">            ((Closeable) contextClassLoader).close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>4.GradleMain不解释。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">        new ProcessBootstrap().run(&quot;org.gradle.launcher.Main&quot;, args);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>5.Main</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">       new Main().run(args);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   @Override</span><br><span class="line">   protected void doAction(String[] args, ExecutionListener listener) &#123;</span><br><span class="line">       createActionFactory().convert(Arrays.asList(args)).execute(listener);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   CommandLineActionFactory createActionFactory() &#123;</span><br><span class="line">       return new DefaultCommandLineActionFactory();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>6.DefaultCommandLineActionFactory</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public CommandLineExecution convert(List&lt;String&gt; args) &#123;</span><br><span class="line">        ......</span><br><span class="line">        return new WithLogging(loggingServices,</span><br><span class="line">            args,</span><br><span class="line">            loggingConfiguration,</span><br><span class="line">            new ParseAndBuildAction(loggingServices, args),</span><br><span class="line">            new BuildExceptionReporter(loggingServices.get(StyledTextOutputFactory.class), loggingConfiguration, clientMetaData()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void execute(ExecutionListener executionListener) &#123;</span><br><span class="line">            ......</span><br><span class="line">            Action&lt;? super ExecutionListener&gt; action;</span><br><span class="line">            try &#123;</span><br><span class="line">                ParsedCommandLine commandLine = parser.parse(args);</span><br><span class="line">                action = createAction(actions, parser, commandLine);</span><br><span class="line">            &#125; catch (CommandLineArgumentException e) &#123;</span><br><span class="line">                action = new CommandLineParseFailureAction(parser, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            action.execute(executionListener);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2021/07/07/Gradle%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/pretask2.jpg" alt="时序图"><br>1.BuildActionsFactory</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">private Runnable runBuildInProcess(StartParameterInternal startParameter, DaemonParameters daemonParameters) &#123;</span><br><span class="line">    ServiceRegistry globalServices = ServiceRegistryBuilder.builder()</span><br><span class="line">            .displayName(&quot;Global services&quot;)</span><br><span class="line">            .parent(loggingServices)</span><br><span class="line">            .parent(NativeServices.getInstance())</span><br><span class="line">            .provider(new GlobalScopeServices(startParameter.isContinuous()))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    // Force the user home services to be stopped first, the dependencies between the user home services and the global services are not preserved currently</span><br><span class="line">    return runBuildAndCloseServices(startParameter, daemonParameters, globalServices.get(BuildExecuter.class), globalServices, globalServices.get(GradleUserHomeScopeServiceRegistry.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public ServiceRegistry build() &#123;</span><br><span class="line">    DefaultServiceRegistry registry = new DefaultServiceRegistry(displayName, parents.toArray(new ServiceRegistry[0]));</span><br><span class="line">    for (Object provider : providers) &#123;</span><br><span class="line">        registry.addProvider(provider);</span><br><span class="line">    &#125;</span><br><span class="line">    return registry;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private Runnable runBuildAndCloseServices(StartParameterInternal startParameter, DaemonParameters daemonParameters, BuildActionExecuter&lt;BuildActionParameters&gt; executer, ServiceRegistry sharedServices, Object... stopBeforeSharedServices) &#123;</span><br><span class="line">        BuildActionParameters parameters = createBuildActionParameters(startParameter, daemonParameters);</span><br><span class="line">        Stoppable stoppable = new CompositeStoppable().add(stopBeforeSharedServices).add(sharedServices);</span><br><span class="line">        return new RunBuildAction(executer, startParameter, clientMetaData(), getBuildStartTime(), parameters, sharedServices, stoppable);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>2.DefaultServiceRegistry</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">private void findProviderMethods(Object target) &#123;</span><br><span class="line">    Class&lt;?&gt; type = target.getClass();</span><br><span class="line">    RelevantMethods methods = RelevantMethods.getMethods(type);</span><br><span class="line">    for (ServiceMethod method : methods.decorators) &#123;</span><br><span class="line">        if (parentServices == null) &#123;</span><br><span class="line">            throw new ServiceLookupException(String.format(&quot;Cannot use decorator method %s.%s() when no parent registry is provided.&quot;, type.getSimpleName(), method.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        ownServices.add(new FactoryMethodService(this, target, method));</span><br><span class="line">    &#125;</span><br><span class="line">    for (ServiceMethod method : methods.factories) &#123;</span><br><span class="line">        ownServices.add(new FactoryMethodService(this, target, method));</span><br><span class="line">    &#125;</span><br><span class="line">    for (ServiceMethod method : methods.configurers) &#123;</span><br><span class="line">        applyConfigureMethod(method, target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void applyConfigureMethod(ServiceMethod method, Object target) &#123;</span><br><span class="line">    Object[] params = new Object[method.getParameterTypes().length];</span><br><span class="line">    for (int i = 0; i &lt; method.getParameterTypes().length; i++) &#123;</span><br><span class="line">        Type paramType = method.getParameterTypes()[i];</span><br><span class="line">        if (paramType.equals(ServiceRegistration.class)) &#123;</span><br><span class="line">            params[i] = newRegistration();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Service paramProvider = find(paramType, allServices);</span><br><span class="line">            if (paramProvider == null) &#123;</span><br><span class="line">                throw new ServiceLookupException(String.format(&quot;Cannot configure services using %s.%s() as required service of type %s is not available.&quot;,</span><br><span class="line">                    method.getOwner().getSimpleName(),</span><br><span class="line">                    method.getName(),</span><br><span class="line">                    format(paramType)));</span><br><span class="line">            &#125;</span><br><span class="line">            params[i] = paramProvider.get();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    try &#123;</span><br><span class="line">        method.invoke(target, params);</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.GlobalScopeServices</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void configure(ServiceRegistration registration, ClassLoaderRegistry classLoaderRegistry) &#123;</span><br><span class="line">    registration.add(ClassLoaderScopeListeners.class);</span><br><span class="line">    final List&lt;PluginServiceRegistry&gt; pluginServiceFactories = new DefaultServiceLocator(classLoaderRegistry.getRuntimeClassLoader(), classLoaderRegistry.getPluginsClassLoader()).getAll(PluginServiceRegistry.class);</span><br><span class="line">    for (PluginServiceRegistry pluginServiceRegistry : pluginServiceFactories) &#123;</span><br><span class="line">        registration.add(PluginServiceRegistry.class, pluginServiceRegistry);</span><br><span class="line">        pluginServiceRegistry.registerGlobalServices(registration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.LauncherServices</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public void registerGlobalServices(ServiceRegistration registration) &#123;</span><br><span class="line">    registration.addProvider(new ToolingGlobalScopeServices());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.InProcessBuildActionExecuter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public BuildActionResult execute(final BuildAction action, final BuildRequestContext buildRequestContext, BuildActionParameters actionParameters, ServiceRegistry contextServices) &#123;</span><br><span class="line">       BuildStateRegistry buildRegistry = contextServices.get(BuildStateRegistry.class);</span><br><span class="line">       final PayloadSerializer payloadSerializer = contextServices.get(PayloadSerializer.class);</span><br><span class="line">       BuildOperationNotificationValve buildOperationNotificationValve = contextServices.get(BuildOperationNotificationValve.class);</span><br><span class="line"></span><br><span class="line">       buildOperationNotificationValve.start();</span><br><span class="line">       try &#123;</span><br><span class="line">           RootBuildState rootBuild = buildRegistry.createRootBuild(BuildDefinition.fromStartParameter(action.getStartParameter(), null));</span><br><span class="line">           return rootBuild.run(new Transformer&lt;BuildActionResult, BuildController&gt;() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public BuildActionResult transform(BuildController buildController) &#123;</span><br><span class="line">                   BuildActionRunner.Result result = buildActionRunner.run(action, buildController);</span><br><span class="line">                   if (result.getBuildFailure() == null) &#123;</span><br><span class="line">                       return BuildActionResult.of(payloadSerializer.serialize(result.getClientResult()));</span><br><span class="line">                   &#125;</span><br><span class="line">                   if (buildRequestContext.getCancellationToken().isCancellationRequested()) &#123;</span><br><span class="line">                       return BuildActionResult.cancelled(payloadSerializer.serialize(result.getBuildFailure()));</span><br><span class="line">                   &#125;</span><br><span class="line">                   return BuildActionResult.failed(payloadSerializer.serialize(result.getClientFailure()));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br><span class="line">       &#125; finally &#123;</span><br><span class="line">           buildOperationNotificationValve.stop();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2021/07/07/Gradle%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B/pretask3.png" alt="时序图"><br>1.InProcessBuildActionExecuter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    RootBuildState rootBuild = buildRegistry.createRootBuild(BuildDefinition.fromStartParameter(action.getStartParameter(), null));</span><br><span class="line">    return rootBuild.run(new Transformer&lt;BuildActionResult, BuildController&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public BuildActionResult transform(BuildController buildController) &#123;</span><br><span class="line">            BuildActionRunner.Result result = buildActionRunner.run(action, buildController);</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">    buildOperationNotificationValve.stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.DefaultRootBuildState</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T run(Transformer&lt;T, ? super BuildController&gt; buildAction) &#123;</span><br><span class="line">    final GradleBuildController buildController = new GradleBuildController(gradleLauncher);</span><br><span class="line">    RootBuildLifecycleListener buildLifecycleListener = listenerManager.getBroadcaster(RootBuildLifecycleListener.class);</span><br><span class="line">    GradleInternal gradle = buildController.getGradle();</span><br><span class="line">    buildLifecycleListener.afterStart(gradle);</span><br><span class="line">    try &#123;</span><br><span class="line">        return buildAction.transform(buildController);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        buildLifecycleListener.beforeComplete(gradle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.GradleBuildController</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public GradleInternal run() &#123;</span><br><span class="line">    return doBuild(GradleInternal.BuildType.TASKS, new Action&lt;GradleLauncher&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void execute(@Nonnull GradleLauncher gradleLauncher) &#123;</span><br><span class="line">            gradleLauncher.executeTasks();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.DefaultGradleLauncher</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">private void doClassicBuildStages(Stage upTo) &#123;</span><br><span class="line">    if (stage == null) &#123;</span><br><span class="line">        instantExecution.prepareForBuildLogicExecution();</span><br><span class="line">    &#125;</span><br><span class="line">    prepareSettings();</span><br><span class="line">    if (upTo == Stage.LoadSettings) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    prepareProjects();</span><br><span class="line">    if (upTo == Stage.Configure) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    prepareTaskExecution();</span><br><span class="line">    if (upTo == Stage.TaskGraph) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    instantExecution.saveScheduledWork();</span><br><span class="line">    runWork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Task源码对应"><a href="#Task源码对应" class="headerlink" title="Task源码对应"></a>Task源码对应</h2><table>
<thead>
<tr>
<th>Task Name</th>
<th>Class Name</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>preBuild</td>
<td></td>
<td>空 task，只做锚点使用</td>
</tr>
<tr>
<td>preDebugBuild</td>
<td></td>
<td>空 task，只做锚点使用，与 preBuild 区别是这个 task 是 variant 的锚点</td>
</tr>
<tr>
<td>compileDebugAidl</td>
<td>AidlCompile</td>
<td>处理 aidl</td>
</tr>
<tr>
<td>compileDebugRenderscript</td>
<td>RenderscriptCompile</td>
<td>处理 renderscript</td>
</tr>
<tr>
<td>checkDebugManifest</td>
<td>CheckManifest</td>
<td>检测 manifest 是否存在</td>
</tr>
<tr>
<td>generateDebugBuildConfig</td>
<td>GenerateBuildConfig</td>
<td>生成 BuildConfig.java</td>
</tr>
<tr>
<td>prepareLintJar</td>
<td>PrepareLintJar</td>
<td>拷贝 lint jar 包到指定位置</td>
</tr>
<tr>
<td>generateDebugResValues</td>
<td>GenerateResValues</td>
<td>生成 resvalues，generated.xml</td>
</tr>
<tr>
<td>generateDebugResources</td>
<td></td>
<td>空 task，锚点</td>
</tr>
<tr>
<td>mergeDebugResources</td>
<td>MergeResources</td>
<td>合并资源文件</td>
</tr>
<tr>
<td>createDebugCompatibleScreenManifests</td>
<td>CompatibleScreensManifest</td>
<td>manifest 文件中生成 compatible-screens，指定屏幕适配</td>
</tr>
<tr>
<td>processDebugManifest</td>
<td>MergeManifests</td>
<td>合并 manifest 文件</td>
</tr>
<tr>
<td>splitsDiscoveryTaskDebug</td>
<td>SplitsDiscovery</td>
<td>生成 split-list.json，用于 apk 分包</td>
</tr>
<tr>
<td>processDebugResources</td>
<td>ProcessAndroidResources</td>
<td>aapt 打包资源</td>
</tr>
<tr>
<td>generateDebugSources</td>
<td></td>
<td>空 task，锚点</td>
</tr>
<tr>
<td>javaPreCompileDebug</td>
<td>JavaPreCompileTask</td>
<td>生成 annotationProcessors.json 文件</td>
</tr>
<tr>
<td>compileDebugJavaWithJavac</td>
<td>AndroidJavaCompile</td>
<td>编译 java 文件</td>
</tr>
<tr>
<td>compileDebugNdk</td>
<td>NdkCompile</td>
<td>编译 ndk</td>
</tr>
<tr>
<td>compileDebugSources</td>
<td></td>
<td>空 task，锚点使用</td>
</tr>
<tr>
<td>mergeDebugShaders</td>
<td>MergeSourceSetFolders</td>
<td>合并 shader 文件</td>
</tr>
<tr>
<td>compileDebugShaders</td>
<td>ShaderCompile</td>
<td>编译 shaders</td>
</tr>
<tr>
<td>generateDebugAssets</td>
<td></td>
<td>空 task，锚点</td>
</tr>
<tr>
<td>mergeDebugAssets</td>
<td>MergeSourceSetFolders</td>
<td>合并 assets 文件</td>
</tr>
<tr>
<td>transformClassesWithDexBuilderForDebug</td>
<td>DexArchiveBuilderTransform</td>
<td>class 打包 dex</td>
</tr>
<tr>
<td>transformDexArchiveWithExternalLibsDexMergerForDebug</td>
<td>ExternalLibsMergerTransform</td>
<td>打包三方库的 dex，在 dex 增量的时候就不需要再 merge 了，节省时间</td>
</tr>
<tr>
<td>transformDexArchiveWithDexMergerForDebug</td>
<td>DexMergerTransform</td>
<td>打包最终的 dex</td>
</tr>
<tr>
<td>mergeDebugJniLibFolders</td>
<td>MergeSouceSetFolders</td>
<td>合并 jni lib 文件</td>
</tr>
<tr>
<td>transformNativeLibsWithMergeJniLibsForDebug</td>
<td>MergeJavaResourcesTransform</td>
<td>合并 jnilibs</td>
</tr>
<tr>
<td>transformNativeLibsWithStripDebugSymbolForDebug</td>
<td>StripDebugSymbolTransform</td>
<td>去掉 native lib 里的 debug 符号</td>
</tr>
<tr>
<td>processDebugJavaRes</td>
<td>ProcessJavaResConfigAction</td>
<td>处理 java res</td>
</tr>
<tr>
<td>transformResourcesWithMergeJavaResForDebug</td>
<td>MergeJavaResourcesTransform</td>
<td>合并 java res</td>
</tr>
<tr>
<td>validateSigningDebug</td>
<td>ValidateSigningTask</td>
<td>验证签名</td>
</tr>
<tr>
<td>packageDebug</td>
<td>PackageApplication</td>
<td>打包 apk</td>
</tr>
<tr>
<td>assembleDebug</td>
<td></td>
<td>空 task，锚点</td>
</tr>
</tbody></table>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/jiangxinnju/p/8229129.html" target="_blank" rel="noopener">Gradle、Gradle Wrapper与Android Plugin for Gradle的区别和联系</a><br><a href="https://www.cnblogs.com/mingfeng002/p/11751309.html" target="_blank" rel="noopener">Gradle之Android Gradle Plugin 主要 Task 分析</a></p>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Gradle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人脸检测之Haar特征介绍]]></title>
      <url>/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="Haar特征"><a href="#Haar特征" class="headerlink" title="Haar特征"></a>Haar特征</h2><p>图像特征提取的三种方式：HOG特征，LBP特征，Haar特征。Haar特征：也叫Haar-like特征、哈尔特征，是图像特征提取的一种方法。</p>
<a id="more"></a>
<p>Haar特征分为三类：边缘特征、线性特征、特定方向特征（中心特征和对角线特征），组合成特征模板。<font color="#FF0000">特征模板内有白色和黑色两种矩形，并定义该模板的特征值为白色矩形像素和减去黑色矩形像素和。</font>Haar特征值反映了图像的灰度变化情况。例如：脸部的一些特征能由矩形特征简单的描述，如：眼睛要比脸颊颜色要深，鼻梁两侧比鼻梁颜色要深，嘴巴比周围颜色要深等。但矩形特征只对一些简单的图形结构，如边缘、线段较敏感，所以只能描述特定走向（水平、垂直、对角）的结构。</p>
<p><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-model.drawio.png" alt="Haar特征"></p>
<p>常用的矩形特征有三种：两矩形特征、三矩形特征、四矩形特征：如边缘特征是两矩形特征，线性特征是三矩形特征，特定方向特征是四矩形特征。如果特征模版的黑白矩形按宽高比来分段的话，那具体的比例如下表：<br><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-scalemodel.drawio.png" alt="s,t比例"></p>
<h2 id="Haar特征个数计算"><a href="#Haar特征个数计算" class="headerlink" title="Haar特征个数计算"></a>Haar特征个数计算</h2><p>通过改变特征模板的大小和位置，可在图像子窗口中穷举出大量的特征。上图的特征模板称为“特征原型”；<font color="#FF0000">特征原型在图像子窗口中扩展（平移伸缩）得到的特征称为“矩形特征”；矩形特征的值称为“特征值”。</font><br>对于 m×m 子窗口，我们只需要确定了矩形左上顶点A(x1,y1)和右下顶点B(x2,y2) ，即可以确定一个矩形；如果这个矩形还必须满足下面两个条件（称为(s, t)条件，满足(s, t)条件的矩形称为条件矩形）：</p>
<p>1) x 方向边长必须能被自然数s 整除（能均等分成s 段）；<br>2) y 方向边长必须能被自然数t 整除（能均等分成t 段）；<br>则 ， <font color="#FF0000">这个矩形的最小尺寸为s×t 或t×s，</font> 最大尺寸为[m/s]·s×[m/t]·t 或[m/t]·t×[m/s]·s；其中[ ]为取整运算符。</p>
<p><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-image.drawio.png" alt="特征计算-公式"><br>这种计算方式可能不太直观，那用下面的列表方式看一下就很清楚了，我们知道特征原型在图像窗口中根据平移伸缩得到矩形特征。<br><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-transm.drawio.png" alt="特征计算-平移缩放"><br>综上，可以计算出24x24的特征总数为 43200+27600+43200+27600+20736=162336。所以五种可能的类型就产生了16万以上的特征数量，同时也就是16万以上的特征值，这个是一个非常大数字了。上图通过代码进行计算就是如下：</p>
<p>计算某一种特征的特征数量；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">totalCount(24,24,2,2);</span><br></pre></td></tr></table></figure>

<p>特征数量的计算函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> private int totalCount(int width,int height,int scaleWidth,int scaleHeight)&#123;</span><br><span class="line">    int total =0;</span><br><span class="line">    for(int i : new Range(scaleWidth, width+1, scaleWidth))&#123;</span><br><span class="line">        for(int j : new Range(scaleHeight, height+1, scaleHeight))&#123;</span><br><span class="line">            total += (width -i +1) * (height - j+1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.e(&quot;---count&quot;,total+&quot;&quot;);</span><br><span class="line">    return total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现类似python的range函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">public class Range implements Iterable&lt;Integer&gt; &#123;</span><br><span class="line">    private final int start;</span><br><span class="line">    private final int end;</span><br><span class="line">    private final int step;</span><br><span class="line"></span><br><span class="line">    public Range(int end) &#123;</span><br><span class="line">        this(0, end, 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Range(int start, int end) &#123;</span><br><span class="line">        this(start, end, 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Range(int start, int end, int step) &#123;</span><br><span class="line">        this.start = start;</span><br><span class="line">        this.end = end;</span><br><span class="line">        this.step = step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Iterator&lt;Integer&gt; iterator() &#123;</span><br><span class="line">        return new Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class Itr implements Iterator&lt;Integer&gt; &#123;</span><br><span class="line">        int current = start;</span><br><span class="line">        @Override</span><br><span class="line">        public boolean hasNext() &#123;</span><br><span class="line">            return step &gt; 0 ? current &lt; end : current &gt; end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public Integer next() &#123;</span><br><span class="line">            int t = current;</span><br><span class="line">            current += step;</span><br><span class="line">            return t;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void remove() &#123;</span><br><span class="line">            Iterator.super.remove();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @RequiresApi(api = Build.VERSION_CODES.N)</span><br><span class="line">        @Override</span><br><span class="line">        public void forEachRemaining(@NonNull Consumer&lt;? super Integer&gt; action) &#123;</span><br><span class="line">            Iterator.super.forEachRemaining(action);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="积分图"><a href="#积分图" class="headerlink" title="积分图"></a>积分图</h2><p>积分图就是只遍历一次图像就可以求出图像中所有区域像素和的快速算法，大大的提高了图像特征值计算的效率。<br>积分图主要的思想是将图像从起点开始到各个点所形成的矩形区域像素之和作为一个数组的元素保存在内存中，当要计算某个区域的像素和时可以直接索引数组的元素，不用重新计算这个区域的像素和，从而加快了计算（这有个相应的称呼，叫做动态规划算法）。积分图能够在多种尺度下，使用相同的时间（常数时间）来计算不同的特征，因此大大提高了检测速度。</p>
<p>积分图是一种能够描述全局信息的矩阵表示方法。积分图的构造方式是位置（𝑖,𝑗）处的值𝑖𝑖(𝑖,𝑗)是原图像(𝑖,𝑗)左上角方向所有像素𝑓(𝑘,𝑙)的和：<br>𝑖𝑖(𝑖,𝑗)=∑𝑘≤𝑖,𝑙≤𝑗𝑓(𝑘,𝑙)</p>
<p>积分图构建算法：</p>
<p>1、用𝑠(𝑖,𝑗)表示行方向的累加和，初始化𝑠(𝑖,−1)=0；</p>
<p>2、使用𝑖𝑖(𝑖,𝑗)表示一个积分图像，初始化𝑖𝑖(−1,𝑖)=0；</p>
<p>3、逐行扫描图像，递归计算每个像素(𝑖,𝑗)行方向的累加和𝑠(𝑖,𝑗)和积分图像𝑖𝑖(𝑖,𝑗)的值：</p>
<p>𝑠(𝑖,𝑗)=𝑠(𝑖,𝑗−1)+𝑓(𝑖,𝑗)</p>
<p>𝑖𝑖(𝑖,𝑗)=𝑖𝑖(𝑖−1,𝑗)+𝑠(𝑖,𝑗)</p>
<p>4、扫描图像一遍，当到达图像右下角像素时，积分图像𝑖𝑖就构建好了。</p>
<p>积分图构造好之后，图像中任何矩阵区域像素累加和都可以通过简单运算得到如图所示：<br><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-jifen.drawio.png" alt="积分图"></p>
<p>在图M中，设D的四个顶点分别为a,b,c,d,则D的像素可以表示为：<br>𝐷𝑠𝑢𝑚=𝑖𝑖(a)+𝑖𝑖(d)−(𝑖𝑖(b)+𝑖𝑖(c))<br>看起来还是很抽象：那我们看图N，我们分别假设ABCD四个矩形的像素为1，2，3，4.<br>所以<br>a点像素值：1<br>b点像素值：1+2=3<br>c点像素值：1+3=4<br>d点像素值：1+2+3+4=10<br>验证下上面公式：1+10-（3+4）=4，所以矩形D=4是正确的。还是不直观，那我们用图表验证下：</p>
<p><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-jifensample.drawio.png" alt="积分图图例"></p>
<p>可以看到，(𝑖𝑖(b)+𝑖𝑖(c))后，有一部分重合的区域，即A，所以需减掉，最后还需要将当前坐标d的像素值D包含进来。<br>(𝑖𝑖(b)+𝑖𝑖(c))-A+D = 𝑖𝑖(d) ==&gt; D= 𝑖𝑖(d) + A - (𝑖𝑖(b)+𝑖𝑖(c)) 由于A=𝑖𝑖(a)所以可以推出<br>𝐷𝑠𝑢𝑚=𝑖𝑖(a)+𝑖𝑖(d)−(𝑖𝑖(b)+𝑖𝑖(c))</p>
<p>所以无论矩形的尺寸大小，只需查找积分图像4次就可以求得任意矩形内像素值的和。</p>
<h2 id="计算特征值"><a href="#计算特征值" class="headerlink" title="计算特征值"></a>计算特征值</h2><p>上面已经知道，一个区域的像素值的和，可以由该区域的端点的积分图来计算。由前面特征模板的特征值的定义可以推出，矩形特征的特征值可以由特征端点的积分图计算出来。以A矩形特征为例，如下图，使用积分图计算其特征值：</p>
<p> <img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-featurevalue.drawio.png" alt="特征值-1"></p>
<p>该矩形特征的特征值，由定义，为区域A的像素值减去区域B的像素值。</p>
<p>区域A的像素值：<br>𝑖𝑖(5)+𝑖𝑖(1)−𝑖𝑖(2)−𝑖𝑖(4)<br>区域B的像素值：<br>𝑖𝑖(6)+𝑖𝑖(2)−𝑖𝑖(5)−𝑖𝑖(3)<br>所以：该矩形特征的特征值<br>𝑖𝑖(5)+𝑖𝑖(1)−𝑖𝑖(2)−𝑖𝑖(4)−[𝑖𝑖(6)+𝑖𝑖(2)−𝑖𝑖(5)−𝑖𝑖(3)]<br>=[𝑖𝑖(5)−𝑖𝑖(4)]+[𝑖𝑖(3)−𝑖𝑖(2)]−[𝑖𝑖(2)−𝑖𝑖(1)]−[𝑖𝑖(6)−𝑖𝑖(5)]<br>所以，矩形特征的特征值，只与特征矩形的端点的积分图有关，而与图像的坐标无关。通过计算特征矩形的端点的积分图，再进行简单的加减运算，就可以得到特征值，正因为如此，特征的计算速度大大提高，也提高了目标的检测速度。</p>
<p>然后看一个复杂一点的积分图示例如下：</p>
<p><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-x3-jifen.drawio.png" alt="特征值-2"></p>
<p><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-x3-special.drawio.png" alt="特征值-积分图"></p>
<p>然后计算一下颜色区域的特征值：</p>
<p>根据积分图公式：</p>
<p>特征A：2<br>总的像素值（有颜色区域的像素值）= 130+8-32-33 = 73<br>    白色区域的像素值 = 91+14-18-62 = 25<br>    特征值：3<em>白-总 =    3</em>25 -23 = 2</p>
<p>左侧黑色区域的像素值 =  62+8-14-33 = 23<br>右侧黑色区域的像素值 =  130+18-32-91 = 25<br>    特征值：2<em>白-黑 =  2</em>25-23+25 = 2</p>
<p>通过同样计算方式：特征B：-2<br>这个时候我们会发现，跟之前提到的特征值定义，不符合了，之前说过特征值为白色矩形像素和减去黑色矩形像素和，按此计算，应该是-23和23.那么问题在哪里？看上述我们计算发现，我们在计算特征值的时候都乘以了一个变量，3和2，那为啥要乘以两个变量呢？按照OpenCV代码，<font color="#FF0000">（Haar特征值=整个Haar区域内像素和×权重 + 黑色区域内像素和×权重）Haar特征值=白色区域内图像像素和 x 权重 - 黑色区域内图像像素和 x 权重</font>，那变量3和2其实就是权重。这也就是其他文章中提到的所谓“白色区域像素和减去黑色区域像素和”，只不过是加权相减而已（在XML文件中，每一个Haar特征都被保存在2~3个形如<x y width height weight>的标签中，其中x和y代表Haar矩形左上角点以检测窗口的左上角为原点的坐标，width和height代表矩形框的宽和高，而weight则对应了上面说的权重值。</x></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;rects&gt;</span><br><span class="line">    &lt;_&gt; 7 1 2 7 -1.&lt;/_&gt;</span><br><span class="line">    &lt;_&gt;  8 1 1 7 2.&lt;/_&gt;</span><br><span class="line">&lt;/rects&gt;</span><br></pre></td></tr></table></figure>

<p>例如上Haar特征应该表示为&lt;7 1 2 7 -1&gt;和&lt;8 1 1 7 2&gt;，原则上-1权重代表的是黑色矩形。<br>为什么要设置这种加权相减，而不是直接相减？请仔细观察上图中的特征，不难发现x3、y3、point特征黑白面积不相等，而其他特征黑白面积相等。设置权值就是为了抵消面积不等带来的影响，保证所有Haar特征的特征值在“灰度分布绝对均匀的图像”中为0。</p>
<h2 id="级联分类器"><a href="#级联分类器" class="headerlink" title="级联分类器"></a>级联分类器</h2><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/xml.jpg" alt="haar-xml"></p>
<h3 id="分类器"><a href="#分类器" class="headerlink" title="分类器"></a>分类器</h3><p><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/xml-node.jpg" alt="haar-stages"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;internalNodes&gt;0 1 2 5.2434601821005344e-04 -1 -2 3 4.4573000632226467e-03&lt;/internalNodes&gt;</span><br><span class="line">&lt;leafValues&gt; 1.0216630250215530e-01 1.2384019792079926e-01 6.9103831052780151e-01&lt;/leafValues&gt;&lt;/_&gt;</span><br></pre></td></tr></table></figure>

<p>internalNodes:<br>0 、1,-1 、-2,则用于控制弱分类器树的形状；<br>5.2434601821005344e-04，弱分类器阈值t1；<br>4.4573000632226467e-03，弱分类器阈值t2；<br>2 、3 代表2个Haar特征位置；</p>
<p>leafValues：返回值。<br>其中标签中的3个浮点数，对应下图的三个value值，由左向右依次是rightValue2、leftValue和rightValue1；</p>
<p><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-shu.drawio.png" alt="haar-树"></p>
<p>1.计算第一个Haar特征的特征值haar1，与第一个弱分类器阈值t1对比，当haar1&lt;t1时，进入步骤2；当haar1&gt;t1时候，该弱分类器输出rightValue2并结束。<br>2.计算第二个Haar特征值haar2，与第二个弱分类器阈值t2对比，当haar2&lt;t2时候输出leftValue；当haar2&gt;t2时输出rightValue1。</p>
<p><img src="http://nunu03.github.io/2021/04/27/%E4%BA%BA%E8%84%B8%E6%A3%80%E6%B5%8B%E4%B9%8BHaar%E7%89%B9%E5%BE%81%E4%BB%8B%E7%BB%8D/haar-shu2.drawio.png" alt="haar-树"></p>
<p>1、0和-1、-2则用于控制弱分类器树的形状。在运行时，OpenCV会把1赋值给当前的node.left，并把0赋值给node.right（请注意do-while代码中的条件，只有idx&lt;=0时才停止循环，参考图3应该可以理解这4个整数的含义）。如此，OpenCV通过这些巧妙的数值和结构，控制了整个分类器的运行。可以看到，每个弱分类器内部都是类似于这种树状的“串联”结构，所以我称其为“串联组成的的弱分类器”。</p>
<h3 id="强分类器结构"><a href="#强分类器结构" class="headerlink" title="强分类器结构"></a>强分类器结构</h3><p>在opencv中，强分类器是有多个弱分类器“并列”构成，即强分类器中的弱分类器是两两相互独立的。在目标检测时，每个弱分类器独立运行并输出cascadeLeaves[leafOfs-idx]值，然后把当前强分类器中每个弱分类器的输出值相加，即：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum += cascadeLeaves[leafOfs - idx];</span><br></pre></td></tr></table></figure>

<p>之后与本级强分类器的stageThreshold阈值对比，当且仅当结果sum&gt;stageThreshold时，认为当前检测窗口通过了该级强分类器。当前检测窗口通过所有强分类器时，才被认为是一个检测目标。可以看出，强分类器与弱分类器结构不同，是一种类似于“并联”的结构，我称其为“并联组成的强分类器”。</p>
<h3 id="检测流程"><a href="#检测流程" class="headerlink" title="检测流程"></a>检测流程</h3><p>Haar级联分类器： 通过分析对比相邻图像区域来判断给定图像或者图像区域与已知对象是否匹配。<br>可以将多个Haar级联分类器组合起来，每个分类器负责匹配一个特征区域（比如眼睛），然后进行总体识别。<br>也可以一个分类器进行整体区域识别（比如人脸），其他分类器可识别小的部分（比如眼睛)等。<br>Haar特征具有尺度不变性，就是说它在尺度变换上具有鲁棒性。<br>Opencv提供了尺度不变的Haar级联分类器和跟踪器。但其并不具有旋转不变性。举个例子，opencv提供的Haar级联分类器并不认为侧脸和正脸一样，倒置的人脸和正脸一样。</p>
<p>训练过程： 输入图像-&gt;图像预处理-&gt;提取特征-&gt;训练分类器（二分类）-&gt;得到训练好的模型 ；<br>测试过程：输入图像-&gt;图像预处理-&gt;提取特征-&gt;导入模型-&gt;二分类（是不是所要检测的物体）；</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.opencv.org/2.4/doc/user_guide/ug_traincascade.html#opencv-createsamples-utility" target="_blank" rel="noopener">Cascade Classifier Training</a><br><a href="https://www.cnblogs.com/zyly/p/9410563.html#_label0" target="_blank" rel="noopener">人脸检测之Haar分类器</a><br><a href="https://www.cnblogs.com/codingmengmeng/p/6567124.html" target="_blank" rel="noopener">积分图及其应用</a><br><a href="https://zhuanlan.zhihu.com/p/38056144" target="_blank" rel="noopener">人脸Haar特征快速检测及其特征计算</a><br><a href="https://blog.csdn.net/liulina603/article/details/8617281" target="_blank" rel="noopener">Haar特征与积分图</a><br><a href="https://blog.csdn.net/beizhengren/article/details/77095724" target="_blank" rel="noopener">Haar特征详细介绍</a><br><a href="https://blog.csdn.net/lijihw_1022/article/details/51373971" target="_blank" rel="noopener">级联分类器结构与XML文件含义</a><br><a href="https://blog.csdn.net/monk1992/article/details/105988015" target="_blank" rel="noopener">adaboost+haar目标检测技术</a></p>
]]></content>
      
        <categories>
            
            <category> 人脸检测 </category>
            
            <category> Haar </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 人脸检测 </tag>
            
            <tag> Haar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenCV学习]]></title>
      <url>/2021/03/24/OpenCV%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h2 id="C-11-shared-ptr"><a href="#C-11-shared-ptr" class="headerlink" title="C++11 shared_ptr"></a>C++11 shared_ptr</h2><p>OpenCV提供了类似于C ++ 11中的std :: shared_ptr的Ptr模板类，用来实现自动内存管理。</p>
<a id="more"></a>]]></content>
      
        <categories>
            
            <category> OpenCV </category>
            
        </categories>
        
        
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日常问题解决记录]]></title>
      <url>/2021/02/25/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h1 id="指令配置相关"><a href="#指令配置相关" class="headerlink" title="指令配置相关"></a>指令配置相关</h1><h2 id="Git相关"><a href="#Git相关" class="headerlink" title="Git相关"></a>Git相关</h2><h3 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a>撤销commit</h3><p>1.git reset HEAD^ 撤销最后一次commit</p>
<h3 id="查看远端仓库地址"><a href="#查看远端仓库地址" class="headerlink" title="查看远端仓库地址"></a>查看远端仓库地址</h3><p>2.git remote -v 查看远端仓库地址</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01$ git remote -v</span><br><span class="line">origin  https://github.com/danengz/OpenCVDemo.git (fetch)</span><br><span class="line">origin  https://github.com/danengz/OpenCVDemo.git (push)</span><br></pre></td></tr></table></figure>

<h3 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01$ git stash list</span><br><span class="line">stash@&#123;0&#125;: On f-jy-10.16.0-teg-video-cyl: 接入teg video</span><br><span class="line">chenyulong01$ git stash clear</span><br><span class="line">chenyulong01$ git stash save &quot;接入teg video-jiaoyou&quot;</span><br><span class="line">chenyulong01$ git stash pop</span><br><span class="line">chenyulong01$ git stash apply 0</span><br><span class="line">chenyulong01$ git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Linux下Git命令中文显示乱码"><a href="#Linux下Git命令中文显示乱码" class="headerlink" title="Linux下Git命令中文显示乱码"></a>Linux下Git命令中文显示乱码</h3><p>提示异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   &quot;\347\211\210\346\234\254\347\256\241\347\220\206/.DS_Store&quot;</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line"></span><br><span class="line">        &quot;\347\211\210\346\234\254\347\256\241\347\220\206/\350\264\250\351\207\217\344\277\235\350\257\201/\346\265\213\350\257\225\347\224\250\344\276\213\351\233\206/\346\224\257\344\273\230\347\233\270\345\205\263.numbers&quot;</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br><span class="line">chenyulong01deMacBook-Pro:WbuDoc chenyulong01$ git config --global core.quotepath false</span><br><span class="line">chenyulong01deMacBook-Pro:WbuDoc chenyulong01$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with &apos;origin/master&apos;.</span><br><span class="line"></span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   .DS_Store</span><br><span class="line">        modified:   版本管理/.DS_Store</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br></pre></td></tr></table></figure>

<p>解决方案： <strong>git config –global core.quotepath false</strong></p>
<h3 id="github-token"><a href="#github-token" class="headerlink" title="github token"></a>github token</h3><p><a href="https://docs.github.com/cn/get-started/getting-started-with-git/updating-credentials-from-the-macos-keychain" target="_blank" rel="noopener">Mac修改网址</a><br>在钥匙串中搜索github.com，点显示密码：修改密码改成token即可：<br><img src="http://nunu03.github.io/2021/02/25/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/github-password.png" alt></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chenyuddddeMacBook-Pro:nunu03.github.io chenxxx$ git remote set-url origin https://ghp_fGtnlW3RO2ncOdCwi1UVNStf9l3eSE2Jjsdsfsd@github.com/chesdsd/nunu03.github.io.git/</span><br></pre></td></tr></table></figure>

<h2 id="gradle相关"><a href="#gradle相关" class="headerlink" title="gradle相关"></a>gradle相关</h2><h3 id="查看Gradle-Task对应源码类"><a href="#查看Gradle-Task对应源码类" class="headerlink" title="查看Gradle Task对应源码类"></a>查看Gradle Task对应源码类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01$ ./gradlew -q help --task app:mergeReleaseResources</span><br><span class="line">Detailed task information for app:mergeReleaseResources</span><br><span class="line">Path</span><br><span class="line">     :app:mergeReleaseResources</span><br><span class="line">Type</span><br><span class="line">     MergeResources (com.android.build.gradle.tasks.MergeResources)</span><br><span class="line">Description</span><br><span class="line">     -</span><br><span class="line">Group</span><br><span class="line">     -</span><br><span class="line">chenyulong01deMacBook-Pro:MyActivityTest chenyulong01$</span><br></pre></td></tr></table></figure>

<h3 id="bash-gradlew-Permission-denied"><a href="#bash-gradlew-Permission-denied" class="headerlink" title="bash: ./gradlew: Permission denied"></a>bash: ./gradlew: Permission denied</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x gradlew</span><br></pre></td></tr></table></figure>

<h2 id="sdkman"><a href="#sdkman" class="headerlink" title="sdkman"></a>sdkman</h2><h3 id="安装groovy"><a href="#安装groovy" class="headerlink" title="安装groovy"></a>安装groovy</h3><p>Simply open a new terminal and enter:<br>$ curl -s get.sdkman.io | bash<br>Follow the instructions on-screen to complete installation.<br>Open a new terminal or type the command:<br>$ source “$HOME/.sdkman/bin/sdkman-init.sh”<br>Then install the latest stable Groovy:<br>$ sdk install groovy<br>After installation is complete and you’ve made it your default version, test it with:<br>$ groovy -version<br>That’s all there is to it!</p>
<h3 id="配置路径使idea容易找到"><a href="#配置路径使idea容易找到" class="headerlink" title="配置路径使idea容易找到"></a>配置路径使idea容易找到</h3><p>sudo ln -s /usr/local/opt/groovy/libexec /Library/Groovy</p>
<h3 id="安装目录"><a href="#安装目录" class="headerlink" title="安装目录"></a>安装目录</h3><p>所有sdk都安装在了sdkman目录下：~/.sdkman/candidates/<br><a href="https://zhuanlan.zhihu.com/p/82315812" target="_blank" rel="noopener">sdkman介绍</a></p>
<h2 id="Mac系统如何显示隐藏文件？"><a href="#Mac系统如何显示隐藏文件？" class="headerlink" title="Mac系统如何显示隐藏文件？"></a>Mac系统如何显示隐藏文件？</h2><p>Command+Shift+. 可以显示隐藏文件、文件夹，再按一次，恢复隐藏；</p>
<h2 id="Linux-Mac下统计当前文件夹下的文件个数、目录个数"><a href="#Linux-Mac下统计当前文件夹下的文件个数、目录个数" class="headerlink" title="Linux/Mac下统计当前文件夹下的文件个数、目录个数"></a>Linux/Mac下统计当前文件夹下的文件个数、目录个数</h2><p>1.统计当前文件夹下文件的个数</p>
<pre><code>ls -l |grep &quot;^-&quot;|wc -l</code></pre><p>2、 统计当前文件夹下目录的个数</p>
<pre><code>ls -l |grep &quot;^d&quot;|wc -l</code></pre><p>3、 统计当前文件夹下文件的个数，包括子文件夹里的</p>
<pre><code>ls -lR|grep &quot;^-&quot;|wc -l</code></pre><p>4、统计文件夹下目录的个数，包括子文件夹里的</p>
<pre><code>ls -lR|grep &quot;^d&quot;|wc -l</code></pre><p>5、 说明</p>
<p>  代码如下:</p>
<pre><code>ls -l</code></pre><p>  长列表输出当前文件夹下文件信息(注意这里的文件，不同于一般的文件，可能是目录、链接、设备文件等)</p>
<p>  代码如下:</p>
<pre><code>grep &quot;^-&quot;</code></pre><p>  这里将长列表输出信息过滤一部分，只保留一般文件，如果只保留目录就是 ^d<br>  代码如下:</p>
<pre><code>wc -l</code></pre><p>  统计输出信息的行数，因为已经过滤得只剩一般文件了，所以统计结果就是一般文件信息的行数，又由于一行信息对应一个文件，所以也就是文件的个数。</p>
<h2 id="adb-backup"><a href="#adb-backup" class="headerlink" title="adb backup"></a>adb backup</h2><p>  1.备份：adb backup -f /Users/xxx/Desktop/photo/clientbackup.ab 包名<br>  2.Android backup extractor<br>  <a href="https://github.com/nelenkov/android-backup-extractor/releases" target="_blank" rel="noopener">下载abe.jar</a><br>  执行： java -jar /Users/xxx/Desktop/photo/abe.jar unpack /Users/xxx/Desktop/photo/clientbackup.ab   /Users/xxx/Desktop/photo/clientbackup.tar<br>  3.恢复：adb restore clientbackup.ab</p>
<h2 id="adb多用户操作"><a href="#adb多用户操作" class="headerlink" title="adb多用户操作"></a>adb多用户操作</h2><p>查看用户列表</p>
<blockquote>
<p>adb shell pm list users</p>
</blockquote>
<p>创建新用户</p>
<blockquote>
<p>adb shell pm create-user [–profileOf USER_ID] [–managed] USER_NAME</p>
</blockquote>
<blockquote>
<p>adb shell pm create-user 10 godv</p>
</blockquote>
<p>启动和切换用户</p>
<blockquote>
<p>adb shell am switch-user USER_ID</p>
</blockquote>
<blockquote>
<p>adb shell am start-user USER_ID</p>
</blockquote>
<p>安装应用到某个用户下</p>
<blockquote>
<p>adb install –user USER_ID name.apk</p>
</blockquote>
<p>删除用户</p>
<blockquote>
<p>adb shell pm remove-user USER_ID</p>
</blockquote>
<p>为了多用户下的数据安全性，在每个新用户创建之初，不管是外部存储（External Storage）还是app data目录，Android都为其准备了独立的文件存储</p>
<p>/storage/emulated/下拥有不同的用户分区</p>
<blockquote>
<p>/storage/emulated/0</p>
</blockquote>
<blockquote>
<p>/storage/emulated/10</p>
</blockquote>
<p>代码查看不同用户 以SDK为例 反射获取</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int uid = -1;</span><br><span class="line">try &#123;</span><br><span class="line">     Class clz = Class.forName(&quot;android.os.UserHandle&quot;);</span><br><span class="line">     Method m = clz.getDeclaredMethod(&quot;myUserId&quot;);</span><br><span class="line">     uid = (int) m.invoke(null);</span><br><span class="line">     &#125; catch (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>ContentResolver下的uri</p>
<blockquote>
<p>content:// USER_ID @media/external/audio/media</p>
</blockquote>
<p>即可获取不同用户下的不同数据<br><a href="https://blog.csdn.net/we1less/article/details/108280882?utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~aggregatepage~first_rank_v2~rank_aggregation-5-108280882.pc_agg_rank_aggregation&utm_term=adb+shell%E7%94%A8%E6%88%B7id&spm=1000.2123.3001.4430" target="_blank" rel="noopener">安卓adb多用户操作</a><br><a href="https://mazhuang.org/awesome-adb/" target="_blank" rel="noopener">awesome-adb</a><br><a href="https://www.cnblogs.com/onelikeone/p/11083983.html" target="_blank" rel="noopener">Android 多用户</a></p>
<h2 id="环境变量设置"><a href="#环境变量设置" class="headerlink" title="环境变量设置"></a>环境变量设置</h2><p>手动设置：</p>
<blockquote>
<p>chenyudeMacBook-Pro:~ chenyu$ open .bash_profile</p>
</blockquote>
<blockquote>
<p>chenyudeMacBook-Pro:~ chenyu$ source .bash_profile</p>
</blockquote>
<p>自动设置：</p>
<blockquote>
<p>export PATH=$PATH:/Users/chenyulong01/gradle/gradle-7.3/bin</p>
</blockquote>
<h2 id="端口查看"><a href="#端口查看" class="headerlink" title="端口查看"></a>端口查看</h2><blockquote>
<p>sudo lsof -i :8088 // 查看端口使用情况<br>sudo kill -9 47862 // 杀死展示的PID</p>
</blockquote>
<h2 id="npm-install-https-certificate"><a href="#npm-install-https-certificate" class="headerlink" title="npm install https certificate"></a>npm install https certificate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chenyudeMacBook-Pro:Robot chenyu$ npm install</span><br><span class="line">npm ERR! request to https://registry.cnpmjs.org/base-64 failed, reason: Hostname/IP doesn&apos;t match certificate&apos;s altnames: &quot;Host: registry.cnpmjs.org. is not in the cert&apos;s altnames: DNS:r.cnpmjs.org&quot;</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /Users/chenyu/.npm/_logs/2021-08-09T06_53_57_119Z-debug.log</span><br></pre></td></tr></table></figure>

<p>解决方案：关闭https认证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chenyudeMacBook-Pro:Robot chenyu$ npm config set strict-ssl false</span><br></pre></td></tr></table></figure>

<h2 id="nps穿透"><a href="#nps穿透" class="headerlink" title="nps穿透"></a>nps穿透</h2><p><strong>安装</strong></p>
<p>$ cd /opt/nps</p>
<p>$ ./nps install -config=/etc/nps/nps.conf</p>
<p><strong>启动</strong></p>
<p>$ sudo nps start</p>
<p><strong>其他命令</strong></p>
<p><strong>停止</strong></p>
<p>$ sudo nps stop</p>
<p><strong>客户端更新</strong></p>
<p>$ sudo nps-update update</p>
<p><strong>修改配置</strong></p>
<p>如果需要更换命令内容需要先卸载./nps uninstall，再重新安装</p>
<p>$ cd /opt/nps</p>
<p>$ ./nps uninstall</p>
<p><strong>成功后再重新安装</strong></p>
<p>$ ./nps install -config=/etc/nps/nps.conf</p>
<p><a href="https://blog.csdn.net/weixin_39992665/article/details/116770933?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7Edefault-6.control" target="_blank" rel="noopener">linux卸载nps,CentOS安装nps</a></p>
<h1 id="异常相关"><a href="#异常相关" class="headerlink" title="异常相关"></a>异常相关</h1><h2 id="Android-Studio-不能调试"><a href="#Android-Studio-不能调试" class="headerlink" title="Android Studio 不能调试"></a>Android Studio 不能调试</h2><p>提示异常：Attention! No symbol directories found - please check your native debug configuration</p>
<p>解决方案：在Android studio， file–&gt;settering—&gt;plugins—-android NDK support插件的选项去掉。重新编译后再debug就可以了。</p>
<p><a href="https://www.jianshu.com/p/3d8ddf8df1b6" target="_blank" rel="noopener">android studio无法debug解决方法</a></p>
<h2 id="Android-Studio-Connect-to-127-0-0-1-8888-127-0-0-1-failed-Connection-refused-Connection-refused"><a href="#Android-Studio-Connect-to-127-0-0-1-8888-127-0-0-1-failed-Connection-refused-Connection-refused" class="headerlink" title="Android Studio - Connect to 127.0.0.1:8888 [/127.0.0.1] failed: Connection refused (Connection refused)"></a>Android Studio - Connect to 127.0.0.1:8888 [/127.0.0.1] failed: Connection refused (Connection refused)</h2><blockquote>
<p>Could not resolve com.anjuke.android.community:communitymodule:1014-1.0.0.<br>Could not get resource ‘<a href="http://artifactory.58corp.com:8081/artifactory/android-public/com/anjuke/android/community/communitymodule/1014-1.0.0/communitymodule-1014-1.0.0.pom&#39;" target="_blank" rel="noopener">http://artifactory.58corp.com:8081/artifactory/android-public/com/anjuke/android/community/communitymodule/1014-1.0.0/communitymodule-1014-1.0.0.pom&#39;</a>.<br>Could not GET ‘<a href="http://artifactory.58corp.com:8081/artifactory/android-public/com/anjuke/android/community/communitymodule/1014-1.0.0/communitymodule-1014-1.0.0.pom&#39;" target="_blank" rel="noopener">http://artifactory.58corp.com:8081/artifactory/android-public/com/anjuke/android/community/communitymodule/1014-1.0.0/communitymodule-1014-1.0.0.pom&#39;</a>.<br>Connect to 127.0.0.1:8888 [/127.0.0.1] failed: Connection refused (Connection refused)</p>
</blockquote>
<p>解决方案：cmd：lsof -i，找到COMMAND java 对应的 PID，然后kill 98087  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01deMacBook-Pro:~ chenyulong01$ lsof -i</span><br><span class="line">COMMAND     PID         USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java      77690 chenyulong01  211u  IPv6 0x426c9f64949f384b      0t0  TCP *:65337 (LISTEN)</span><br><span class="line">chenyulong01deMacBook-Pro:~ chenyulong01$ </span><br><span class="line">chenyulong01deMacBook-Pro:~ chenyulong01$ kill 77690</span><br><span class="line">chenyulong01deMacBook-Pro:~ chenyulong01$</span><br></pre></td></tr></table></figure>

<h2 id="使用Xposed去hook方法TestArray-Person-person"><a href="#使用Xposed去hook方法TestArray-Person-person" class="headerlink" title="使用Xposed去hook方法TestArray(Person[] person)"></a>使用Xposed去hook方法TestArray(Person[] person)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; personClass = findClass(&quot;com.zq.inputmethodtest.Person&quot;,lpparam.classLoader);</span><br><span class="line">findAndHookMethod(&quot;com.zq.inputmethodtest.MainActivity&quot;, lpparam.classLoader,</span><br><span class="line">        &quot;TestArray&quot;,java.lang.reflect.Array.newInstance(personClass, 2).getClass(), new XC_MethodHook() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                param.setResult(&quot;person数组被修改&quot;);</span><br><span class="line">                Log.d(&quot;InputTest--&gt;after &quot;,&quot;&quot;+ param.getResult());</span><br><span class="line">            &#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Execution-failed-for-JetifyTransform"><a href="#Execution-failed-for-JetifyTransform" class="headerlink" title="Execution failed for JetifyTransform"></a>Execution failed for JetifyTransform</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Suggestions:</span><br><span class="line">            - If you believe this library doesn&apos;t need to be jetified (e.g., if it already supports AndroidX, or if it doesn&apos;t use support libraries/AndroidX at all), add android.jetifier.blacklist = &#123;&lt;!-- --&gt;comma-separated list of regular expressions (or simply names) of the libraries that you don&apos;t want to be jetified&#125; to the gradle.properties file.</span><br><span class="line">            - If you believe this library needs to be jetified (e.g., if it uses old support libraries and breaks your app if it isn&apos;t jetified), contact the library&apos;s authors to update this library to support AndroidX and use the supported version once it is released.</span><br></pre></td></tr></table></figure>

<p>解决方案：在gradle.properties配置文件中添加，android.jetifier.blacklist = common-27.1.0.jar,bundletool-0.14.0.jar</p>
<h2 id="Duplicate-jar-entry-a-class"><a href="#Duplicate-jar-entry-a-class" class="headerlink" title="Duplicate jar entry [a.class])"></a>Duplicate jar entry [a.class])</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Execution failed for task &apos;:58WuxianClient:minifyReleaseWithProguard&apos;.</span><br><span class="line">&gt; java.io.IOException: Can&apos;t write [/Users/chenyulong01/AndroidStudioProjects/58/58town/58ClientProject/58WuxianClient/build/intermediates/shrunk_jar/release/minified.jar] (Can&apos;t read [/Users/chenyulong01/.gradle/caches/transforms-2/files-2.1/1749dbd4dcd5d376e66539c8b1f84b24/jetified-asm-analysis-7.0.jar(;;;;;;;**.class)] (Duplicate jar entry [a.class]))</span><br></pre></td></tr></table></figure>

<p>解决方案：在gradle task 中，点击执行androidDependencies,打印出所有依赖列表，查找出重复对组，然后去去除依赖即可。<br><img src="http://nunu03.github.io/2021/02/25/%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E8%AE%B0%E5%BD%95/dependencies.jpg" alt></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--- org.ow2.asm:asm-commons:7.0@jar</span><br><span class="line">+--- org.ow2.asm:asm-util:7.0@jar</span><br><span class="line">+--- org.ow2.asm:asm-analysis:7.0@jar</span><br><span class="line">+--- org.ow2.asm:asm-tree:7.0@jar</span><br><span class="line"></span><br><span class="line">implementation (&apos;com.android.tools.build:gradle:4.0.2&apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                exclude group: &apos;javax.activation&apos;</span><br><span class="line">                exclude group: &apos;org.apache.httpcomponents&apos;</span><br><span class="line">                exclude group: &apos;org.ow2.asm&apos;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Duplicate-class-javax-activation-ActivationDataFlavor-found-in-modules"><a href="#Duplicate-class-javax-activation-ActivationDataFlavor-found-in-modules" class="headerlink" title="Duplicate class javax.activation.ActivationDataFlavor found in modules"></a>Duplicate class javax.activation.ActivationDataFlavor found in modules</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Duplicate class javax.activation.ActivationDataFlavor found in modules javax.activation-1.2.0.jar (com.sun.activation:javax.activation:1.2.0) and javax.activation-api-1.2.0.jar (javax.activation:javax.activation-api:1.2.0)</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">implementation (&apos;com.android.tools.lint:lint-gradle:27.0.2&apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                exclude group: &apos;com.sun.activation&apos;, module: &apos;javax.activations&apos;</span><br><span class="line">                exclude group: &apos;com.google.code.findbugs&apos;</span><br><span class="line">                exclude group: &apos;javax.inject&apos;</span><br><span class="line">                exclude group: &apos;com.android.tools.external.com-intellij&apos;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Log </category>
            
            <category> Fix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Log </tag>
            
            <tag> Fix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nps 内网穿透]]></title>
      <url>/2021/01/06/nps-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://github.com/ehang-io/nps/releases" target="_blank" rel="noopener">下载nps：</a></p>
<p>Mac系统：darwin_amd64_server.tar.gz<br>下载后解压，在解压文件夹，执行：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01deMacBook-Pro:Downloads chenyulong01$ cd darwin_amd64_server</span><br><span class="line"></span><br><span class="line">chenyulong01deMacBook-Pro:darwin_amd64_server chenyulong01$ sudo ./nps install</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/conf/clients.json to /etc/nps/conf/clients.json</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/conf/hosts.json to /etc/nps/conf/hosts.json</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/conf/nps.conf to /etc/nps/conf/nps.conf</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/conf/server.key to /etc/nps/conf/server.key</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/conf/server.pem to /etc/nps/conf/server.pem</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/conf/tasks.json to /etc/nps/conf/tasks.json</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/client/add.html to /etc/nps/web/views/client/add.html</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/views/client/</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/client/edit.html to /etc/nps/web/views/client/edit.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/client/list.html to /etc/nps/web/views/client/list.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/index/add.html to /etc/nps/web/views/index/add.html</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/views/index/</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/index/edit.html to /etc/nps/web/views/index/edit.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/index/hadd.html to /etc/nps/web/views/index/hadd.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/index/hedit.html to /etc/nps/web/views/index/hedit.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/index/help.html to /etc/nps/web/views/index/help.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/index/hlist.html to /etc/nps/web/views/index/hlist.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/index/index.html to /etc/nps/web/views/index/index.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/index/list.html to /etc/nps/web/views/index/list.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/login/index.html to /etc/nps/web/views/login/index.html</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/views/login/</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/login/register.html to /etc/nps/web/views/login/register.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/public/error.html to /etc/nps/web/views/public/error.html</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/views/public/</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/views/public/layout.html to /etc/nps/web/views/public/layout.html</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/css/bootstrap-table.min.css to /etc/nps/web/static/css/bootstrap-table.min.css</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/static/css/</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/css/bootstrap.min.css to /etc/nps/web/static/css/bootstrap.min.css</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/css/datatables.css to /etc/nps/web/static/css/datatables.css</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/css/fontawesome.min.css to /etc/nps/web/static/css/fontawesome.min.css</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/css/regular.min.css to /etc/nps/web/static/css/regular.min.css</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/css/solid.min.css to /etc/nps/web/static/css/solid.min.css</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/css/style.css to /etc/nps/web/static/css/style.css</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/img/flag/en-US.png to /etc/nps/web/static/img/flag/en-US.png</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/static/img/</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/static/img/flag/</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/img/flag/zh-CN.png to /etc/nps/web/static/img/flag/zh-CN.png</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/js/bootstrap-table-locale-all.min.js to /etc/nps/web/static/js/bootstrap-table-locale-all.min.js</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/static/js/</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/js/bootstrap-table.min.js to /etc/nps/web/static/js/bootstrap-table.min.js</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/js/bootstrap.min.js to /etc/nps/web/static/js/bootstrap.min.js</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/js/echarts.min.js to /etc/nps/web/static/js/echarts.min.js</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/js/fontawesome.min.js to /etc/nps/web/static/js/fontawesome.min.js</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/js/inspinia.js to /etc/nps/web/static/js/inspinia.js</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/js/jquery-3.4.1.min.js to /etc/nps/web/static/js/jquery-3.4.1.min.js</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/js/language.js to /etc/nps/web/static/js/language.js</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/js/popper.min.js to /etc/nps/web/static/js/popper.min.js</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/page/error.html to /etc/nps/web/static/page/error.html</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/static/page/</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/page/languages.xml to /etc/nps/web/static/page/languages.xml</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/webfonts/fa-solid-900.eot to /etc/nps/web/static/webfonts/fa-solid-900.eot</span><br><span class="line">2021/01/06 14:21:18 mkdir:/etc/nps/web/static/webfonts/</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/webfonts/fa-solid-900.svg to /etc/nps/web/static/webfonts/fa-solid-900.svg</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/webfonts/fa-solid-900.ttf to /etc/nps/web/static/webfonts/fa-solid-900.ttf</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/webfonts/fa-solid-900.woff to /etc/nps/web/static/webfonts/fa-solid-900.woff</span><br><span class="line">2021/01/06 14:21:18 copy file ::/Users/chenyulong01/Downloads/darwin_amd64_server/web/static/webfonts/fa-solid-900.woff2 to /etc/nps/web/static/webfonts/fa-solid-900.woff2</span><br><span class="line">2021/01/06 14:21:18 install ok!</span><br><span class="line">2021/01/06 14:21:18 Static files and configuration files in the current directory will be useless</span><br><span class="line">2021/01/06 14:21:18 The new configuration file is located in /etc/nps you can edit them</span><br><span class="line">2021/01/06 14:21:18 You can start with:</span><br><span class="line">nps start|stop|restart|uninstall|update or nps-update update</span><br><span class="line">anywhere!</span><br></pre></td></tr></table></figure>

<p>启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01deMacBook-Pro:~ chenyulong01$ cd /etc/nps/</span><br><span class="line">chenyulong01deMacBook-Pro:nps chenyulong01$ ls</span><br><span class="line">conf	web</span><br><span class="line">chenyulong01deMacBook-Pro:nps chenyulong01$ sudo nps start</span><br><span class="line">2021/01/06 14:27:47.789 [E] [nps.go:132]  Valid actions: [&quot;start&quot; &quot;stop&quot; &quot;restart&quot; &quot;install&quot; &quot;uninstall&quot;]</span><br><span class="line">Failed to start nps内网穿透代理服务器: &quot;launchctl&quot; failed with stderr: /Library/LaunchDaemons/Nps.plist: service already loaded</span><br><span class="line"></span><br><span class="line">chenyulong01deMacBook-Pro:nps chenyulong01$ sudo nps stop</span><br><span class="line">chenyulong01deMacBook-Pro:nps chenyulong01$ sudo nps start</span><br></pre></td></tr></table></figure>

<h2 id="web管理"><a href="#web管理" class="headerlink" title="web管理"></a>web管理</h2><p>网址：<a href="http://localhost:8080/login/index" target="_blank" rel="noopener">http://localhost:8080/login/index</a></p>
<p>账号：admin</p>
<p>密码：123</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.nasge.com/archives/48.html" target="_blank" rel="noopener">内网穿透工具比较(ngrok,frp,lanproxy,goproxy,nps)</a><br><a href="https://github.com/ehang-io/nps/blob/master/README_zh.md" target="_blank" rel="noopener">ehang-io-nps</a></p>
<p><a href="https://ehang-io.github.io/nps/#/example" target="_blank" rel="noopener">Api</a></p>
<p><a href="https://blog.csdn.net/weixin_39251927/article/details/104843100" target="_blank" rel="noopener">NPS内网穿透工具</a></p>
]]></content>
      
        <categories>
            
            <category> ngrok </category>
            
            <category> nps </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ngrok </tag>
            
            <tag> nps </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Uri获取资源文件]]></title>
      <url>/2020/11/12/Uri%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>开发中遇到再用fresco显示图片是，动态设置placeholder会显示问题。但是设置setImageUrl没有问题。那如何通过setImageUrl设置drawable中的图片呢？通过Uri即可。</p>
<a id="more"></a>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>具体的集中方式：</p>
<p>Uri uri = Uri.parse(“android.resource://“ + getPackageName() + “/raw/icon” );</p>
<p>Uri uri = Uri.parse(“android.resource://“ + getPackageName() + “/raw/“ +R.raw.icon);</p>
<p>Uri uri = Uri.parse(“android.resource://“ + getPackageName() + “/“ +R.raw.icon);</p>
<p>Uri uri = Uri.parse(“android.resource://“ + getPackageName() + “/“ +R.drawable.icon);</p>
<p>Uri uri = Uri.parse(“android.resource://“ + getPackageName() + “/xxxxxxx/icon” );</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/guang_liang_/article/details/81939898" target="_blank" rel="noopener">Android Uri获取资源文件</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GPUImage渲染流程解析]]></title>
      <url>/2020/08/13/GPUImage%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//版本</span><br><span class="line">mGlSurfaceView.setEGLContextClientVersion(2);</span><br><span class="line">// 设置渲染器(这个渲染器的类非常重要)</span><br><span class="line">mGlSurfaceView.setRenderer(mRenderer);</span><br><span class="line">// 设置渲染模式为根据需要来渲染（RENDERMODE_CONTINUOUSLY）</span><br><span class="line">mGlSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);</span><br><span class="line">mGlSurfaceView.requestRender();</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="坐标"><a href="#坐标" class="headerlink" title="坐标"></a>坐标</h3><ul>
<li><p>顶点坐标：在OpenGL中，顶点坐标使用的是笛卡尔右手坐标系（世界坐标系）。分X Y Z 3个轴，X轴朝右为正，Y轴朝上为正，Z轴垂直屏幕朝外为正。X Y Z 3个轴的最大与最小值为 1 和 -1。<br><img src="http://nunu03.github.io/2020/08/13/GPUImage%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/%E9%A1%B6%E7%82%B9%E5%9D%90%E6%A0%87.png" alt></p>
</li>
<li><p>屏幕坐标：屏幕坐标系，就是应用在设备屏幕上的坐标系，也就是图形最终显示的地方。X轴朝右为正，Y轴朝下为正。<br><img src="http://nunu03.github.io/2020/08/13/GPUImage%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/%E5%B1%8F%E5%B9%95%E5%9D%90%E6%A0%87.png" alt></p>
</li>
<li><p>纹理坐标：原点在左下角，X轴朝右为正，Y轴朝上为正，X Y 轴的最大与最小值为 0 和 1。<br><img src="http://nunu03.github.io/2020/08/13/GPUImage%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/%E7%BA%B9%E7%90%86%E5%9D%90%E6%A0%87.png" alt></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//顶点坐标</span><br><span class="line">static final float VERTICE[] = &#123;</span><br><span class="line">            -1.0f, -1.0f,</span><br><span class="line">            1.0f, -1.0f,</span><br><span class="line">            -1.0f, 1.0f,</span><br><span class="line">            1.0f, 1.0f,</span><br><span class="line">    &#125;;</span><br><span class="line">//纹理坐标  对应顶点坐标  与之映射</span><br><span class="line">static final float TEXTURE[] = &#123;</span><br><span class="line">        0.0f, 0.0f,</span><br><span class="line">        1.0f, 0.0f,</span><br><span class="line">        0.0f, 1.0f,</span><br><span class="line">        1.0f, 1.0f,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong>注意：纹理坐标与顶点坐标非必需一一对应，纹理的坐标会导致图片的缩放显示。</strong>  </p>
<h3 id="顶点着色器-Vertex-Shader-，片元着色器（Fragment-Shader）"><a href="#顶点着色器-Vertex-Shader-，片元着色器（Fragment-Shader）" class="headerlink" title="顶点着色器(Vertex Shader)，片元着色器（Fragment Shader）"></a>顶点着色器(Vertex Shader)，片元着色器（Fragment Shader）</h3><p>顶点着色器处理传入的顶点数据，包括顶点位置、顶点颜色、光照等，每个顶点都会执行一次。</p>
<p>片元着色器主要目的是计算一个像素的最终颜色。片元并不是真正意义上的像素。而是包含了很多状态的集合，这些状态用来计算最终颜色。这些状态包括但不限于它的屏幕坐标，深度信息，法线，纹理坐标等。</p>
<p>所以，顶点着色器用于绘制顶点，片元着色器用于给顶点连线后所包围的区域填充颜色，可以简单的理解成windows中画图的填充工具。所以下边是生成简单着色器的两个源码： <a href="https://www.jianshu.com/p/66b10062bd67" target="_blank" rel="noopener">GLSL基础语法介绍</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public static final String NO_FILTER_VERTEX_SHADER = &quot;&quot; +</span><br><span class="line">	//顶点在画布中的位置</span><br><span class="line">	&quot;attribute vec4 position;\n&quot; + </span><br><span class="line">	// 纹理映射,纹理坐标是纹理映射的一部分。这意味着你想要对你的纹理进行某种滤镜操作的时候会用到它。</span><br><span class="line">	&quot;attribute vec4 inputTextureCoordinate;\n&quot; +</span><br><span class="line">	&quot; \n&quot; +</span><br><span class="line">	//变量,负责顶点着色器负责和片段着色器交流，以及信息的共享</span><br><span class="line">	&quot;varying vec2 textureCoordinate;\n&quot; +</span><br><span class="line">	&quot; \n&quot; +</span><br><span class="line">	&quot;void main()\n&quot; +</span><br><span class="line">	&quot;&#123;\n&quot; +</span><br><span class="line">	&quot;    gl_Position = position;\n&quot; +</span><br><span class="line">	//我们取出这个顶点中纹理坐标的 X 和 Y 的位置。我们只关心 inputTextureCoordinate 中的前两个参数，X 和 Y。这个坐标最开始是通过 4 个属性存在顶点着色器里的，但我们只需要其中的两个。</span><br><span class="line">	&quot;    textureCoordinate = inputTextureCoordinate.xy;\n&quot; +</span><br><span class="line">	&quot;&#125;&quot;;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">     * 这个着色器实际上不会改变图像中的任何东西。它是一个直通着色器，意味着我们输入每一个像素，然后输出完全相同的像素。</span><br><span class="line">     */</span><br><span class="line">public static final String NO_FILTER_FRAGMENT_SHADER = &quot;&quot; +</span><br><span class="line"></span><br><span class="line">   //因为片段着色器作用在每一个像素上，我们需要一个方法来确定我们当前在分析哪一个像素/片段。它需要存储像素的 X 和 Y 坐标。我们接收到的是当前在顶点着色器被设置好的纹理坐标。</span><br><span class="line">    &quot;varying highp vec2 textureCoordinate;\n&quot; +</span><br><span class="line">    &quot; \n&quot; +</span><br><span class="line">    //为了处理图像，我们从应用中接收一个图片的引用，我们把它当做一个 2D 的纹理。这个数据类型被叫做 sampler2D ，这是因为我们要从这个 2D 纹理中采样出一个点来进行处理。</span><br><span class="line">    &quot;uniform sampler2D inputImageTexture;\n&quot; +</span><br><span class="line">    &quot; \n&quot; +</span><br><span class="line">    &quot;void main()\n&quot; +</span><br><span class="line">    &quot;&#123;\n&quot; +</span><br><span class="line">    //这是一个 GLSL 特有的方法：texture2D，顾名思义，创建一个 2D 的纹理。它采用我们之前声明过的属性作为参数来决定被处理的像素的颜色。这个颜色然后被设置给另外一个内建变量，gl_FragColor。因为片段着色器的唯一目的就是确定一个像素的颜色，gl_FragColor 本质上就是我们片段着色器的返回语句。</span><br><span class="line">    &quot;     gl_FragColor = texture2D(inputImageTexture, textureCoordinate);\n&quot; +</span><br><span class="line">        &quot;&#125;&quot;;</span><br></pre></td></tr></table></figure>

<p>有了源码，我们就可以创建着色器：<br>我们首先要做的是创建一个着色器对象，注意还是用ID来引用的，所以我们储存这个顶点着色器的ID为unsigned int，然后用glCreateShader创建这个着色器，我们把需要创建的着色器类型以参数形式提供给glCreateShader，由于我们正在创建一个顶点着色器，传递的参数是GLES20.GL_VERTEX_SHADER</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int iShader = GLES20.glCreateShader(GLES20.GL_VERTEX_SHADER);</span><br></pre></td></tr></table></figure>

<p>下一步我们把这个着色器源码附加到着色器对象上，然后编译它：第一个参数是要编译的着色器对象,第二参数指定了传递的源码字符串.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GLES20.glShaderSource(iShader, strSource);</span><br><span class="line">GLES20.glCompileShader(iShader);</span><br></pre></td></tr></table></figure>

<p>同时，我们要检测在调用glCompileShader后编译是否成功了，如果没成功的话，也希望知道错误是什么，这以便修复它们.如果结果非0，即编译成功。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int[] compiled = new int[1]；</span><br><span class="line">GLES20.glGetShaderiv(iShader, GLES20.GL_COMPILE_STATUS, compiled, 0);</span><br><span class="line">        if (compiled[0] == 0) &#123;</span><br><span class="line">            Log.d(&quot;Load Shader Failed&quot;, &quot;Compilation\n&quot; + GLES20.glGetShaderInfoLog(iShader));</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>片元着色器的创建和顶点一样，知识参数不同和源码不同。参数类型是GLES20.GL_FRAGMENT_SHADER</p>
<h3 id="着色器程序"><a href="#着色器程序" class="headerlink" title="着色器程序"></a>着色器程序</h3><p>通过glCreateProgram函数创建一个程序，并返回新创建程序对象的ID引用，然后我们需要把之前编译的着色器附加到程序对象上，最后用glLinkProgram链接它们。着色器对象链接到程序对象以后，删除着色器对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 创建程序,返回对象的ID</span><br><span class="line">iProgId = GLES20.glCreateProgram();</span><br><span class="line">// 向程序中加入顶点着色器</span><br><span class="line">GLES20.glAttachShader(iProgId, iVShader);</span><br><span class="line">// 向程序中加入片元着色器</span><br><span class="line">GLES20.glAttachShader(iProgId, iFShader);</span><br><span class="line">// 链接程序</span><br><span class="line">GLES20.glLinkProgram(iProgId);</span><br><span class="line">// 获取program的链接情况</span><br><span class="line">GLES20.glGetProgramiv(iProgId, GLES20.GL_LINK_STATUS, link, 0);</span><br><span class="line">if (link[0] &lt;= 0) &#123;</span><br><span class="line">    Log.d(&quot;Load Program&quot;, &quot;Linking Failed&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">GLES20.glDeleteShader(iVShader);</span><br><span class="line">GLES20.glDeleteShader(iFShader);</span><br><span class="line">// 获取着色器中的属性引用id(传入的字符串就是我们着色器脚本中的属性名)</span><br><span class="line">mGLAttribPosition = GLES20.glGetAttribLocation(mGLProgId, &quot;position&quot;);</span><br><span class="line">mGLUniformTexture = GLES20.glGetUniformLocation(mGLProgId, &quot;inputImageTexture&quot;);</span><br><span class="line">mGLAttribTextureCoordinate = GLES20.glGetAttribLocation(mGLProgId,</span><br><span class="line">                &quot;inputTextureCoordinate&quot;);</span><br><span class="line">//glClearColor为glClear清除颜色缓冲区时指定RGBA值（也就是所有的颜色都会被替换成指定的RGBA值）。每个值的取值范围都是0.0~1.0，超出范围的将被截断。</span><br><span class="line">GLES20.glClearColor(0, 0, 0, 1);</span><br></pre></td></tr></table></figure>

<h3 id="纹理ID"><a href="#纹理ID" class="headerlink" title="纹理ID"></a>纹理ID</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public static int loadTexture(final IntBuffer data, final Size size, final int usedTexId) &#123;</span><br><span class="line">        int textures[] = new int[1];</span><br><span class="line">        if (usedTexId == NO_TEXTURE) &#123;</span><br><span class="line">            GLES20.glGenTextures(1, textures, 0);</span><br><span class="line">            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textures[0]);</span><br><span class="line">            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,</span><br><span class="line">                    GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);</span><br><span class="line">            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,</span><br><span class="line">                    GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);</span><br><span class="line">            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,</span><br><span class="line">                    GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);</span><br><span class="line">            GLES20.glTexParameterf(GLES20.GL_TEXTURE_2D,</span><br><span class="line">                    GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);</span><br><span class="line">            GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, size.width, size.height,</span><br><span class="line">                    0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, usedTexId);</span><br><span class="line">            GLES20.glTexSubImage2D(GLES20.GL_TEXTURE_2D, 0, 0, 0, size.width,</span><br><span class="line">                    size.height, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, data);</span><br><span class="line">            textures[0] = usedTexId;</span><br><span class="line">        &#125;</span><br><span class="line">        return textures[0];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 使用某套shader程序</span><br><span class="line">GLES20.glUseProgram(mGLProgId);</span><br><span class="line">// 设置缓冲区起始位置</span><br><span class="line">cubeBuffer.position(0);</span><br><span class="line">// 顶点位置数据传入着色器,为画笔指定顶点位置数据(mGLAttribPosition)</span><br><span class="line">GLES20.glVertexAttribPointer(mGLAttribPosition, 2, GLES20.GL_FLOAT, false, 0, cubeBuffer);</span><br><span class="line">// 允许使用顶点坐标数组</span><br><span class="line">GLES20.glEnableVertexAttribArray(mGLAttribPosition);</span><br><span class="line">textureBuffer.position(0);</span><br><span class="line">// 纹理坐标数据传入着色器,为画笔指定纹理数据</span><br><span class="line">GLES20.glVertexAttribPointer(mGLAttribTextureCoordinate, 2, GLES20.GL_FLOAT, false, 0,</span><br><span class="line">        textureBuffer);</span><br><span class="line">GLES20.glEnableVertexAttribArray(mGLAttribTextureCoordinate);</span><br><span class="line">if (textureId != OpenGlUtils.NO_TEXTURE) &#123;</span><br><span class="line">	//设置纹理单元(sampler2D)</span><br><span class="line">    GLES20.glActiveTexture(GLES20.GL_TEXTURE0);</span><br><span class="line">    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, textureId);</span><br><span class="line">    //设置uniform采样器的位置值, 也就是mGLUniformTexture纹理单元。</span><br><span class="line">    GLES20.glUniform1i(mGLUniformTexture, 0);</span><br><span class="line">&#125;</span><br><span class="line">onDrawArraysPre();</span><br><span class="line">//// 绘制</span><br><span class="line">GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP, 0, 4);</span><br><span class="line">GLES20.glDisableVertexAttribArray(mGLAttribPosition);</span><br><span class="line">GLES20.glDisableVertexAttribArray(mGLAttribTextureCoordinate);</span><br></pre></td></tr></table></figure>

<h3 id="滤镜纹理"><a href="#滤镜纹理" class="headerlink" title="滤镜纹理"></a>滤镜纹理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> protected void onDrawArraysPre() &#123;</span><br><span class="line">    if (mToneCurveTexture[0] != OpenGlUtils.NO_TEXTURE) &#123;</span><br><span class="line">        GLES20.glActiveTexture(GLES20.GL_TEXTURE3);</span><br><span class="line">        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mToneCurveTexture[0]);</span><br><span class="line">        GLES20.glUniform1i(mToneCurveTextureUniformLocation, 3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上述代码就可以实现纹理滤镜的效果了。但是这个滤镜的纹理是如何获取到的呢？<br>简单介绍两种方式：</p>
<h4 id="ps-acv-文件"><a href="#ps-acv-文件" class="headerlink" title="ps acv 文件"></a>ps acv 文件</h4><p>acv文件是ps用来设置曲线效果，不同曲线参数可以呈现出不同的滤镜效果。我们可以对acv文件进行读取，可以得到：Curves曲线信息数组，每个curvers可以分别获取到R,G,B 的PointF数组信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public void setFromCurveFileInputStream(InputStream input) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        int version = readShort(input);</span><br><span class="line">        int totalCurves = readShort(input);</span><br><span class="line">        ArrayList&lt;PointF[]&gt; curves = new ArrayList&lt;PointF[]&gt;(totalCurves);</span><br><span class="line">        float pointRate = 1.0f / 255;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; totalCurves; i++) &#123;</span><br><span class="line">            // 2 bytes, Count of points in the curve (short integer from 2...19)</span><br><span class="line">            short pointCount = readShort(input);</span><br><span class="line">            PointF[] points = new PointF[pointCount];</span><br><span class="line">            // point count * 4</span><br><span class="line">            // Curve points. Each curve point is a pair of short integers where</span><br><span class="line">            // the first number is the output value (vertical coordinate on the</span><br><span class="line">            // Curves dialog graph) and the second is the input value. All coordinates have range 0 to 255.</span><br><span class="line">            for (int j = 0; j &lt; pointCount; j++) &#123;</span><br><span class="line">                short y = readShort(input);</span><br><span class="line">                short x = readShort(input);</span><br><span class="line"></span><br><span class="line">                points[j] = new PointF(x * pointRate, y * pointRate);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            curves.add(points);</span><br><span class="line">        &#125;</span><br><span class="line">        input.close();</span><br><span class="line"></span><br><span class="line">        mRgbCompositeControlPoints = curves.get(0);</span><br><span class="line">        mRedControlPoints = curves.get(1);</span><br><span class="line">        mGreenControlPoints = curves.get(2);</span><br><span class="line">        mBlueControlPoints = curves.get(3);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后根据RGB信息生成纹理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> // 设置纹理单元</span><br><span class="line">GLES20.glActiveTexture(GLES20.GL_TEXTURE3);</span><br><span class="line">// 绑定纹理</span><br><span class="line">GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, mToneCurveTexture[0]);</span><br><span class="line"></span><br><span class="line">if ((mRedCurve.size() &gt;= 256) &amp;&amp; (mGreenCurve.size() &gt;= 256) &amp;&amp; (mBlueCurve.size() &gt;= 256) &amp;&amp; (mRgbCompositeCurve.size() &gt;= 256)) &#123;</span><br><span class="line">    byte[] toneCurveByteArray = new byte[256 * 4];</span><br><span class="line">    for (int currentCurveIndex = 0; currentCurveIndex &lt; 256; currentCurveIndex++) &#123;</span><br><span class="line">        // BGRA for upload to texture</span><br><span class="line">        toneCurveByteArray[currentCurveIndex * 4 + 2] = (byte) ((int) Math.min(Math.max(currentCurveIndex + mBlueCurve.get(currentCurveIndex) + mRgbCompositeCurve.get(currentCurveIndex), 0), 255) &amp; 0xff);</span><br><span class="line">        toneCurveByteArray[currentCurveIndex * 4 + 1] = (byte) ((int) Math.min(Math.max(currentCurveIndex + mGreenCurve.get(currentCurveIndex) + mRgbCompositeCurve.get(currentCurveIndex), 0), 255) &amp; 0xff);</span><br><span class="line">        toneCurveByteArray[currentCurveIndex * 4] = (byte) ((int) Math.min(Math.max(currentCurveIndex + mRedCurve.get(currentCurveIndex) + mRgbCompositeCurve.get(currentCurveIndex), 0), 255) &amp; 0xff);</span><br><span class="line">        toneCurveByteArray[currentCurveIndex * 4 + 3] = (byte) (255 &amp; 0xff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D, 0, GLES20.GL_RGBA, 256 /*width*/, 1 /*height*/, 0, GLES20.GL_RGBA, GLES20.GL_UNSIGNED_BYTE, ByteBuffer.wrap(toneCurveByteArray));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="图片纹理"><a href="#图片纹理" class="headerlink" title="图片纹理"></a>图片纹理</h4><p>通过图片生成纹理ID,也就是滤镜图片：看一看资源文件目录信息：<br><img src="http://nunu03.github.io/2020/08/13/GPUImage%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/%E7%BA%B9%E7%90%86%E5%9B%BE%E7%89%87.png" alt></p>
<p>下面是json和着色器源码：</p>
<ul>
<li><p>json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;filterList&quot;: [&#123;</span><br><span class="line">        &quot;type&quot;: &quot;filter&quot;,</span><br><span class="line">        &quot;name&quot;: &quot;amaro&quot;,</span><br><span class="line">        &quot;vertexShader&quot;: &quot;&quot;,</span><br><span class="line">        &quot;fragmentShader&quot;: &quot;fragment.glsl&quot;,</span><br><span class="line">        &quot;uniformList&quot;:[&quot;blowoutTexture&quot;, &quot;overlayTexture&quot;, &quot;mapTexture&quot;],</span><br><span class="line">        &quot;uniformData&quot;: &#123;</span><br><span class="line">            &quot;blowoutTexture&quot;: &quot;blowout.png&quot;,</span><br><span class="line">            &quot;overlayTexture&quot;: &quot;overlay.png&quot;,</span><br><span class="line">            &quot;mapTexture&quot;: &quot;map.png&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;strength&quot;: 1.0,</span><br><span class="line">        &quot;texelOffset&quot;: 0,</span><br><span class="line">        &quot;audioPath&quot;: &quot;&quot;,</span><br><span class="line">        &quot;audioLooping&quot;: 1</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>fragment.glsl内容</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">precision mediump float;</span><br><span class="line"> </span><br><span class="line">varying mediump vec2 textureCoordinate;</span><br><span class="line"> </span><br><span class="line">uniform sampler2D inputTexture;</span><br><span class="line">uniform sampler2D blowoutTexture; //blowout;</span><br><span class="line">uniform sampler2D overlayTexture; //overlay;</span><br><span class="line">uniform sampler2D mapTexture; //map</span><br><span class="line"> </span><br><span class="line">uniform float strength;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    vec4 originColor = texture2D(inputTexture, textureCoordinate.xy);</span><br><span class="line">    vec4 texel = texture2D(inputTexture, textureCoordinate.xy);</span><br><span class="line">    vec3 bbTexel = texture2D(blowoutTexture, textureCoordinate.xy).rgb;</span><br><span class="line"></span><br><span class="line">    texel.r = texture2D(overlayTexture, vec2(bbTexel.r, texel.r)).r;</span><br><span class="line">    texel.g = texture2D(overlayTexture, vec2(bbTexel.g, texel.g)).g;</span><br><span class="line">    texel.b = texture2D(overlayTexture, vec2(bbTexel.b, texel.b)).b;</span><br><span class="line"></span><br><span class="line">    vec4 mapped;</span><br><span class="line">    mapped.r = texture2D(mapTexture, vec2(texel.r, 0.16666)).r;</span><br><span class="line">    mapped.g = texture2D(mapTexture, vec2(texel.g, 0.5)).g;</span><br><span class="line">    mapped.b = texture2D(mapTexture, vec2(texel.b, 0.83333)).b;</span><br><span class="line">    mapped.a = 1.0;</span><br><span class="line"></span><br><span class="line">    mapped.rgb = mix(originColor.rgb, mapped.rgb, strength);</span><br><span class="line"></span><br><span class="line">    gl_FragColor = mapped;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="http://nunu03.github.io/2020/08/13/GPUImage%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/%E6%95%88%E6%9E%9C%E5%9B%BE.jpg" alt></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static final float TEXTURE[] = &#123;</span><br><span class="line">            0.0f, 1.0f,</span><br><span class="line">            1.0f, 1.0f,</span><br><span class="line">            0.0f, 0.0f,</span><br><span class="line">            1.0f, 0.0f,</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2020/08/13/GPUImage%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/%E6%AD%A3%E7%A1%AE%E7%BA%B9%E7%90%86.png" alt></p>
<h3 id="渲染流程总结"><a href="#渲染流程总结" class="headerlink" title="渲染流程总结"></a>渲染流程总结</h3><p><img src="http://nunu03.github.io/2020/08/13/GPUImage%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/%E6%B8%B2%E6%9F%93%E6%B5%81%E7%A8%8B.png" alt><br>染流程如下：顶点数据(Vertices) &gt; 顶点着色器(Vertex Shader) &gt; 图元装配(Assembly) &gt; 几何着色器(Geometry Shader) &gt; 光栅化(Rasterization) &gt; 片元着色器(Fragment Shader) &gt; 逐片元处理(Per-Fragment Operations) &gt; 帧缓冲(FrameBuffer)。再经过双缓冲的交换(SwapBuffer)，渲染内容就显示到了屏幕上。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>根据渲染流程，我们知道，美颜的操作即是对着色器编码的源码进行编写。采用不同的算法，实现不同的美颜功能。同时滤镜的纹理，可以是ps的acv文件，也可以是图片，着色器源码针对不同的 资源分别解析和使用。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://juejin.im/post/6844903878740148231#heading-0" target="_blank" rel="noopener">OpenGL ES</a></p>
<p><a href="https://www.cnblogs.com/zhxmdefj/p/11192408.html" target="_blank" rel="noopener">OpenGL入门1.2：渲染管线简介，画三角形</a></p>
<p><a href="https://blog.csdn.net/dengchukun/category_9281212.html" target="_blank" rel="noopener">GLES2.0中文API</a></p>
<p><a href="https://www.jianshu.com/p/cb55d8f2b4d0" target="_blank" rel="noopener">OpenGLES 绘制图片纹理</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FaceUnity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[美颜相关概念]]></title>
      <url>/2020/08/05/%E7%BE%8E%E9%A2%9C%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<h2 id="图像深度-amp-像素深度"><a href="#图像深度-amp-像素深度" class="headerlink" title="图像深度&amp;像素深度"></a>图像深度&amp;像素深度</h2><p>图像深度是指存储每个像素所用的位数，它也是用来度量图像的色彩分辨率的。它确定了彩色图像的每个像素可能有的色彩数，或者确定灰度图像的每个像素可能有的灰度级数。它决定了色彩图像中可能出现的最多的色彩数，或者灰度图像中的最大灰度等级。 </p>
<a id="more"></a>
<p>中文名        图像深度<br>特    点    量度图像的色彩分辨率<br>含    义    指存储每个像素所用的位数<br>类    型    确定彩色图像颜色数<br>1.基本概念<br>图像深度是单个像素点的色彩详细度,如16位(65536色),32位等。比如一幅单色图像,若每个像素有8位,则最大灰度数目为2的8次方,即256.一幅彩色图像RGB3个温良的像素位数分别为4,4,2,则最大颜色数目为2的4+4+2次方,即1024,就是说像素的深度为10位,每个像素可以是1024种颜色中的一种，例如：一幅画的尺寸是1024*768，深度为16，则它的数据量为1.5M。</p>
<h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><h3 id="线性滤波与卷积的基本概念"><a href="#线性滤波与卷积的基本概念" class="headerlink" title="线性滤波与卷积的基本概念"></a>线性滤波与卷积的基本概念</h3><p><a href="https://www.cnblogs.com/xiaojianliu/p/9075872.html" target="_blank" rel="noopener">数字图像处理中滤波和卷积操作详细说明</a> </p>
<p>线性滤波可以说是图像处理最基本的方法，它可以允许我们对图像进行处理，产生很多不同的效果。做法很简单。首先，我们有一个二维的滤波器矩阵（有个高大上的名字叫卷积核）和一个要处理的二维图像。然后，对于图像的每一个像素点，计算它的邻域像素和滤波器矩阵的对应元素的乘积，然后加起来，作为该像素位置的值。这样就完成了滤波过程。<br><img src="http://nunu03.github.io/2020/08/05/%E7%BE%8E%E9%A2%9C%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E5%8D%B7%E7%A7%AF.png" alt><br>对图像和滤波矩阵进行逐个元素相乘再求和的操作就相当于将一个二维的函数移动到另一个二维函数的所有位置，这个操作就叫卷积或者协相关。卷积和协相关的差别是，卷积需要先对滤波矩阵进行180的翻转，但如果矩阵是对称的，那么两者就没有什么差别了。</p>
<p> Correlation 和 Convolution可以说是图像处理最基本的操作，但却非常有用。这两个操作有两个非常关键的特点：它们是线性的，而且具有平移不变性shift-invariant。平移不变性指我们在图像的每个位置都执行相同的操作。线性指这个操作是线性的，也就是我们用每个像素的邻域的线性组合来代替这个像素。这两个属性使得这个操作非常简单，因为线性操作是最简单的，然后在所有地方都做同样的操作就更简单了。</p>
<ul>
<li><p>实际上，在信号处理领域，卷积有广泛的意义，而且有其严格的数学定义，但在这里不关注这个。</p>
</li>
<li><p>2D卷积需要4个嵌套循环4-double loop，所以它并不快，除非我们使用很小的卷积核。这里一般使用3x3或者5x5。而且，对于滤波器，也有一定的规则要求：</p>
<p>1）滤波器的大小应该是奇数，这样它才有一个中心，例如3x3，5x5或者7x7。有中心了，也有了半径的称呼，例如5x5大小的核的半径就是2。</p>
<p>2）滤波器矩阵所有的元素之和应该要等于1，这是为了保证滤波前后图像的亮度保持不变。当然了，这不是硬性要求了。</p>
<p>3）如果滤波器矩阵所有元素之和大于1，那么滤波后的图像就会比原图像更亮，反之，如果小于1，那么得到的图像就会变暗。如果和为0，图像不会变黑，但也会非常暗。</p>
<p>4）对于滤波后的结构，可能会出现负数或者大于255的数值。对这种情况，我们将他们直接截断到0和255之间即可。对于负数，也可以取绝对值。</p>
</li>
</ul>
<h3 id="边界补充方法"><a href="#边界补充方法" class="headerlink" title="边界补充方法"></a>边界补充方法</h3><p>上面的图片说明了图像的卷积操作，但是他也反映出一个问题，如上图，原始图片尺寸为7<em>7，卷积核的大小为3</em>3，当卷积核沿着图片滑动后只能滑动出一个5*5的图片出来，这就造成了卷积后的图片和卷积前的图片尺寸不一致，这显然不是我们想要的结果，所以为了避免这种情况，需要先对原始图片做边界填充处理。</p>
<p><img src="http://nunu03.github.io/2020/08/05/%E7%BE%8E%E9%A2%9C%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B5/%E5%A1%AB%E5%85%85.png" alt></p>
<h4 id="常用卷积核及其意义"><a href="#常用卷积核及其意义" class="headerlink" title="常用卷积核及其意义"></a>常用卷积核及其意义</h4><h5 id="一个没有任何作用的卷积核"><a href="#一个没有任何作用的卷积核" class="headerlink" title="一个没有任何作用的卷积核"></a>一个没有任何作用的卷积核</h5><p>卷积核：<br>这里写图片描述<br>将原像素中间像素值乘1，其余全部乘0，显然像素值不会发生任何变化。</p>
<h5 id="平滑均值滤波"><a href="#平滑均值滤波" class="headerlink" title="平滑均值滤波"></a>平滑均值滤波</h5><p>卷积核：<br>这里写图片描述<br>该卷积核的作用在于取九个值的平均值代替中间像素值，所以起到的平滑的效果：。</p>
<h5 id="高斯平滑"><a href="#高斯平滑" class="headerlink" title="高斯平滑"></a>高斯平滑</h5><p>卷积核：<br>这里写图片描述<br>高斯平滑水平和垂直方向呈现高斯分布，更突出了中心点在像素平滑后的权重，相比于均值滤波而言，有着更好的平滑效果。 </p>
<h5 id="图像锐化"><a href="#图像锐化" class="headerlink" title="图像锐化"></a>图像锐化</h5><p>卷积核： </p>
<p>该卷积利用的其实是图像中的边缘信息有着比周围像素更高的对比度，而经过卷积之后进一步增强了这种对比度，从而使图像显得棱角分明、画面清晰，起到锐化图像的效果。 </p>
<h5 id="梯度Prewitt"><a href="#梯度Prewitt" class="headerlink" title="梯度Prewitt"></a>梯度Prewitt</h5><p>梯度Prewitt卷积核与Soble卷积核的选定是类似的，都是对水平边缘或垂直边缘有比较好的检测效果。</p>
<h5 id="Soble边缘检测："><a href="#Soble边缘检测：" class="headerlink" title="Soble边缘检测："></a>Soble边缘检测：</h5><p>Soble与上述卷积核不同之处在于，Soble更强调了和边缘相邻的像素点对边缘的影响。 </p>
<h5 id="梯度Laplacian"><a href="#梯度Laplacian" class="headerlink" title="梯度Laplacian"></a>梯度Laplacian</h5><p>卷积核：<br>这里写图片描述</p>
<p>Laplacian也是一种锐化方法，同时也可以做边缘检测，而且边缘检测的应用中并不局限于水平方向或垂直方向，这是Laplacian与soble的区别。</p>
<p>回到目录</p>
<h3 id="卷积的计算"><a href="#卷积的计算" class="headerlink" title="卷积的计算"></a>卷积的计算</h3><p>对图像处理而言，存在两大类的方法：空域处理和频域处理！空域处理是指直接对原始的像素空间进行计算，频率处理是指先对图像变换到频域，再做滤波等处理。 </p>
<p>空域计算-直接2D卷积<br>直接2D卷积就是一开始说的那样，对于图像的每一个像素点，计算它的邻域像素和滤波器矩阵的对应元素的乘积，然后加起来，作为该像素位置的值。</p>
<p>直接的实现也称为暴力实现brute force，因为它严格按照定义来实现，没有任何优化。当然了，在并行实现里面，它也是比较灵活的。另外，也存在一个优化版本，如果我们的kernel是separable可分的。</p>
<p>频域计算-快速傅里叶变换FFT卷积<br> 这个快速实现得益于卷积定理：时域上的卷积等于频域上的乘积。所以将我们的图像和滤波器通过算法变换到频域后，直接将他们相乘，然后再变换回时域（也就是图像的空域）就可以了。</p>
<p>o表示矩阵逐元素相乘。那用什么方法将空域的图像和滤波器变换到频域了。</p>
]]></content>
      
        <categories>
            
            <category> Video </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FaceUnity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android CMake]]></title>
      <url>/2020/08/05/Android-CMake/</url>
      <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>向您的项目添加 C 和 C++ 代码。提供 CMake 或 ndk-build 脚本文件的路径以配置 Gradle。Gradle 使用构建脚本将源代码导入您的 Android Studio 项目并将原生库（SO 文件）打包到 APK 中。</p>
<a id="more"></a>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>CMake是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平摊的安装编译过程。它能够输出各种各样的makefile或者project文件，能测试编译器所支持的C++特性，类似UNIX下的automake。</p>
<h2 id="配置CMake-3-6-0-或-3-10-2"><a href="#配置CMake-3-6-0-或-3-10-2" class="headerlink" title="配置CMake 3.6.0 或 3.10.2"></a>配置CMake 3.6.0 或 3.10.2</h2><h3 id="CMake-3-6-0-或-3-10-2"><a href="#CMake-3-6-0-或-3-10-2" class="headerlink" title="CMake 3.6.0 或 3.10.2"></a>CMake 3.6.0 或 3.10.2</h3><p>SDK 管理器包含 CMake 的 3.6.0 派生版本和版本 3.10.2。未在 build.gradle 中设置特定 CMake 版本的项目均使用 CMake 3.10.2 进行构建。要使用之前包含的版本，请在模块的 build.gradle 文件中指定 CMake 版本 3.6.0：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            ...</span><br><span class="line">            version &quot;3.6.0&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您可以指定此 CMake 版本作为最低版本，只需在 build.gradle 条目的末尾添加一个“+”即可，例如 3.10.2+。不过，这并非最佳做法。</p>
<h3 id="使用自定义-CMake-版本"><a href="#使用自定义-CMake-版本" class="headerlink" title="使用自定义 CMake 版本"></a>使用自定义 CMake 版本</h3><p>如果您想使用 SDK 管理器中未包含的 CMake 版本 3.7 或更高版本，请按以下步骤操作：</p>
<p>1.从官方 CMake 网站下载并安装 <a href="https://cmake.org/download/" target="_blank" rel="noopener">CMake 3.7 或更高版本</a>。<br>2.指定您想要让 Gradle 在模块的 build.gradle 文件中使用的 CMake 版本：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            ...</span><br><span class="line">            version &quot;cmake-version&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.将 CMake 的安装路径添加到 PATH 环境变量，或将其添加到项目的 local.properties 文件中，具体步骤如下所示。如果 Gradle 找不到您在 build.gradle 文件中指定的 CMake 版本，您便会遇到构建错误。<br>    # If you set this property, Gradle no longer uses PATH to find CMake.<br>    cmake.dir=”path-to-cmake”</p>
<p>4.如果您尚未在工作站上安装 Ninja 构建系统，请访问 Ninja 官方网站，然后下载并安装适用于您的操作系统的最新版 Ninja。此外，请务必将 Ninja 的安装路径也添加到 PATH 环境变量。</p>
<h2 id="创建支持-C-C-的新项目"><a href="#创建支持-C-C-的新项目" class="headerlink" title="创建支持 C/C++ 的新项目"></a>创建支持 C/C++ 的新项目</h2><p>创建支持原生代码的新项目的步骤与创建任何其他 Android Studio 项目的步骤相似，但前者还需要执行一个额外的步骤：</p>
<p>1.在向导的 Choose your project 部分中，选择 Native C++ 项目类型。<br>2.点击 Next。<br>3.填写向导下一部分中的所有其他字段。<br>4.点击 Next。<br>5.在向导的 Customize C++ Support 部分中，您可以使用 C++ Standard 字段来自定义项目。使用下拉列表选择您想要使用哪种 C++ 标准化。选择 Toolchain Default 可使用默认的 CMake 设置。<br>6.点击 Finish。<br><img src="http://nunu03.github.io/2020/08/05/Android-CMake/cmake%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt></p>
<h2 id="原有项目支持-C-C"><a href="#原有项目支持-C-C" class="headerlink" title="原有项目支持 C/C++"></a>原有项目支持 C/C++</h2><p><img src="http://nunu03.github.io/2020/08/05/Android-CMake/cmake%E5%8A%A0%E5%85%A5%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.png" alt></p>
<h2 id="配置-CMake"><a href="#配置-CMake" class="headerlink" title="配置 CMake"></a>配置 CMake</h2><p>CMake 构建脚本是一个纯文本文件，您必须将其命名为 CMakeLists.txt，并在其中包含 CMake 构建您的 C/C++ 库时需要使用的命令。如果您的原生源代码文件还没有 CMake 构建脚本，您需要自行创建一个，并在其中包含适当的 CMake 命令。</p>
<p>本部分将介绍您应该在构建脚本中包含哪些基本命令，以便指示 CMake 在创建原生库时使用哪些源代码文件。如需了解详情，请参阅介绍 <a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html" target="_blank" rel="noopener">CMake 命令的官方文档</a>。</p>
<p>在配置新的 CMake 构建脚本后，您需要<a href="https://developer.android.com/studio/projects/gradle-external-native-builds" target="_blank" rel="noopener">配置 Gradle</a> 以将 CMake 项目作为构建依赖项包含在内，从而让 Gradle 构建原生库，并将其与应用的 APK 打包在一起。</p>
<ul>
<li>注意：如果项目使用的是 ndk-build，您不需要创建 CMake 构建脚本。您只需配置 Gradle 以包含现有的原生库项目即可；为此，您需要提供 Android.mk 文件的路径。</li>
</ul>
<h3 id="创建-CMake-构建脚本"><a href="#创建-CMake-构建脚本" class="headerlink" title="创建 CMake 构建脚本"></a>创建 CMake 构建脚本</h3><p>要创建一个可以用作 CMake 构建脚本的纯文本文件，请按以下步骤操作：</p>
<p>1.从 IDE 的左侧打开 Project 窗格，然后从下拉菜单中选择 Project 视图。<br>2.右键点击 your-module 的根目录，然后依次选择 New &gt; File。</p>
<ul>
<li>注意：您可以在所需的任何位置创建构建脚本。不过，在配置构建脚本时，原生源代码文件和库的路径将与构建脚本的位置相关。</li>
</ul>
<p>3.输入“CMakeLists.txt”作为文件名，然后点击 OK。<br>现在，您可以通过添加 CMake 命令来配置您的构建脚本。要指示 CMake 根据原生源代码创建原生库，请向您的构建脚本添加 cmake_minimum_required() 和 add_library() 命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Sets the minimum version of CMake required to build your native library.</span><br><span class="line"># This ensures that a certain set of CMake features is available to</span><br><span class="line"># your build.</span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"></span><br><span class="line"># Specifies a library name, specifies whether the library is STATIC or</span><br><span class="line"># SHARED, and provides relative paths to the source code. You can</span><br><span class="line"># define multiple libraries by adding multiple add_library() commands,</span><br><span class="line"># and CMake builds them for you. When you build your app, Gradle</span><br><span class="line"># automatically packages shared libraries with your APK.</span><br><span class="line"></span><br><span class="line">add_library( # Specifies the name of the library.</span><br><span class="line">             native-lib</span><br><span class="line"></span><br><span class="line">             # Sets the library as a shared library.</span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">             # Provides a relative path to your source file(s).</span><br><span class="line">             src/main/cpp/native-lib.cpp )</span><br></pre></td></tr></table></figure>

<ul>
<li>提示：与指示 CMake 根据源代码文件创建原生库的方式一样，您可以使用 add_executable() 命令指示 CMake 改为根据这些源代码文件来创建可执行文件。不过，根据原生源代码文件构建可执行文件是可选操作，构建原生库以将其打包到 APK 中即可满足大多数项目的要求。</li>
</ul>
<p>在使用 add_library() 向 CMake 构建脚本添加源代码文件或库时，Android Studio 还会在您同步项目后在 Project 视图中显示相关的头文件。不过，为了让 CMake 能够在编译时找到头文件，您需要向 CMake 构建脚本添加 include_directories() 命令，并指定头文件的路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_library(...)</span><br><span class="line"></span><br><span class="line"># Specifies a path to native header files.</span><br><span class="line">include_directories(src/main/cpp/include/)</span><br></pre></td></tr></table></figure>

<p>CMake 使用以下规范来为库文件命名：</p>
<p>liblibrary-name.so<br>例如，如果您在构建脚本中指定“native-lib”作为共享库的名称，CMake 就会创建一个名为 libnative-lib.so 的文件。不过，在 Java 或 Kotlin 代码中加载此库时，请使用您在 CMake 构建脚本中指定的名称：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    System.loadLibrary(&quot;native-lib&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：如果重命名或移除了 CMake 构建脚本中的库，您需要在 Gradle 实施相关更改或从 APK 中移除旧版库之前清理您的项目。要清理项目，请在菜单栏中依次选择 Build &gt; Clean Project。</li>
</ul>
<p>Android Studio 会自动向 Project 窗格中的 cpp 群组添加源代码文件和头文件。通过使用多个 add_library() 命令，您可以为 CMake 定义要根据其他源代码文件构建的更多库。</p>
<h3 id="添加-NDK-API"><a href="#添加-NDK-API" class="headerlink" title="添加 NDK API"></a>添加 NDK API</h3><p>Android NDK 提供了一套您可能会觉得非常实用的原生 API 和库。通过在项目的 CMakeLists.txt 脚本文件中包含 NDK 库，您可以使用其中任何 API。</p>
<p>Android 平台上已存在预构建的 NDK 库，因此您无需构建它们或将它们打包到 APK 中。由于这些 NDK 库已位于 CMake 搜索路径中，因此您甚至无需指定本地安装的 NDK 库的位置，您只需为 CMake 提供您想要使用的库的名称，并将其与您自己的原生库相关联即可。</p>
<p>向 CMake 构建脚本添加 find_library() 命令以找到 NDK 库并将其路径存储为一个变量。您可以使用此变量在构建脚本的其他部分引用 NDK 库。以下示例可以找到 Android 专有的日志支持库，并会将其路径存储在 log-lib 中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find_library( # Defines the name of the path variable that stores the</span><br><span class="line">              # location of the NDK library.</span><br><span class="line">              log-lib</span><br><span class="line"></span><br><span class="line">              # Specifies the name of the NDK library that</span><br><span class="line">              # CMake needs to locate.</span><br><span class="line">              log )</span><br></pre></td></tr></table></figure>

<p>为了让您的原生库能够调用 log 库中的函数，您需要使用 CMake 构建脚本中的 target_link_libraries() 命令来关联这些库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find_library(...)</span><br><span class="line"></span><br><span class="line"># Links your native library against one or more other native libraries.</span><br><span class="line">target_link_libraries( # Specifies the target library.</span><br><span class="line">                       native-lib</span><br><span class="line"></span><br><span class="line">                       # Links the log library to the target library.</span><br><span class="line">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>

<p>NDK 还以源代码的形式包含一些库，您将需要构建这些代码并将其关联到您的原生库。您可以使用 CMake 构建脚本中的 add_library() 命令将源代码编译到原生库中。如需提供本地 NDK 库的路径，您可以使用 Android Studio 自动为您定义的 ANDROID_NDK 路径变量。</p>
<p>以下命令告诉 CMake 要构建 android_native_app_glue.c（负责管理 NativeActivity 生命周期事件和触摸输入），并将其链接到静态库 native-lib 中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add_library( app-glue</span><br><span class="line">             STATIC</span><br><span class="line">             $&#123;ANDROID_NDK&#125;/sources/android/native_app_glue/android_native_app_glue.c )</span><br><span class="line"></span><br><span class="line"># You need to link static libraries against your shared native library.</span><br><span class="line">target_link_libraries( native-lib app-glue $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>

<h3 id="添加其他预构建库"><a href="#添加其他预构建库" class="headerlink" title="添加其他预构建库"></a>添加其他预构建库</h3><p>添加预构建库的步骤与为 CMake 指定其他要构建的原生库的步骤相似。不过，由于库已构建，因此您需要使用 IMPORTED 标记告诉 CMake 您只想要将此库导入到您的项目中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add_library( imported-lib</span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED )</span><br></pre></td></tr></table></figure>

<p>然后，您需要使用 set_target_properties() 命令指定库的路径，具体步骤如下所示。</p>
<p>某些库会针对特定的 CPU 架构或应用二进制接口 (ABI) 提供单独的软件包，并将其整理到单独的目录中。此方法既有助于库充分利用特定的 CPU 架构，又能让您只使用所需的库版本。要向 CMake 构建脚本添加库的多个 ABI 版本，而不必为库的每个版本编写多个命令，您可以使用 ANDROID_ABI 路径变量。此变量使用的是 NDK 支持的一组默认 ABI，或者您手动配置 Gradle 以使用的一组经过过滤的 ABI。例如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add_library(...)</span><br><span class="line">set_target_properties( # Specifies the target library.</span><br><span class="line">                       imported-lib</span><br><span class="line"></span><br><span class="line">                       # Specifies the parameter you want to define.</span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line"></span><br><span class="line">                       # Provides the path to the library you want to import.</span><br><span class="line">                       imported-lib/src/$&#123;ANDROID_ABI&#125;/libimported-lib.so )</span><br></pre></td></tr></table></figure>

<p>为了让 CMake 能够在编译时定位您的头文件，您需要使用 include_directories() 命令并包含相应头文件的路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include_directories( imported-lib/include/ )</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：如果您想要打包不属于构建时依赖项的预构建库（例如在添加属于 imported-lib 依赖项的预构建库时），则无需按以下说明操作来关联库。</li>
</ul>
<p>如需将预构建库关联到您自己的原生库，请将其添加到 CMake 构建脚本的 target_link_libraries() 命令中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target_link_libraries( native-lib imported-lib app-glue $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>

<p>如需将预构建库打包到 APK 中，您需要使用 sourceSets 块手动配置 Gradle 以包含 .so 文件的路径。构建 APK 后，您可以使用 APK 分析器验证 Gradle 会将哪些库打包到您的 APK 中。</p>
<h3 id="包含其他-CMake-项目"><a href="#包含其他-CMake-项目" class="headerlink" title="包含其他 CMake 项目"></a>包含其他 CMake 项目</h3><p>如果想要构建多个 CMake 项目并在 Android 项目中包含它们的输出，您可以使用一个 CMakeLists.txt 文件（即您关联到 Gradle 的那个文件）作为顶级 CMake 构建脚本，并添加其他 CMake 项目作为此构建脚本的依赖项。以下顶级 CMake 构建脚本会使用 add_subdirectory() 命令将另一个 CMakeLists.txt 文件指定为构建依赖项，然后关联其输出，就像处理任何其他预构建库一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Sets lib_src_DIR to the path of the target CMake project.</span><br><span class="line">set( lib_src_DIR ../gmath )</span><br><span class="line"></span><br><span class="line"># Sets lib_build_DIR to the path of the desired output directory.</span><br><span class="line">set( lib_build_DIR ../gmath/outputs )</span><br><span class="line">file(MAKE_DIRECTORY $&#123;lib_build_DIR&#125;)</span><br><span class="line"></span><br><span class="line"># Adds the CMakeLists.txt file located in the specified directory</span><br><span class="line"># as a build dependency.</span><br><span class="line">add_subdirectory( # Specifies the directory of the CMakeLists.txt file.</span><br><span class="line">                  $&#123;lib_src_DIR&#125;</span><br><span class="line"></span><br><span class="line">                  # Specifies the directory for the build outputs.</span><br><span class="line">                  $&#123;lib_build_DIR&#125; )</span><br><span class="line"></span><br><span class="line"># Adds the output of the additional CMake build as a prebuilt static</span><br><span class="line"># library and names it lib_gmath.</span><br><span class="line">add_library( lib_gmath STATIC IMPORTED )</span><br><span class="line">set_target_properties( lib_gmath PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       $&#123;lib_build_DIR&#125;/$&#123;ANDROID_ABI&#125;/lib_gmath.a )</span><br><span class="line">include_directories( $&#123;lib_src_DIR&#125;/include )</span><br><span class="line"></span><br><span class="line"># Links the top-level CMake build output against lib_gmath.</span><br><span class="line">target_link_libraries( native-lib ... lib_gmath )</span><br></pre></td></tr></table></figure>

<h2 id="关联Gradle"><a href="#关联Gradle" class="headerlink" title="关联Gradle"></a>关联Gradle</h2><h3 id="手动配置-Gradle"><a href="#手动配置-Gradle" class="headerlink" title="手动配置 Gradle"></a>手动配置 Gradle</h3><p>要手动配置 Gradle 以关联到您的原生库，您需要将 externalNativeBuild 块添加到模块级 build.gradle 文件中，并使用 cmake 或 ndkBuild 块对其进行配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;...&#125;</span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  // Encapsulates your external native build configurations.</span><br><span class="line">  externalNativeBuild &#123;</span><br><span class="line"></span><br><span class="line">    // Encapsulates your CMake build configurations.</span><br><span class="line">    cmake &#123;</span><br><span class="line"></span><br><span class="line">      // Provides a relative path to your CMake build script.</span><br><span class="line">      path &quot;CMakeLists.txt&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：如果您要将 Gradle 关联到现有的 ndk-build 项目，请使用 ndkBuild 块（而不是 cmake 块），并提供指向 Android.mk 文件的相对路径。如果 Application.mk 文件与您的 Android.mk 文件位于同一目录下，Gradle 也会包含此文件。</li>
</ul>
<h3 id="指定可选配置"><a href="#指定可选配置" class="headerlink" title="指定可选配置"></a>指定可选配置</h3><p>您可以在模块级 build.gradle 文件的 defaultConfig 块中配置另一个 externalNativeBuild 块，为 CMake 或 ndk-build 指定可选参数和标记。与 defaultConfig 块中的其他属性类似，您也可以在构建配置中为每种产品特性重写这些属性。</p>
<p>例如，如果您的 CMake 或 ndk-build 项目定义多个原生库和可执行文件，您可以使用 targets 属性为指定产品特性构建和打包其中的部分工件。以下代码示例说明了您可以配置的部分属性：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    // This block is different from the one you use to link Gradle</span><br><span class="line">    // to your CMake or ndk-build script.</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line"></span><br><span class="line">      // For ndk-build, instead use the ndkBuild block.</span><br><span class="line">      cmake &#123;</span><br><span class="line"></span><br><span class="line">        // Passes optional arguments to CMake.</span><br><span class="line">        arguments &quot;-DANDROID_ARM_NEON=TRUE&quot;, &quot;-DANDROID_TOOLCHAIN=clang&quot;</span><br><span class="line"></span><br><span class="line">        // Sets a flag to enable format macro constants for the C compiler.</span><br><span class="line">        cFlags &quot;-D__STDC_FORMAT_MACROS&quot;</span><br><span class="line"></span><br><span class="line">        // Sets optional flags for the C++ compiler.</span><br><span class="line">        cppFlags &quot;-fexceptions&quot;, &quot;-frtti&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  productFlavors &#123;</span><br><span class="line">    ...</span><br><span class="line">    demo &#123;</span><br><span class="line">      ...</span><br><span class="line">      externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">          ...</span><br><span class="line">          // Specifies which native libraries or executables to build and package</span><br><span class="line">          // for this product flavor. The following tells Gradle to build only the</span><br><span class="line">          // &quot;native-lib-demo&quot; and &quot;my-executible-demo&quot; outputs from the linked</span><br><span class="line">          // CMake project. If you don&apos;t configure this property, Gradle builds all</span><br><span class="line">          // executables and shared object libraries that you define in your CMake</span><br><span class="line">          // (or ndk-build) project. However, by default, Gradle packages only the</span><br><span class="line">          // shared libraries in your APK.</span><br><span class="line">          targets &quot;native-lib-demo&quot;,</span><br><span class="line">                  // You need to specify this executable and its sources in your CMakeLists.txt</span><br><span class="line">                  // using the add_executable() command. However, building executables from your</span><br><span class="line">                  // native sources is optional, and building native libraries to package into</span><br><span class="line">                  // your APK satisfies most project requirements.</span><br><span class="line">                  &quot;my-executible-demo&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    paid &#123;</span><br><span class="line">      ...</span><br><span class="line">      externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">          ...</span><br><span class="line">          targets &quot;native-lib-paid&quot;,</span><br><span class="line">                  &quot;my-executible-paid&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Use this block to link Gradle to your CMake or ndk-build script.</span><br><span class="line">  externalNativeBuild &#123;</span><br><span class="line">    cmake &#123;...&#125;</span><br><span class="line">    // or ndkBuild &#123;...&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如需详细了解如何配置产品变种和构建变体，请参阅配置构建变体。如需了解您可以使用 arguments 属性为 CMake 配置的变量列表，请参阅使用 CMake 变量。</p>
<h3 id="添加预构建的原生库"><a href="#添加预构建的原生库" class="headerlink" title="添加预构建的原生库"></a>添加预构建的原生库</h3><p>如果您希望 Gradle 将预构建的原生库打包到您的 APK 中，请修改默认的源代码集配置，以添加预构建 .so 文件所在的目录，如下所示。请注意，若要添加关联到 Gradle 的 CMake 构建脚本的工件，则无需执行此操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs &apos;imported-lib/src/&apos;, &apos;more-imported-libs/src/&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="指定-ABI"><a href="#指定-ABI" class="headerlink" title="指定 ABI"></a>指定 ABI</h3><p>默认情况下，Gradle 会针对 NDK 支持的应用二进制接口 (ABI) 将您的原生库构建到单独的 .so 文件中，并将这些文件全部打包到您的 APK 中。如果您希望 Gradle 仅构建和打包原生库的部分 ABI 配置，则可以在模块级 build.gradle 文件中使用 ndk.abiFilters 标记指定这些配置，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">      cmake &#123;...&#125;</span><br><span class="line">      // or ndkBuild &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Similar to other properties in the defaultConfig block,</span><br><span class="line">    // you can configure the ndk block for each product flavor</span><br><span class="line">    // in your build configuration.</span><br><span class="line">    ndk &#123;</span><br><span class="line">      // Specifies the ABI configurations of your native</span><br><span class="line">      // libraries Gradle should build and package with your APK.</span><br><span class="line">      abiFilters &apos;x86&apos;, &apos;x86_64&apos;, &apos;armeabi&apos;, &apos;armeabi-v7a&apos;,</span><br><span class="line">                   &apos;arm64-v8a&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line">  externalNativeBuild &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在大多数情况下，您只需要在 ndk 块中指定 abiFilters（如上所示），因为它会指示 Gradle 构建和打包原生库的这些版本。但是，如果您想控制 Gradle 应当构建的配置，而不依赖于您希望其打包到 APK 中的配置，请在 defaultConfig.externalNativeBuild.cmake 块（或 defaultConfig.externalNativeBuild.ndkBuild 块）中配置另一个 abiFilters 标记。Gradle 会构建这些 ABI 配置，但只会打包您在 defaultConfig.ndk 块中指定的配置。</p>
<p>为了进一步降低 APK 的大小，请考虑基于 ABI 配置多个 APK，而不是创建一个包含原生库所有版本的大型 APK。Gradle 会为您想要支持的每个 ABI 创建单独的 APK，并且仅打包每个 ABI 需要的文件。如果您为每个 ABI 配置多个 APK，而不像上面的代码示例中所示的那样指定 abiFilters 标记，则 Gradle 会为您的原生库构建所有受支持的 ABI 版本，但是仅打包您在多 APK 配置中指定的版本。为避免构建不想要的原生库版本，请为 abiFilters 标记和“一个 ABI 多个 APK”配置提供相同的 ABI 列表。</p>
<h2 id="异常问题"><a href="#异常问题" class="headerlink" title="异常问题"></a>异常问题</h2><p><img src="http://nunu03.github.io/2020/08/05/Android-CMake/%E5%BC%82%E5%B8%B81.png" alt><br><img src="http://nunu03.github.io/2020/08/05/Android-CMake/%E5%BC%82%E5%B8%B82.jpeg" alt></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.android.com/studio/projects" target="_blank" rel="noopener">developer.android.com</a></p>
]]></content>
      
        <categories>
            
            <category> NDK </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Wireshark使用及数据分析]]></title>
      <url>/2020/07/07/Wireshark%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>以直播消息采集和分析数据为例进行讲解。</p>
<a id="more"></a>
<h2 id="采集"><a href="#采集" class="headerlink" title="采集"></a>采集</h2>]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Wireshark </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac清空DNS缓存]]></title>
      <url>/2020/06/11/Mac%E6%B8%85%E7%A9%BADNS%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>开发过程中偶尔发现某些网络地址不能加载问题。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>清除dns缓存：<br>Tiger或更低版本 Mac OS：</p>
<p>sudo lookupd -flushcache</p>
<a id="more"></a>
<p>Leopard和Snow Leopard：</p>
<p>sudo dscacheutil -flushcache</p>
<p>而到了Lion、Mountain Lion和Mavericks：</p>
<p>sudo killall -HUP mDNSResponder</p>
<p>最后是Yosemite:</p>
<p>sudo discoveryutil mdnsflushcache</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/code_liujun/article/details/51661391" target="_blank" rel="noopener">Mac下清空DNS缓存</a></p>
]]></content>
      
        <categories>
            
            <category> cmd </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cmd </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android接入实时美颜]]></title>
      <url>/2020/06/06/Android%E6%8E%A5%E5%85%A5%E5%AE%9E%E6%97%B6%E7%BE%8E%E9%A2%9C/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>相亲项目从3月份上线至今，不管从DAU,UV,留存还是Roi,Arpu等多个方面都有了极速的增长。但是在使用过程中，同样也遇到了一些比较重要的问题。比如美颜问题，在项目初始，我们使用了Agora RTC SDK独有的美颜方案，可是我们的用户一直反馈现有的美颜效果很不好，美颜效果不能调节等问题。从而我们决定接入第三方相芯美颜sdk，来满足我们项目在美颜方面的缺陷。</p>
<a id="more"></a>
<h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p><img src="http://nunu03.github.io/2020/06/06/Android%E6%8E%A5%E5%85%A5%E5%AE%9E%E6%97%B6%E7%BE%8E%E9%A2%9C/facejr.png" alt><br>通过之上方案图，我们可以看出，整个的实现方案就是在相机数据采集后，对数据进行实时美颜处理，处理完成后，及时渲染展示。同时，我们会把渲染后对NV21数据推流到CDN服务器。原理很简单，主要是美颜so的实现方法是关键知识点，这次我们不做讲解，只描述下接入的方法和业务逻辑。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fuSetup(context, path, authpack.A());</span><br><span class="line">byte[] buffer = FileUtils.readFile(context, bundlePath);</span><br><span class="line">if (buffer != null) &#123;</span><br><span class="line">	faceunity.fuLoadAIModelFromPackage(buffer, type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="转化"><a href="#转化" class="headerlink" title="转化"></a>转化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> * @param img NV21数据</span><br><span class="line"> * @param tex 纹理ID</span><br><span class="line"> * @param w</span><br><span class="line"> * @param h</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">public int onDrawFrame(byte[] img, int tex, int w, int h) &#123;</span><br><span class="line">    if (tex &lt;= 0 || img == null || w &lt;= 0 || h &lt;= 0) &#123;</span><br><span class="line">        Log.e(TAG, &quot;onDrawFrame data null&quot;);</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"> ...</span><br><span class="line">    int fuTex = faceunity.fuDualInputToTexture(img, tex, flags, w, h, mFrameId++, mItemsArray);</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中 img 和 tex纹理是我们传入的原始数据，mItemsArray 则是需要用到的美颜效果数组，当该方法返回时，得到的数据便是经过美颜处理的数据，该数据会写回到我们传入的 img 数组中，而返回的 fuTex 则是经过美颜处理的新的纹理标识。</p>
<h3 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h3><p>美颜处理后，推举到服务器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mConsumer.consumeTextureFrame(data.mEffectTextureId,</span><br><span class="line">                        MediaIO.PixelFormat.TEXTURE_2D.intValue(), needsFixWidthAndHeight ? data.videoHeight : data.videoWidth,</span><br><span class="line">                        needsFixWidthAndHeight ? data.videoWidth : data.videoHeight, 0, data.mTimeStamp, data.mTexMatrix);</span><br></pre></td></tr></table></figure>

<h3 id="美颜调整"><a href="#美颜调整" class="headerlink" title="美颜调整"></a>美颜调整</h3><p>而相应的美颜效果可以通过如下方法进行调节(均在 faceunity 当中)，由于我们在对每一帧的时候进行了美颜参数设置，所以我们的美颜设置可以随时的调节并生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">faceunity.fuItemSetParam(itemBeauty, BeautificationParams.IS_BEAUTY_ON, 1.0);</span><br><span class="line">// filter_name 滤镜名称</span><br><span class="line">faceunity.fuItemSetParam(itemBeauty, BeautificationParams.FILTER_NAME, mFilterName);</span><br><span class="line">// filter_level 滤镜强度 范围 0~1 SDK 默认为 1</span><br><span class="line">faceunity.fuItemSetParam(itemBeauty, BeautificationParams.FILTER_LEVEL, mFilterLevel);</span><br></pre></td></tr></table></figure>

<h2 id="相亲接入"><a href="#相亲接入" class="headerlink" title="相亲接入"></a>相亲接入</h2><p><img src="http://nunu03.github.io/2020/06/06/Android%E6%8E%A5%E5%85%A5%E5%AE%9E%E6%97%B6%E7%BE%8E%E9%A2%9C/faceman.png" alt></p>
<p>关键代码如下：直接看注释即可。这里需要注意的是，美颜的sdk，在初始化的时候，加载了证书信息和ai的bundle文件，这个很容易产生误导，实际上，ai的bundle并不是必须在这里进行加载，在直播的过程中也可以再加载生效。所以我把美颜的initFuRender中的ai bundle拆分了出来。这样我们可以提前加载证书，任何时候加载并开启美颜功能。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private fun startBroadcast(uid: Int, local: Boolean, type: Int, userInfo: LiveUserInfo) &#123;</span><br><span class="line">		//创建SurfaceView，本地view=GLSurfaceView 远端view=SurfaceView</span><br><span class="line">        var surfaceView = getSurfaceView(uid,local)</span><br><span class="line">        //初始化美颜，以及设置参数</span><br><span class="line">        initFaceUnityParam(local, type, surfaceView)</span><br><span class="line">        //321倒计时直播开始</span><br><span class="line">       mVideoItemAnchor?.showLoading(local, surfaceView, type)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 美颜初始化，设置美颜参数</span><br><span class="line"> */</span><br><span class="line">private fun initFaceUnityParam(local: Boolean, type: Int,surfaceViewLocal: Surf</span><br><span class="line">    //初始化</span><br><span class="line">    faceunityManager?.initFuRender(this)</span><br><span class="line">    //设置view</span><br><span class="line">    faceunityManager?.setGLSurfaceView(surfaceViewLocal as GLSurfaceView)</span><br><span class="line">    //设置美颜参数</span><br><span class="line">    mVideoItemAnchor?.setFaceunity()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>美颜的管理都在FaceunityManager中进行设置：代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">class FaceunityManager &#123;</span><br><span class="line">   </span><br><span class="line">    //初始化美颜sdk，以及相关管理类</span><br><span class="line">    fun initFuRender(context: Context) &#123;</span><br><span class="line">        // The settings of FURender may be slightly different,</span><br><span class="line">        FURenderer.initFURenderer(context)</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //设计camera数据相关采集参数,宽，高，帧率，是否推流......</span><br><span class="line">    fun setFaceUnityParam(width: Int, height: Int) &#123;</span><br><span class="line">        // set capture width</span><br><span class="line">        mVideoCaptureConfigInfo?.videoCaptureWidth = width</span><br><span class="line">        // set capture height</span><br><span class="line">        mVideoCaptureConfigInfo?.videoCaptureHeight = height</span><br><span class="line">        // set capture fps</span><br><span class="line">        mVideoCaptureConfigInfo?.videoCaptureFps = 30</span><br><span class="line">        // set capture camera</span><br><span class="line">        mVideoCaptureConfigInfo?.cameraFace = Constant.CAMERA_FACING_FRONT</span><br><span class="line">        // set agora consumer format</span><br><span class="line">        mVideoCaptureConfigInfo?.videoCaptureFormat = VideoCaptureConfigInfo.CaptureFormat.TEXTURE_2D</span><br><span class="line">        // set agora consumer type</span><br><span class="line">  		......</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置并开启美颜，当上麦倒计时，直接调用</span><br><span class="line">     */</span><br><span class="line">    fun setBeauty() &#123;</span><br><span class="line">        if (this.mGLSurfaceViewLocal == null) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        if (mVideoManager?.videoRender != null) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        isShowVideo = true</span><br><span class="line">        mVideoManager?.allocate(mVideoCaptureConfigInfo)</span><br><span class="line">        mVideoManager?.setRenderView(this.mGLSurfaceViewLocal)</span><br><span class="line">        startBundle()</span><br><span class="line">        mVideoManager?.attachConnectorToRender(mVideoSource)</span><br><span class="line">        mVideoManager?.startCapture()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 开启美颜，对bundle进行校验，校验成功，加载bundle，开启美颜功能</span><br><span class="line">     * 如果bundle下载成功后，也使用此方法开启美颜功能</span><br><span class="line">     */</span><br><span class="line">    fun startBundle(fileName: String) &#123;</span><br><span class="line">            val isVerity = isVerify(mFaceBundlePath, fileName + &quot;_md5&quot;)</span><br><span class="line">            if (isVerity) &#123;</span><br><span class="line">                mVideoManager?.runInRenderThread &#123;</span><br><span class="line">                    if (!mFUInit) &#123;</span><br><span class="line">                        mFURenderer?.onSurfaceCreated()</span><br><span class="line">                        mFUInit = true</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mVideoManager?.connectEffectHandler(mEffectHandler)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      
        <categories>
            
            <category> Video </category>
            
        </categories>
        
        
        <tags>
            
            <tag> FaceUnity </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义圆角矩形渐变背景边框]]></title>
      <url>/2020/05/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9C%86%E8%A7%92%E7%9F%A9%E5%BD%A2%E6%B8%90%E5%8F%98%E8%83%8C%E6%99%AF%E8%BE%B9%E6%A1%86/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>自定义一个layout实现背景的渐变以及边框的渐变，同时半圆角。效果图如下：</p>
<p><img src="http://nunu03.github.io/2020/05/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9C%86%E8%A7%92%E7%9F%A9%E5%BD%A2%E6%B8%90%E5%8F%98%E8%83%8C%E6%99%AF%E8%BE%B9%E6%A1%86/image.jpg" alt="image"></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">import android.content.Context</span><br><span class="line">import android.graphics.*</span><br><span class="line">import android.util.AttributeSet</span><br><span class="line">import android.widget.LinearLayout</span><br><span class="line"></span><br><span class="line">class GradientBackgroundView  @JvmOverloads constructor(</span><br><span class="line">        context: Context,</span><br><span class="line">        attrs: AttributeSet? = null,</span><br><span class="line">        defStyleAttr: Int = 0</span><br><span class="line">) : LinearLayout(context, attrs, defStyleAttr)  &#123;</span><br><span class="line">    private val mPaint = Paint(Paint.ANTI_ALIAS_FLAG)</span><br><span class="line">    private var mPath = Path()</span><br><span class="line">    private var backGradient: LinearGradient? = null</span><br><span class="line">    private var strokeGradient: LinearGradient? = null</span><br><span class="line">    private val radiusArray = floatArrayOf(0f, 0f, 0f, 0f, 0f, 0f, 0f, 0f)</span><br><span class="line"></span><br><span class="line">    init &#123;</span><br><span class="line">        //设置抗锯齿</span><br><span class="line">        mPaint.isAntiAlias = true</span><br><span class="line">        //设置防抖动</span><br><span class="line">        mPaint.isDither = true</span><br><span class="line">        mPaint.style = Paint.Style.FILL</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 设置四个角的圆角半径</span><br><span class="line">     */</span><br><span class="line">    fun setRadius(leftTop: Float, rightTop: Float, rightBottom: Float, leftBottom: Float) &#123;</span><br><span class="line">        radiusArray[0] = leftTop</span><br><span class="line">        radiusArray[1] = leftTop</span><br><span class="line">        radiusArray[2] = rightTop</span><br><span class="line">        radiusArray[3] = rightTop</span><br><span class="line">        radiusArray[4] = rightBottom</span><br><span class="line">        radiusArray[5] = rightBottom</span><br><span class="line">        radiusArray[6] = leftBottom</span><br><span class="line">        radiusArray[7] = leftBottom</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun setGradient(backGradientColors: IntArray?, strokeGradientcolors: IntArray?) &#123;</span><br><span class="line">        backGradient = LinearGradient(0f, 0f, width.toFloat(), 0f, backGradientColors, null, Shader.TileMode.CLAMP)</span><br><span class="line">        strokeGradient = LinearGradient(0f, 0f, width.toFloat(), 0f, strokeGradientcolors, null, Shader.TileMode.CLAMP)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fun showBackgroundColor() &#123;</span><br><span class="line">        setBackgroundColor(Color.TRANSPARENT)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onDraw(canvas: Canvas) &#123;</span><br><span class="line">        super.onDraw(canvas)</span><br><span class="line">        if (canvas == null) &#123;</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.save()</span><br><span class="line">        //渐变边框</span><br><span class="line">        mPaint.shader = strokeGradient</span><br><span class="line">        mPaint.style = Paint.Style.STROKE</span><br><span class="line">        mPaint.strokeWidth = 4f</span><br><span class="line">        mPath = Path()</span><br><span class="line">        mPath.addRoundRect(RectF(0f, 0f, width.toFloat(), height.toFloat()), radiusArray, Path.Direction.CW)</span><br><span class="line">        canvas.clipPath(mPath)</span><br><span class="line">        canvas.drawPath(mPath, mPaint)</span><br><span class="line"></span><br><span class="line">        //渐变背景色</span><br><span class="line">        mPaint.shader = backGradient</span><br><span class="line">        mPaint.style = Paint.Style.FILL</span><br><span class="line">        mPath = Path()</span><br><span class="line">        mPath.addRoundRect(RectF(2f, 2f, (width - 2).toFloat(), (height - 2).toFloat()), radiusArray, Path.Direction.CW)</span><br><span class="line">        canvas.clipPath(mPath)</span><br><span class="line">        canvas.drawPath(mPath, mPaint)</span><br><span class="line">        canvas.restore()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mBarrageLayout.setRadius(mRadius,0,0,mRadius);</span><br><span class="line">mBarrageLayout.setGradient(new int[]&#123;0xffff53a3,0xfd316a&#125;,new int[]&#123;0xffFFC92B,0x979797&#125;);</span><br><span class="line">mBarrageLayout.showBackgroundColor();</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/everhad/p/6161083.html" target="_blank" rel="noopener">一种android中实现“圆角矩形”的方法</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> View </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[颜色透明度十六进制]]></title>
      <url>/2019/12/06/%E9%A2%9C%E8%89%B2%E9%80%8F%E6%98%8E%E5%BA%A6%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>00是完全透明(百分百透明)，FF就是完全<strong>不</strong>透明</p>
<a id="more"></a>
<table>
<thead>
<tr>
  <th align="left" style="width: 300px;">透明度</th>
  <th align="left" style="width: 300px;">16进制表示</th>
</tr>
</thead>
<tbody><tr>
  <td align="left">100 %</td>
  <td align="left">00</td>
</tr>
<tr>
  <td align="left">99   %</td>
  <td align="left">03</td>
</tr>
<tr>
  <td align="left">98   %</td>
  <td align="left">05</td>
</tr>
<tr>
  <td align="left">97   %</td>
  <td align="left">07</td>
</tr>
<tr>
  <td align="left">96   %</td>
  <td align="left">0A</td>
</tr>
<tr>
  <td align="left">95   %</td>
  <td align="left">0D</td>
</tr>
<tr>
  <td align="left">94   %</td>
  <td align="left">0F</td>
</tr>
<tr>
  <td align="left">93   %</td>
  <td align="left">12</td>
</tr>
<tr>
  <td align="left">92   %</td>
  <td align="left">14</td>
</tr>
<tr>
  <td align="left">91   %</td>
  <td align="left">17</td>
</tr>
<tr>
  <td align="left">90   %</td>
  <td align="left">1A</td>
</tr>
<tr>
  <td align="left">89   %</td>
  <td align="left">1C</td>
</tr>
<tr>
  <td align="left">88   %</td>
  <td align="left">1E</td>
</tr>
<tr>
  <td align="left">87   %</td>
  <td align="left">21</td>
</tr>
<tr>
  <td align="left">86   %</td>
  <td align="left">24</td>
</tr>
<tr>
  <td align="left">85   %</td>
  <td align="left">26</td>
</tr>
<tr>
  <td align="left">84   %</td>
  <td align="left">29</td>
</tr>
<tr>
  <td align="left">83   %</td>
  <td align="left">2B</td>
</tr>
<tr>
  <td align="left">82   %</td>
  <td align="left">2E</td>
</tr>
<tr>
  <td align="left">81   %</td>
  <td align="left">30</td>
</tr>
<tr>
  <td align="left">80   %</td>
  <td align="left">33</td>
</tr>
<tr>
  <td align="left">79   %</td>
  <td align="left">36</td>
</tr>
<tr>
  <td align="left">78   %</td>
  <td align="left">38</td>
</tr>
<tr>
  <td align="left">77   %</td>
  <td align="left">3B</td>
</tr>
<tr>
  <td align="left">76   %</td>
  <td align="left">3D</td>
</tr>
<tr>
  <td align="left">75   %</td>
  <td align="left">40</td>
</tr>
<tr>
  <td align="left">74   %</td>
  <td align="left">42</td>
</tr>
<tr>
  <td align="left">73   %</td>
  <td align="left">45</td>
</tr>
<tr>
  <td align="left">72   %</td>
  <td align="left">47</td>
</tr>
<tr>
  <td align="left">71   %</td>
  <td align="left">4A</td>
</tr>
<tr>
  <td align="left">70   %</td>
  <td align="left">4D</td>
</tr>
<tr>
  <td align="left">69   %</td>
  <td align="left">4F</td>
</tr>
<tr>
  <td align="left">68   %</td>
  <td align="left">52</td>
</tr>
<tr>
  <td align="left">67   %</td>
  <td align="left">54</td>
</tr>
<tr>
  <td align="left">66   %</td>
  <td align="left">57</td>
</tr>
<tr>
  <td align="left">65   %</td>
  <td align="left">59</td>
</tr>
<tr>
  <td align="left">64   %</td>
  <td align="left">5C</td>
</tr>
<tr>
  <td align="left">63   %</td>
  <td align="left">5E</td>
</tr>
<tr>
  <td align="left">62   %</td>
  <td align="left">61</td>
</tr>
<tr>
  <td align="left">61   %</td>
  <td align="left">63</td>
</tr>
<tr>
  <td align="left">60   %</td>
  <td align="left">66</td>
</tr>
<tr>
  <td align="left">59   %</td>
  <td align="left">69</td>
</tr>
<tr>
  <td align="left">58   %</td>
  <td align="left">6B</td>
</tr>
<tr>
  <td align="left">57   %</td>
  <td align="left">6E</td>
</tr>
<tr>
  <td align="left">56   %</td>
  <td align="left">70</td>
</tr>
<tr>
  <td align="left">55   %</td>
  <td align="left">73</td>
</tr>
<tr>
  <td align="left">54   %</td>
  <td align="left">75</td>
</tr>
<tr>
  <td align="left">53   %</td>
  <td align="left">78</td>
</tr>
<tr>
  <td align="left">52   %</td>
  <td align="left">7A</td>
</tr>
<tr>
  <td align="left">51   %</td>
  <td align="left">7D</td>
</tr>
<tr>
  <td align="left">50   %</td>
  <td align="left">80</td>
</tr>
<tr>
  <td align="left">49   %</td>
  <td align="left">82</td>
</tr>
<tr>
  <td align="left">48   %</td>
  <td align="left">85</td>
</tr>
<tr>
  <td align="left">47   %</td>
  <td align="left">87</td>
</tr>
<tr>
  <td align="left">46   %</td>
  <td align="left">8A</td>
</tr>
<tr>
  <td align="left">45   %</td>
  <td align="left">8C</td>
</tr>
<tr>
  <td align="left">44   %</td>
  <td align="left">8F</td>
</tr>
<tr>
  <td align="left">43   %</td>
  <td align="left">91</td>
</tr>
<tr>
  <td align="left">42   %</td>
  <td align="left">94</td>
</tr>
<tr>
  <td align="left">41   %</td>
  <td align="left">96</td>
</tr>
<tr>
  <td align="left">40   %</td>
  <td align="left">99</td>
</tr>
<tr>
  <td align="left">39   %</td>
  <td align="left">9C</td>
</tr>
<tr>
  <td align="left">38   %</td>
  <td align="left">9E</td>
</tr>
<tr>
  <td align="left">37   %</td>
  <td align="left">A1</td>
</tr>
<tr>
  <td align="left">36   %</td>
  <td align="left">A3</td>
</tr>
<tr>
  <td align="left">35   %</td>
  <td align="left">A6</td>
</tr>
<tr>
  <td align="left">34   %</td>
  <td align="left">A8</td>
</tr>
<tr>
  <td align="left">33   %</td>
  <td align="left">AB</td>
</tr>
<tr>
  <td align="left">32   %</td>
  <td align="left">AD</td>
</tr>
<tr>
  <td align="left">31   %</td>
  <td align="left">B0</td>
</tr>
<tr>
  <td align="left">30   %</td>
  <td align="left">B3</td>
</tr>
<tr>
  <td align="left">29   %</td>
  <td align="left">B5</td>
</tr>
<tr>
  <td align="left">28   %</td>
  <td align="left">B8</td>
</tr>
<tr>
  <td align="left">27   %</td>
  <td align="left">BA</td>
</tr>
<tr>
  <td align="left">26   %</td>
  <td align="left">BD</td>
</tr>
<tr>
  <td align="left">25   %</td>
  <td align="left">BF</td>
</tr>
<tr>
  <td align="left">24   %</td>
  <td align="left">C2</td>
</tr>
<tr>
  <td align="left">23   %</td>
  <td align="left">C4</td>
</tr>
<tr>
  <td align="left">22   %</td>
  <td align="left">C7</td>
</tr>
<tr>
  <td align="left">21   %</td>
  <td align="left">C9</td>
</tr>
<tr>
  <td align="left">20   %</td>
  <td align="left">CC</td>
</tr>
<tr>
  <td align="left">19   %</td>
  <td align="left">CF</td>
</tr>
<tr>
  <td align="left">18   %</td>
  <td align="left">D1</td>
</tr>
<tr>
  <td align="left">17   %</td>
  <td align="left">D4</td>
</tr>
<tr>
  <td align="left">16   %</td>
  <td align="left">D6</td>
</tr>
<tr>
  <td align="left">15   %</td>
  <td align="left">D9</td>
</tr>
<tr>
  <td align="left">14   %</td>
  <td align="left">DB</td>
</tr>
<tr>
  <td align="left">13   %</td>
  <td align="left">DE</td>
</tr>
<tr>
  <td align="left">12   %</td>
  <td align="left">E0</td>
</tr>
<tr>
  <td align="left">11   %</td>
  <td align="left">E3</td>
</tr>
<tr>
  <td align="left">10   %</td>
  <td align="left">E6</td>
</tr>
<tr>
  <td align="left">9   %</td>
  <td align="left">E8</td>
</tr>
<tr>
  <td align="left">8   %</td>
  <td align="left">EB</td>
</tr>
<tr>
  <td align="left">7   %</td>
  <td align="left">ED</td>
</tr>
<tr>
  <td align="left">6   %</td>
  <td align="left">F0</td>
</tr>
<tr>
  <td align="left">5   %</td>
  <td align="left">F2</td>
</tr>
<tr>
  <td align="left">4   %</td>
  <td align="left">F5</td>
</tr>
<tr>
  <td align="left">3   %</td>
  <td align="left">F7</td>
</tr>
<tr>
  <td align="left">2   %</td>
  <td align="left">FA</td>
</tr>
<tr>
  <td align="left">1   %</td>
  <td align="left">FC</td>
</tr>
<tr>
  <td align="left">0   %</td>
  <td align="left">FF</td>
</tr>
</tbody></table>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/hewuzhao/article/details/78821954" target="_blank" rel="noopener">最全的Android 颜色透明度</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Color </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 沉浸式解析]]></title>
      <url>/2019/11/19/Android-%E6%B2%89%E6%B5%B8%E5%BC%8F%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>首先我们得了解什么是透明状态栏以及什么是沉浸式状态栏，以及其区别，国内习惯称变色状态栏为沉浸式状态栏，但是两者是有本质区别的:</p>
<a id="more"></a>
<ul>
<li>沉浸式：<br>Android 4.4中，沉浸式体验得到了再次强化，提供了一种“全屏模式”(Full-screen Immersive Mode)。全屏模式又分两种，一种叫后撤式 (Lean Back)，另一种叫做沉浸式(Immersive)。后撤式已经在之前的系统中被广泛使用了——当你在优酷APP中观看视频时，大部分时间手指是不会去碰屏幕的。这种情况下，虚拟键和状态栏都会自动隐藏，但当你触摸屏幕的时候，它们又会出现。而新加入的沉浸式则不太一样，在沉浸式全屏状态下，对屏幕的操作并不会唤出系统栏。想要唤出系统栏，你必须从屏幕的上/下边缘向屏幕内划入。沉浸式的全屏状态更适合游戏和阅读这样的应用。</li>
</ul>
<ul>
<li>变色：<ul>
<li>透明：<br>Android 4.4 一个很重要的改变就是透明系统栏.。新的系统栏是渐变透明的, 可以最大限度的允许屏幕显示更多内容, 也可以让系统栏和 Action Bar 融为一体, 仅仅留下最低限度的背景保护以免通知通知栏内容和 Action Bar 文字/图标难以识别。谷歌把这种效果称之为：Translucent Bar。<br>Translucent Bar 是 Android 对 Edge to Edge 尝试中的一个, 也是最容易被用户注意到的. 它的初始目的就是要最大化可视面积和淡化系统界面的存在感。</li>
<li>变色：<br>Android 5.0后可以自由设置状态栏颜色，所以也可以称作变色状态栏。</li>
</ul>
</li>
</ul>
<p>所以我们这里讲的是变色状态栏，变色状态栏就是如何对 StatusBar（状态栏）的背景透明操作；当我们打开应用时，一般如果不对状态栏进行修改的话，在屏幕的顶部有一条默认的(黑色、灰色、其他)状态栏，和应用的风格非常不协调，为了提供更好的界面交互，然后在状态栏的位置显示我们自定义的颜色，通常为应用的TitleBar的颜色，或者是将应用的整体的一张图片也占据到状态栏中，这个时候我们就需要对状态栏的背景进行操作。<br><a href="http://www.androidchina.net/3520.html" target="_blank" rel="noopener">状态栏详解点击</a></p>
<h2 id="StatusBar、TitleBar"><a href="#StatusBar、TitleBar" class="headerlink" title="StatusBar、TitleBar"></a>StatusBar、TitleBar</h2><p>StatusBar是状态栏，它处于屏幕的最顶部，正常情况下它是显示的，它和TitleBar之间没有直接的关系；</p>
<p>TitleBar是标题栏，比如ActionBar、ToolBar，紧位于状态栏的下方显示。</p>
<p>ActionBar（操作栏） 是在Android 3.0(API 11）中加入到SK中的。</p>
<p>ToolBar（工具栏）是 Android 5.0 推出的一个 Material Design 风格的导航控件 ,用来取代之前的 Actionbar 。与 Actionbar 相比，Toolbar 明显要灵活的多。它不像 Actionbar 一样，一定要固定在Activity的顶部，而是可以放到界面的任意位置。与ActionBar相比显示效果跟ActionBar并没有区别。但优点是自定义视图的操作更加简单：</p>
<ul>
<li>1.设置导航栏图标；</li>
<li>2.设置App的logo；</li>
<li>3.支持设置标题和子标题；</li>
<li>4.支持添加一个或多个的自定义控件；</li>
<li>5.支持Action Menu；</li>
</ul>
<h3 id="ActionBar"><a href="#ActionBar" class="headerlink" title="ActionBar"></a>ActionBar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;AppCompatActivity_ActionBarTheme&quot; parent=&quot;Theme.AppCompat.Light.DarkActionBar&quot;&gt;</span><br><span class="line">    &lt;!-- Customize your theme here. --&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    ActionBar actionBar = getSupportActionBar();</span><br><span class="line">    actionBar.setTitle(&quot;ActionBar Title&quot;);</span><br><span class="line">actionBar.setBackgroundDrawable(getDrawable(R.drawable.ic_launcher_background));</span><br><span class="line">    actionBar.setCustomView(R.layout.activity_actionbar);</span><br><span class="line">    actionBar.setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>备注</strong>是getSupportActionBar()还是默认的getActionBar()，还可以自定义title view</p>
<h3 id="Toolbar"><a href="#Toolbar" class="headerlink" title="Toolbar"></a>Toolbar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;style name=&quot;AppCompatActivity_ToolBarTheme&quot; parent=&quot;Theme.AppCompat.Light&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;windowActionBar&quot;&gt;false&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;windowNoTitle&quot;&gt;true&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimary&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimaryDark&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</span><br><span class="line">    &lt;item name=&quot;android:textAllCaps&quot;&gt;false&lt;/item&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;android.support.v7.widget.Toolbar</span><br><span class="line">    android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:background=&quot;?attr/colorPrimary&quot;</span><br><span class="line">    android:layout_height=&quot;200dp&quot;</span><br><span class="line">    app:title=&quot;标题&quot;</span><br><span class="line">    android:minHeight=&quot;?attr/actionBarSize&quot;&gt;</span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/toolbar_view&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:textColor=&quot;#ff0000&quot;</span><br><span class="line">        android:text=&quot;自定义View&quot;/&gt;</span><br><span class="line">&lt;/android.support.v7.widget.Toolbar&gt;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">	//也可以这里设置toolbar</span><br><span class="line">    Toolbar toolBar = findViewById(R.id.toolbar);</span><br><span class="line">    //主标题，必须在setSupportActionBar之前设置，否则无效，如果放在其他位置，则直接setTitle即可</span><br><span class="line">    toolBar.setTitle(&quot;ToolBar Title&quot;);</span><br><span class="line">    //用toolbar替换actionbar</span><br><span class="line">    setSupportActionBar(toolBar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>备注</strong>可以在xml设置属性，也以在代码中设置；还可以在xml添加view；还可以对Toolbar自定义；使用Toolbar要隐藏ActionBar；</p>
<p><a href="https://www.jianshu.com/p/81d0bcb282cb" target="_blank" rel="noopener">ActionBar和ToolBar：使用详细点击</a></p>
<h3 id="item属性释义"><a href="#item属性释义" class="headerlink" title="item属性释义"></a>item属性释义</h3><p><img src="http://nunu03.github.io/2019/11/19/Android-%E6%B2%89%E6%B5%B8%E5%BC%8F%E8%A7%A3%E6%9E%90/item.png" alt="item"><br>比较通用的几个属性，引用了网上的一个截图；更多详细见：<br><a href="https://blog.csdn.net/jinmie0193/article/details/80723724" target="_blank" rel="noopener">各属性指定颜色的位置</a></p>
<h2 id="状态栏背景色"><a href="#状态栏背景色" class="headerlink" title="状态栏背景色"></a>状态栏背景色</h2><h3 id="Android4-4（-lt-API-19）"><a href="#Android4-4（-lt-API-19）" class="headerlink" title="Android4.4（&lt; API 19）"></a>Android4.4（&lt; API 19）</h3><p>在Android系统4.4以前，状态栏的背景色和字体颜色都是不能改变的，我们可以对 StatusBar 进行全屏或隐藏操作。</p>
<ul>
<li><p>配置theme</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:theme=&quot;@android:style/Theme.NoTitleBar.Fullscreen&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码全屏</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN ,</span><br><span class="line">                WindowManager.LayoutParams. FLAG_FULLSCREEN);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Android4-4（API-19）-Android-5-0（-lt-API-21）"><a href="#Android4-4（API-19）-Android-5-0（-lt-API-21）" class="headerlink" title="Android4.4（API 19）- Android 5.0（&lt; API 21）"></a>Android4.4（API 19）- Android 5.0（&lt; API 21）</h3><ul>
<li><p>theme：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;true&lt;/item&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 失效 --&gt;</span><br><span class="line">   &lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>设置如上属性后，我们会发现状态栏的背景变了，其实不是变了，而是标题栏的布局延伸到了状态栏里。<br><img src="http://nunu03.github.io/2019/11/19/Android-%E6%B2%89%E6%B5%B8%E5%BC%8F%E8%A7%A3%E6%9E%90/translu.png" alt><br>如果是图片浸入的话：直接给TitleBar或者自定义view设置背景图即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Toolbar toolBar = findViewById(R.id.toolbar);</span><br><span class="line">toolBar.setBackgroundResource(R.mipmap.title_back);</span><br></pre></td></tr></table></figure>

<p><img src="http://nunu03.github.io/2019/11/19/Android-%E6%B2%89%E6%B5%B8%E5%BC%8F%E8%A7%A3%E6%9E%90/img_header.jpg" alt></p>
<h3 id="Android-5-0（-gt-API-21）"><a href="#Android-5-0（-gt-API-21）" class="headerlink" title="Android 5.0（&gt;= API 21）"></a>Android 5.0（&gt;= API 21）</h3><ul>
<li><p>theme：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=&quot;colorPrimaryDark&quot;&gt;@color/colorPrimary&lt;/item&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>代码：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setStatusBarColor(getResources().getColor(android.R.color.holo_red_light));</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>如果是图片浸入的话：直接在主题中设置状态栏背景色透明即可,同理直接给TitleBar或者自定义view设置背景图即可；效果图同上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;true&lt;/item&gt;</span><br><span class="line">&lt;item name = &quot;android:statusBarColor&quot;&gt;@android:color/transparent&lt;/item&gt;</span><br><span class="line">	</span><br><span class="line">Toolbar toolBar = findViewById(R.id.toolbar);</span><br><span class="line">toolBar.setBackgroundResource(R.mipmap.title_back);</span><br></pre></td></tr></table></figure>

<h3 id="android-fitsSystemWindows-”true”"><a href="#android-fitsSystemWindows-”true”" class="headerlink" title="android:fitsSystemWindows=”true”"></a>android:fitsSystemWindows=”true”</h3><p>当我们设置了android:windowTranslucentStatus=true后，我们发现Toolbar内容被StatusBar覆盖，相当于Toolbar整体布局上移了，怎么解决？我们可以设置android:fitsSystemWindows=”true”，但是这时候我们发现，我们的StatusBar的背景色实效了。如何解决？我们就可以通过往Window窗口的decorView添加一个View,让它大小与系统状态栏一样，然后设置这个view的背景，就可以实现修改状态栏颜色的效果了。但是这种只适合修改StatusBar的背景色，如果是图片浸入，就不可以了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ViewGroup decorViewGroup = (ViewGroup) getWindow().getDecorView();</span><br><span class="line">View statusBarView = new View(getWindow().getContext());</span><br><span class="line">int statusBarHeight = getStatusBarHeight(getWindow().getContext());</span><br><span class="line">FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT, statusBarHeight);</span><br><span class="line">params.gravity = Gravity.TOP;</span><br><span class="line">statusBarView.setLayoutParams(params);</span><br><span class="line">statusBarView.setBackgroundResource(R.color.colorPrimary);</span><br><span class="line">decorViewGroup.addView(statusBarView);</span><br><span class="line">        </span><br><span class="line">private static int getStatusBarHeight(Context context) &#123;</span><br><span class="line">    int statusBarHeight = 0;</span><br><span class="line">    Resources res = context.getResources();</span><br><span class="line">    int resourceId = res.getIdentifier(&quot;status_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;);</span><br><span class="line">    if (resourceId &gt; 0) &#123;</span><br><span class="line">        statusBarHeight = res.getDimensionPixelSize(resourceId);</span><br><span class="line">    &#125;</span><br><span class="line">    return statusBarHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TitleBar图片浸入"><a href="#TitleBar图片浸入" class="headerlink" title="TitleBar图片浸入"></a>TitleBar图片浸入</h3><p>我们从上面的效果图，可以看出，图片浸入时，相当于TitleBar移动到了状态栏的下面，这个时候我们标题可能与状态栏的图标重叠，那怎么办呢？上边说了android:fitsSystemWindows=”true”不行，需要设置状态栏背景色失效，其实我们这个时候，可以在TitleBar上添加一个和状态栏大小的透明view即可，TitleBar设置paddingTop 也可以，但是你需要重新设置TitleBar的高度，这样的话就不如第一种方案合适了。<br>设计一个xml，这个包含了TitleBar和默认的StatusBar的替代view。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    android:orientation=&quot;vertical&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ImageView</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_alignBottom=&quot;@+id/toolbar&quot;</span><br><span class="line">        android:layout_alignTop=&quot;@+id/statusBartop&quot;</span><br><span class="line">        android:scaleType=&quot;fitXY&quot;</span><br><span class="line">        android:src=&quot;@mipmap/title_back&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=&quot;@+id/statusBartop&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:background=&quot;#00000000&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;android.support.v7.widget.Toolbar</span><br><span class="line">        android:id=&quot;@+id/toolbar&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_below=&quot;@+id/statusBartop&quot;</span><br><span class="line">        &gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:layout_width=&quot;match_parent&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot; dkfslfjslfsjflsjflsf&quot;</span><br><span class="line">            android:textColor=&quot;@android:color/holo_red_dark&quot;</span><br><span class="line"></span><br><span class="line">            android:textSize=&quot;16dp&quot; /&gt;</span><br><span class="line">    &lt;/android.support.v7.widget.Toolbar&gt;</span><br><span class="line">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>

<p>然后我们在代码中进行设置即可：版本大于18，即4.4以上即可，4.4一下不存在沉浸式模式；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int sysVersion = Build.VERSION.SDK_INT;</span><br><span class="line">if (sysVersion &gt; Build.VERSION_CODES.JELLY_BEAN_MR2 ) &#123;</span><br><span class="line">    int result = 0;</span><br><span class="line">    int resourceId = getResources().getIdentifier(&quot;status_bar_height&quot;, &quot;dimen&quot;, &quot;android&quot;);</span><br><span class="line">    if (resourceId &gt; 0) &#123;</span><br><span class="line">        result = getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">    &#125;</span><br><span class="line">    LinearLayout toptop = this.findViewById(R.id.statusBartop);</span><br><span class="line">    RelativeLayout.LayoutParams para = new RelativeLayout.LayoutParams(this.getWindowManager().getDefaultDisplay().getWidth(), result);</span><br><span class="line">    //设置修改后的布局。</span><br><span class="line">    toptop.setLayoutParams(para);</span><br><span class="line"></span><br><span class="line">    Toolbar toolbar = this.findViewById(R.id.toolbar);</span><br><span class="line">    RelativeLayout.LayoutParams paraBar = new RelativeLayout.LayoutParams(this.getWindowManager().getDefaultDisplay().getWidth(), 150);</span><br><span class="line">    paraBar.addRule(RelativeLayout.BELOW,R.id.statusBartop);</span><br><span class="line">    toolbar.setLayoutParams(paraBar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后别忘记设置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;item name=&quot;android:windowTranslucentStatus&quot;&gt;true&lt;/item&gt;</span><br><span class="line">或者在代码中：</span><br><span class="line">getWindow().addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br></pre></td></tr></table></figure>

<p>看下效果图：<br><img src="http://nunu03.github.io/2019/11/19/Android-%E6%B2%89%E6%B5%B8%E5%BC%8F%E8%A7%A3%E6%9E%90/image.jpg" alt></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Title </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Toast源码解读]]></title>
      <url>/2019/10/11/Toast%E8%A7%A3%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Toast(吐司)，这个控件的用词相当准确,它所表现出来的特征正是吐司似的弹出效果，使用非常简单便捷。<br>而且Toast开发时比较常用的一个类了，用它给用户弹提示信息和界面反馈，有时候也用它来作为辅助调试的手段。但是用得多了，有时候自然会遇到各种各样的问题，比如重复点击问题，弹框位置，显示时间等，这时候我们就要对运行机制以及源码进行了解。</p>
<a id="more"></a>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>1.Toast不是View，它用于帮助创建并展示包含一条小消息的View；</p>
<p>2.它的设计理念是尽量不惹眼，但又能展示想让用户看到的信息；</p>
<p>3.被展示时，浮在应用界面之上；</p>
<p>4.永远不会获取到焦点；</p>
<p>5.大小取决于消息的长度；</p>
<p>6.超时后会自动消失；</p>
<p>7.可以自定义显示在屏幕上的位置（默认左右居中显示在靠近屏幕底部的位置；</p>
<p>8.可以使用自定义布局，也只有在自定义布局的时候才需要直接调用Toast的构造方法，其它时候都是使用 makeText方法来创建Toast；</p>
<p>9.Toast弹出后当前Activity会保持可见性和可交互性；</p>
<p>10.使用cancel方法可以立即将已显示的Toast关闭让未显示的Toast不再显示；</p>
<p>11.Toast 也算是一个「通知」，如果弹出状态消息后期望得到用户响应，应该使用 Notification。</p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><h4 id="new-Toast"><a href="#new-Toast" class="headerlink" title="new Toast"></a>new Toast</h4><blockquote>
<p>Toast.class</p>
<p>这里面初始化了TN,TN是什么？一会下面会讲道</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Constructs an empty Toast object.  If looper is null, Looper.myLooper() is used.</span><br><span class="line"> * @hide</span><br><span class="line"> */</span><br><span class="line">public Toast(@NonNull Context context, @Nullable Looper looper) &#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    mTN = new TN(context.getPackageName(), looper);</span><br><span class="line">    mTN.mY = context.getResources().getDimensionPixelSize(</span><br><span class="line">            com.android.internal.R.dimen.toast_y_offset);</span><br><span class="line">    mTN.mGravity = context.getResources().getInteger(</span><br><span class="line">            com.android.internal.R.integer.config_toastDefaultGravity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Toast-makeText"><a href="#Toast-makeText" class="headerlink" title="Toast.makeText"></a>Toast.makeText</h4><blockquote>
<p>Toast.class</p>
<p>这里面蕴含了很多的信息,XML布局,text显示文案，显示时长等等</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Toast.class</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Make a standard toast to display using the specified looper.</span><br><span class="line"> * If looper is null, Looper.myLooper() is used.</span><br><span class="line"> * @hide</span><br><span class="line"> */</span><br><span class="line">public static Toast makeText(@NonNull Context context, @Nullable Looper looper,</span><br><span class="line">        @NonNull CharSequence text, @Duration int duration) &#123;</span><br><span class="line">    Toast result = new Toast(context, looper);</span><br><span class="line"></span><br><span class="line">    LayoutInflater inflate = (LayoutInflater)</span><br><span class="line">            context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class="line">    View v = inflate.inflate(com.android.internal.R.layout.transient_notification, null);</span><br><span class="line">    TextView tv = (TextView)v.findViewById(com.android.internal.R.id.message);</span><br><span class="line">    tv.setText(text);</span><br><span class="line"></span><br><span class="line">    result.mNextView = v;</span><br><span class="line">    result.mDuration = duration;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h3><blockquote>
<p>Toast.class</p>
<p>这里是show一个Toast,显示的时候把tn，和包名相关信息传递给service，将我们需要显示的toast放到这个服务的队列中进行显示。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Show the view for the specified duration.</span><br><span class="line"> */</span><br><span class="line">public void show() &#123;</span><br><span class="line">    if (mNextView == null) &#123;</span><br><span class="line">        throw new RuntimeException(&quot;setView must have been called&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    INotificationManager service = getService();</span><br><span class="line">    String pkg = mContext.getOpPackageName();</span><br><span class="line">    TN tn = mTN;</span><br><span class="line">    tn.mNextView = mNextView;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        service.enqueueToast(pkg, tn, mDuration);</span><br><span class="line">    &#125; catch (RemoteException e) &#123;</span><br><span class="line">        // Empty</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>NotificationManagerService.class</p>
<p>Toast入系统队列的方法:在Toast的TN对象中，会调用service.enqueueToast(String pkg,ItransientNotification callback,int duaraion)来将创建出来的Toast放入NotificationManagerService的ToastRecord队列中。<br>NotificationManagerService是一个运行在SystemServer进程中的一个守护进程，Android大部分的IPC通信都是通过Binder机制，这个守护进程像一个主管一样，所有的下面的人都必须让它进行调度，然后由它来进行显示或者是隐藏。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public void enqueueToast(String pkg, ITransientNotification callback, int duration)</span><br><span class="line">&#123;</span><br><span class="line">    .........................................</span><br><span class="line"></span><br><span class="line">    synchronized (mToastQueue) &#123;</span><br><span class="line">        int callingPid = Binder.getCallingPid();</span><br><span class="line">        long callingId = Binder.clearCallingIdentity();</span><br><span class="line">        try &#123;</span><br><span class="line">            ToastRecord record;</span><br><span class="line">            int index;</span><br><span class="line">            // All packages aside from the android package can enqueue one toast at a time</span><br><span class="line">            //查看这个toast是否在当前队列中，有的话就返回索引</span><br><span class="line">            if (!isSystemToast) &#123;</span><br><span class="line">                index = indexOfToastPackageLocked(pkg);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                index = indexOfToastLocked(pkg, callback);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // If the package already has a toast, we update its toast</span><br><span class="line">            // in the queue, we don&apos;t move it to the end of the queue.</span><br><span class="line">            //如果这个index大于等于0，说明这个toast已经在这个队列中了，只需要更新显示时间就可以了</span><br><span class="line">            //当然这里callback是一个对象，pkg是一个String，所以比较的时候是对象的比较</span><br><span class="line">            if (index &gt;= 0) &#123;</span><br><span class="line">                record = mToastQueue.get(index);</span><br><span class="line">                record.update(duration);</span><br><span class="line">                try &#123;</span><br><span class="line">                    record.callback.hide();</span><br><span class="line">                &#125; catch (RemoteException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                record.update(callback);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">            		//将这个toast封装成ToastRecord对象，放到队列中</span><br><span class="line">                Binder token = new Binder();</span><br><span class="line">                mWindowManagerInternal.addWindowToken(token, TYPE_TOAST, DEFAULT_DISPLAY);</span><br><span class="line">                record = new ToastRecord(callingPid, pkg, callback, duration, token);</span><br><span class="line">                mToastQueue.add(record);</span><br><span class="line">                index = mToastQueue.size() - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            keepProcessAliveIfNeededLocked(callingPid);</span><br><span class="line">            // If it&apos;s at index 0, it&apos;s the current toast.  It doesn&apos;t matter if it&apos;s</span><br><span class="line">            // new or just been updated.  Call back and tell it to show itself.</span><br><span class="line">            // If the callback fails, this will remove it from the list, so don&apos;t</span><br><span class="line">            // assume that it&apos;s valid after this.</span><br><span class="line">            //如果返回的索引是0，说明当前的这个存在的toast就在对头，直接显示</span><br><span class="line">            if (index == 0) &#123;</span><br><span class="line">                showNextToastLocked();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            Binder.restoreCallingIdentity(callingId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void showNextToastLocked() &#123;</span><br><span class="line">    ToastRecord record = mToastQueue.get(0);</span><br><span class="line">    ....................................  </span><br><span class="line">    record.callback.show(record.token);</span><br><span class="line">    scheduleTimeoutLocked(record);</span><br><span class="line">    return;</span><br><span class="line">    ...................................    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void scheduleTimeoutLocked(ToastRecord r)</span><br><span class="line">&#123;</span><br><span class="line">    mHandler.removeCallbacksAndMessages(r);</span><br><span class="line">    Message m = Message.obtain(mHandler, MESSAGE_TIMEOUT, r);</span><br><span class="line">    long delay = r.duration == Toast.LENGTH_LONG ? LONG_DELAY : SHORT_DELAY;</span><br><span class="line">    mHandler.sendMessageDelayed(m, delay);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void handleTimeout(ToastRecord record)</span><br><span class="line">&#123;</span><br><span class="line">        int index = indexOfToastLocked(record.pkg, record.callback);</span><br><span class="line">        if (index &gt;= 0) &#123;</span><br><span class="line">            cancelToastLocked(index);</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h3><blockquote>
<p>NotificationManagerService.class</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">void cancelToastLocked(int index) &#123;</span><br><span class="line">    ToastRecord record = mToastQueue.get(index);</span><br><span class="line">    try &#123;</span><br><span class="line">        record.callback.hide();</span><br><span class="line">    &#125; catch (RemoteException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ToastRecord lastToast = mToastQueue.remove(index);</span><br><span class="line">    mWindowManagerInternal.removeWindowToken(lastToast.token, true, DEFAULT_DISPLAY);</span><br><span class="line"></span><br><span class="line">    keepProcessAliveIfNeededLocked(record.pid);</span><br><span class="line">    if (mToastQueue.size() &gt; 0) &#123;</span><br><span class="line">        // Show the next one. If the callback fails, this will remove</span><br><span class="line">        // it from the list, so don&apos;t assume that the list hasn&apos;t changed</span><br><span class="line">        // after this point.</span><br><span class="line">        showNextToastLocked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="TN"><a href="#TN" class="headerlink" title="TN"></a>TN</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line">private static class TN extends ITransientNotification.Stub &#123;</span><br><span class="line">    private final WindowManager.LayoutParams mParams = new WindowManager.LayoutParams();</span><br><span class="line">.................................................................</span><br><span class="line"></span><br><span class="line">    TN(String packageName, @Nullable Looper looper) &#123;</span><br><span class="line">        // XXX This should be changed to use a Dialog, with a Theme.Toast</span><br><span class="line">        // defined that sets up the layout params appropriately.</span><br><span class="line">        final WindowManager.LayoutParams params = mParams;</span><br><span class="line">        params.height = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        params.width = WindowManager.LayoutParams.WRAP_CONTENT;</span><br><span class="line">        params.format = PixelFormat.TRANSLUCENT;</span><br><span class="line">        params.windowAnimations = com.android.internal.R.style.Animation_Toast;</span><br><span class="line">        params.type = WindowManager.LayoutParams.TYPE_TOAST;</span><br><span class="line">        params.setTitle(&quot;Toast&quot;);</span><br><span class="line">        params.flags = WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON</span><br><span class="line">                | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</span><br><span class="line">                | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;</span><br><span class="line"></span><br><span class="line">        mPackageName = packageName;</span><br><span class="line"></span><br><span class="line">        if (looper == null) &#123;</span><br><span class="line">            // Use Looper.myLooper() if looper is not specified.</span><br><span class="line">            looper = Looper.myLooper();</span><br><span class="line">            if (looper == null) &#123;</span><br><span class="line">                throw new RuntimeException(</span><br><span class="line">                        &quot;Can&apos;t toast on a thread that has not called Looper.prepare()&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mHandler = new Handler(looper, null) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void handleMessage(Message msg) &#123;</span><br><span class="line">                switch (msg.what) &#123;</span><br><span class="line">                    case SHOW: &#123;</span><br><span class="line">                        IBinder token = (IBinder) msg.obj;</span><br><span class="line">                        handleShow(token);</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    case HIDE: &#123;</span><br><span class="line">                        handleHide();</span><br><span class="line">                        // Don&apos;t do this in handleHide() because it is also invoked by</span><br><span class="line">                        // handleShow()</span><br><span class="line">                        mNextView = null;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    case CANCEL: &#123;</span><br><span class="line">                        handleHide();</span><br><span class="line">                        // Don&apos;t do this in handleHide() because it is also invoked by</span><br><span class="line">                        // handleShow()</span><br><span class="line">                        mNextView = null;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            getService().cancelToast(mPackageName, TN.this);</span><br><span class="line">                        &#125; catch (RemoteException e) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * schedule handleShow into the right thread</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void show(IBinder windowToken) &#123;</span><br><span class="line">        if (localLOGV) Log.v(TAG, &quot;SHOW: &quot; + this);</span><br><span class="line">        mHandler.obtainMessage(SHOW, windowToken).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * schedule handleHide into the right thread</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void hide() &#123;</span><br><span class="line">        if (localLOGV) Log.v(TAG, &quot;HIDE: &quot; + this);</span><br><span class="line">        mHandler.obtainMessage(HIDE).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void cancel() &#123;</span><br><span class="line">        if (localLOGV) Log.v(TAG, &quot;CANCEL: &quot; + this);</span><br><span class="line">        mHandler.obtainMessage(CANCEL).sendToTarget();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void handleShow(IBinder windowToken) &#123;</span><br><span class="line">        .................................................</span><br><span class="line">            if (mView != mNextView) &#123;</span><br><span class="line">            // remove the old view if necessary</span><br><span class="line">            handleHide();</span><br><span class="line">            mView = mNextView;</span><br><span class="line">            Context context = mView.getContext().getApplicationContext();</span><br><span class="line">            String packageName = mView.getContext().getOpPackageName();</span><br><span class="line">            if (context == null) &#123;</span><br><span class="line">                context = mView.getContext();</span><br><span class="line">            &#125;</span><br><span class="line">            mWM = (WindowManager)context.getSystemService(Context.WINDOW_SERVICE);</span><br><span class="line">            // We can resolve the Gravity here by using the Locale for getting</span><br><span class="line">            // the layout direction</span><br><span class="line">            final Configuration config = mView.getContext().getResources().getConfiguration();</span><br><span class="line">            final int gravity = Gravity.getAbsoluteGravity(mGravity, config.getLayoutDirection());</span><br><span class="line">            mParams.gravity = gravity;</span><br><span class="line">            if ((gravity &amp; Gravity.HORIZONTAL_GRAVITY_MASK) == Gravity.FILL_HORIZONTAL) &#123;</span><br><span class="line">                mParams.horizontalWeight = 1.0f;</span><br><span class="line">            &#125;</span><br><span class="line">            if ((gravity &amp; Gravity.VERTICAL_GRAVITY_MASK) == Gravity.FILL_VERTICAL) &#123;</span><br><span class="line">                mParams.verticalWeight = 1.0f;</span><br><span class="line">            &#125;</span><br><span class="line">            mParams.x = mX;</span><br><span class="line">            mParams.y = mY;</span><br><span class="line">            mParams.verticalMargin = mVerticalMargin;</span><br><span class="line">            mParams.horizontalMargin = mHorizontalMargin;</span><br><span class="line">            mParams.packageName = packageName;</span><br><span class="line">            mParams.hideTimeoutMilliseconds = mDuration ==</span><br><span class="line">                Toast.LENGTH_LONG ? LONG_DURATION_TIMEOUT : SHORT_DURATION_TIMEOUT;</span><br><span class="line">            mParams.token = windowToken;</span><br><span class="line">            if (mView.getParent() != null) &#123;</span><br><span class="line">                if (localLOGV) Log.v(TAG, &quot;REMOVE! &quot; + mView + &quot; in &quot; + this);</span><br><span class="line">                mWM.removeView(mView);</span><br><span class="line">            &#125;</span><br><span class="line">            if (localLOGV) Log.v(TAG, &quot;ADD! &quot; + mView + &quot; in &quot; + this);</span><br><span class="line">            // Since the notification manager service cancels the token right</span><br><span class="line">            // after it notifies us to cancel the toast there is an inherent</span><br><span class="line">            // race and we may attempt to add a window after the token has been</span><br><span class="line">            // invalidated. Let us hedge against that.</span><br><span class="line">            try &#123;</span><br><span class="line">                mWM.addView(mView, mParams);</span><br><span class="line">                trySendAccessibilityEvent();</span><br><span class="line">            &#125; catch (WindowManager.BadTokenException e) &#123;</span><br><span class="line">                /* ignore */</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void trySendAccessibilityEvent() &#123;</span><br><span class="line">        AccessibilityManager accessibilityManager =</span><br><span class="line">                AccessibilityManager.getInstance(mView.getContext());</span><br><span class="line">        if (!accessibilityManager.isEnabled()) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        // treat toasts as notifications since they are used to</span><br><span class="line">        // announce a transient piece of information to the user</span><br><span class="line">        AccessibilityEvent event = AccessibilityEvent.obtain(</span><br><span class="line">                AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED);</span><br><span class="line">        event.setClassName(getClass().getName());</span><br><span class="line">        event.setPackageName(mView.getContext().getPackageName());</span><br><span class="line">        mView.dispatchPopulateAccessibilityEvent(event);</span><br><span class="line">        accessibilityManager.sendAccessibilityEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void handleHide() &#123;</span><br><span class="line">        if (localLOGV) Log.v(TAG, &quot;HANDLE HIDE: &quot; + this + &quot; mView=&quot; + mView);</span><br><span class="line">        if (mView != null) &#123;</span><br><span class="line">            // note: checking parent() just to make sure the view has</span><br><span class="line">            // been added...  i have seen cases where we get here when</span><br><span class="line">            // the view isn&apos;t yet added, so let&apos;s try not to crash.</span><br><span class="line">            if (mView.getParent() != null) &#123;</span><br><span class="line">                if (localLOGV) Log.v(TAG, &quot;REMOVE! &quot; + mView + &quot; in &quot; + this);</span><br><span class="line">                mWM.removeViewImmediate(mView);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mView = null;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="显示时长"><a href="#显示时长" class="headerlink" title="显示时长"></a>显示时长</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static final int LONG_DELAY = PhoneWindowManager.TOAST_WINDOW_TIMEOUT;</span><br><span class="line">public static final int TOAST_WINDOW_TIMEOUT = 3500; // 3.5 seconds</span><br><span class="line">static final int SHORT_DELAY = 2000; // 2 seconds</span><br></pre></td></tr></table></figure>

<h3 id="超时时长"><a href="#超时时长" class="headerlink" title="超时时长"></a>超时时长</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">static final long SHORT_DURATION_TIMEOUT = 4000;</span><br><span class="line">static final long LONG_DURATION_TIMEOUT = 7000;</span><br></pre></td></tr></table></figure>

<h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><h3 id="能否在非-UI-线程调用"><a href="#能否在非-UI-线程调用" class="headerlink" title="能否在非 UI 线程调用"></a>能否在非 UI 线程调用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        Toast.makeText(getContext(), &quot;Call toast on non-UI thread&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<p>异常提示：Can’t create handler inside thread that has not called Looper.prepare()</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Thread(new Runnable() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        Toast.makeText(getContext(), &quot;Call toast on non-UI thread&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<h3 id="Toast数量"><a href="#Toast数量" class="headerlink" title="Toast数量"></a>Toast数量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static final int MAX_PACKAGE_NOTIFICATIONS = 50;</span><br></pre></td></tr></table></figure>

<h3 id="Service中能否显示Toast"><a href="#Service中能否显示Toast" class="headerlink" title="Service中能否显示Toast"></a>Service中能否显示Toast</h3><p>可以。但是网上说IntentService不可以,因为IntentService运行在独立的线程中，所以Toast不正常需要通过Handler运行于主线程之上，但是我打印IntentService也是main线程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Handler handler = new Handler(Looper.getMainLooper());  </span><br><span class="line">handler.post(new Runnable() &#123;  </span><br><span class="line">	public void run() &#123;  </span><br><span class="line">		dialog.show();  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><h3 id="源码差异"><a href="#源码差异" class="headerlink" title="源码差异"></a>源码差异</h3><blockquote>
<p>8 以下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (index &gt;= 0) &#123;</span><br><span class="line">    record = mToastQueue.get(index);</span><br><span class="line">    record.update(duration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>9</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (index &gt;= 0) &#123;</span><br><span class="line">    record = mToastQueue.get(index);</span><br><span class="line">    record.update(duration);</span><br><span class="line">    try &#123;</span><br><span class="line">        record.callback.hide();</span><br><span class="line">    &#125; catch (RemoteException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    record.update(callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果9，快速点击，当toast弹框，再次点击立刻消失，然后到事件后，清除队列后才能再次显示。而8以下，则是toast弹框到时间消失后，再次点击才能显示。两者toast每次显示的时间不同。</p>
<h3 id="系统问题"><a href="#系统问题" class="headerlink" title="系统问题"></a>系统问题</h3><p>某些手机系统源码做了修改，比如红米5p，如果一直点击，在toast消失后，则不会在弹提示。停下一段时间后，log会输入异常提示。初步认定是快速点击时的toast机制做了修改。这个困扰了我好长时间，最后根据日志，和其他的手机才发现这个问题。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2019-11-08 17:41:33.311 1632-1632/? W/WindowManager: Attempted to remove non-existing token: android.os.Binder@bc43f4e</span><br><span class="line">2019-11-08 17:41:33.315 1632-2685/? W/WindowManager: Failed looking up window</span><br><span class="line">    java.lang.IllegalArgumentException: Requested window android.os.BinderProxy@22ce86f does not exist</span><br><span class="line">        at com.android.server.wm.WindowManagerService.windowForClientLocked(WindowManagerService.java:9651)</span><br><span class="line">        at com.android.server.wm.WindowManagerService.windowForClientLocked(WindowManagerService.java:9642)</span><br><span class="line">        at com.android.server.wm.WindowManagerService.removeWindow(WindowManagerService.java:2420)</span><br><span class="line">        at com.android.server.wm.Session.remove(Session.java:202)</span><br><span class="line">        at android.view.IWindowSession$Stub.onTransact(IWindowSession.java:242)</span><br><span class="line">        at com.android.server.wm.Session.onTransact(Session.java:145)</span><br><span class="line">        at android.os.Binder.execTransact(Binder.java:567)</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>整个调研过程比较长，期间主要卡在了国内手机厂商的系统修改上，今后在遇到同样问题，还是要做测试，尽量早发现问题，今早提出解决和方案。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/mzlogin/article/details/78580687" target="_blank" rel="noopener">Android 源码分析 —— 从 Toast 出发</a></p>
<p><a href="https://github.com/aosp-mirror/platform_frameworks_base/blob/master/services/core/java/com/android/server/notification/NotificationManagerService.java" target="_blank" rel="noopener">NotificationManagerService</a></p>
<p><a href="https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/view/WindowManager.java" target="_blank" rel="noopener">WindowManager</a></p>
<p><a href="https://github.com/aosp-mirror/platform_frameworks_base/blob/master/core/java/android/widget/Toast.java" target="_blank" rel="noopener">Toast</a></p>
<p><a href="https://github.com/aosp-mirror/platform_frameworks_base/blob/master/services/core/java/com/android/server/policy/PhoneWindowManager.java" target="_blank" rel="noopener">PhoneWindowManager</a></p>
<p><a href="https://blog.csdn.net/androidguy/article/details/90750688" target="_blank" rel="noopener">关于Binder中clearCallingIdentity()与restoreCallingIdentity()的作用及如何实现权限认证</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Toast </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[TextView图文混排居中、图片被截断、自动换行问题]]></title>
      <url>/2019/09/26/TextView%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E5%B1%85%E4%B8%AD%E3%80%81%E5%9B%BE%E7%89%87%E8%A2%AB%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在Android中做图文混排，一般都是选择用TextView+ImageSpan来实现，但是在ImageSpan中，对齐方式只有ImageSpan.ALIGN_BASELINE,ImageSpan.ALIGN_BOTTOM两种对齐方式，不能相对于文本居中，如果我们图片小于文字，或者大于文字，都会导致排版问题出现。</p>
<a id="more"></a>
<p><img src="http://nunu03.github.io/2019/09/26/TextView%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E5%B1%85%E4%B8%AD%E3%80%81%E5%9B%BE%E7%89%87%E8%A2%AB%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/nocenter.png" alt="nocenter"><br><img src="http://nunu03.github.io/2019/09/26/TextView%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E5%B1%85%E4%B8%AD%E3%80%81%E5%9B%BE%E7%89%87%E8%A2%AB%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/blocked.png" alt="blocked"></p>
<h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><p>下面是抄自wangkunlin同学都一个居中实现代码，封装的很好，就拿过来直接用了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">package com.wkl.imagespan;</span><br><span class="line"></span><br><span class="line">import android.graphics.Canvas;</span><br><span class="line">import android.graphics.Paint;</span><br><span class="line">import android.graphics.Rect;</span><br><span class="line">import android.graphics.drawable.Drawable;</span><br><span class="line">import android.support.annotation.IntDef;</span><br><span class="line">import android.text.style.ImageSpan;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by wangkunlin</span><br><span class="line"> * On 2017-03-15</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class AlignImageSpan extends ImageSpan &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 顶部对齐</span><br><span class="line">     */</span><br><span class="line">    public static final int ALIGN_TOP = 3;</span><br><span class="line">    /**</span><br><span class="line">     * 垂直居中</span><br><span class="line">     */</span><br><span class="line">    public static final int ALIGN_CENTER = 4;</span><br><span class="line"></span><br><span class="line">    @IntDef(&#123;ALIGN_BOTTOM, ALIGN_BASELINE, ALIGN_TOP, ALIGN_CENTER&#125;)</span><br><span class="line">    @Retention(RetentionPolicy.SOURCE)</span><br><span class="line">    public @interface Alignment &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AlignImageSpan(Drawable d) &#123;</span><br><span class="line">        this(d, ALIGN_CENTER);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public AlignImageSpan(Drawable d, @Alignment int verticalAlignment) &#123;</span><br><span class="line">        super(d, verticalAlignment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getSize(Paint paint, CharSequence text, int start, int end, Paint.FontMetricsInt fm) &#123;</span><br><span class="line">        Drawable d = getCachedDrawable();</span><br><span class="line">        Rect rect = d.getBounds();</span><br><span class="line">        if (fm != null) &#123;</span><br><span class="line">            Paint.FontMetrics fmPaint = paint.getFontMetrics();</span><br><span class="line">            // 顶部 leading</span><br><span class="line">            float topLeading = fmPaint.top - fmPaint.ascent;</span><br><span class="line">            // 底部 leading</span><br><span class="line">            float bottomLeading = fmPaint.bottom - fmPaint.descent;</span><br><span class="line">            // drawable 的高度</span><br><span class="line">            int drHeight = rect.height();</span><br><span class="line"></span><br><span class="line">            switch (mVerticalAlignment) &#123;</span><br><span class="line">                case ALIGN_CENTER: &#123; // drawable 的中间与 行中间对齐</span><br><span class="line">                    // 当前行 的高度</span><br><span class="line">                    float fontHeight = fmPaint.descent - fmPaint.ascent;</span><br><span class="line">                    // 整行的 y方向上的中间 y 坐标</span><br><span class="line">                    float center = fmPaint.descent - fontHeight / 2;</span><br><span class="line"></span><br><span class="line">                    // 算出 ascent 和 descent</span><br><span class="line">                    float ascent = center - drHeight / 2;</span><br><span class="line">                    float descent = center + drHeight / 2;</span><br><span class="line"></span><br><span class="line">                    fm.ascent = (int) ascent;</span><br><span class="line">                    fm.top = (int) (ascent + topLeading);</span><br><span class="line">                    fm.descent = (int) descent;</span><br><span class="line">                    fm.bottom = (int) (descent + bottomLeading);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                case ALIGN_BASELINE: &#123; // drawable 的底部与 baseline 对齐</span><br><span class="line">                    // 所以 ascent 的值就是 负的 drawable 的高度</span><br><span class="line">                    float ascent = -drHeight;</span><br><span class="line">                    fm.ascent = -drHeight;</span><br><span class="line">                    fm.top = (int) (ascent + topLeading);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                case ALIGN_TOP: &#123; // drawable 的顶部与 行的顶部 对齐</span><br><span class="line">                    // 算出 descent</span><br><span class="line">                    float descent = drHeight + fmPaint.ascent;</span><br><span class="line">                    fm.descent = (int) descent;</span><br><span class="line">                    fm.bottom = (int) (descent + bottomLeading);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">                case ALIGN_BOTTOM: // drawable 的底部与 行的底部 对齐</span><br><span class="line">                default: &#123;</span><br><span class="line">                    // 算出 ascent</span><br><span class="line">                    float ascent = fmPaint.descent - drHeight;</span><br><span class="line">                    fm.ascent = (int) ascent;</span><br><span class="line">                    fm.top = (int) (ascent + topLeading);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return rect.right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 这里的 x, y, top 以及 bottom 都是基于整个 TextView 的坐标系的坐标</span><br><span class="line">     *</span><br><span class="line">     * @param x      drawable 绘制的起始 x 坐标</span><br><span class="line">     * @param top    当前行最高处，在 TextView 中的 y 坐标</span><br><span class="line">     * @param y      当前行的 BaseLine 在 TextView 中的 y 坐标</span><br><span class="line">     * @param bottom 当前行最低处，在 TextView 中的 y 坐标</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void draw(Canvas canvas, CharSequence text, int start, int end, float x, int top, int y, int bottom, Paint paint) &#123;</span><br><span class="line">        Drawable drawable = getDrawable();</span><br><span class="line">        Rect rect = drawable.getBounds();</span><br><span class="line">        float transY;</span><br><span class="line">        switch (mVerticalAlignment) &#123;</span><br><span class="line">            case ALIGN_BASELINE:</span><br><span class="line">                transY = y - rect.height();</span><br><span class="line">                break;</span><br><span class="line">            case ALIGN_CENTER:</span><br><span class="line">                transY = ((bottom - top) - rect.height()) / 2 + top;</span><br><span class="line">                break;</span><br><span class="line">            case ALIGN_TOP:</span><br><span class="line">                transY = top;</span><br><span class="line">                break;</span><br><span class="line">            case ALIGN_BOTTOM:</span><br><span class="line">            default:</span><br><span class="line">                transY = bottom - rect.height();</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.save();</span><br><span class="line">        // 这里如果不移动画布，drawable 就会在 Textview 的左上角出现</span><br><span class="line">        canvas.translate(x, transY);</span><br><span class="line">        drawable.draw(canvas);</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Drawable getCachedDrawable() &#123;</span><br><span class="line">        WeakReference&lt;Drawable&gt; wr = mDrawableRef;</span><br><span class="line">        Drawable d = null;</span><br><span class="line"></span><br><span class="line">        if (wr != null)</span><br><span class="line">            d = wr.get();</span><br><span class="line"></span><br><span class="line">        if (d == null) &#123;</span><br><span class="line">            d = getDrawable();</span><br><span class="line">            mDrawableRef = new WeakReference&lt;&gt;(d);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private WeakReference&lt;Drawable&gt; mDrawableRef;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="截断处理"><a href="#截断处理" class="headerlink" title="截断处理"></a>截断处理</h2><p>图片被截断，在概述里我们说明了原因，那怎么解决呢？这里我们使用了TextUtils.ellipsize，它相当于 TextView的xml中ellipsize，是在获取TextView已setMaxLines后，显示出来的带有…结尾的内容。</p>
<p>所以我们就可以通过计算，获取到最终显示的文本，然后直接显示了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//获取图片大小</span><br><span class="line">int wh = mContext.getResources().getDimensionPixelOffset(R.dimen.28);</span><br><span class="line">textView.post(() -&gt; &#123;</span><br><span class="line">    int width = textView.getWidth(); //获取textview宽度</span><br><span class="line">    int padding = textView.getPaddingLeft()+textView.getPaddingRight();//获取textview 内边距</span><br><span class="line">    int lineWidth = width - padding-wh*2;//获取实际展示的但航内容宽度</span><br><span class="line">    //通过TextUtils.ellipsize获取截断后的实际文本</span><br><span class="line">    String ellipsizeStr = TextUtils.ellipsize(signature, textView.getPaint(), lineWidth*2, TextUtils.TruncateAt.END).toString();</span><br><span class="line">    textView.setText(getSignatureText(&quot;.  &quot;+ellipsizeStr+&quot;  .&quot;,wh));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private SpannableString getSignatureText(String selfDesc,int wh)&#123;</span><br><span class="line">        Drawable drawableLeft = mContext.getResources().getDrawable(R.drawable.mark_left);</span><br><span class="line">        drawableLeft.setBounds(0, 0, wh, wh);</span><br><span class="line">        AlignImageSpan imgSpanLeft = new AlignImageSpan(drawableLeft, AlignImageSpan.ALIGN_CENTER);</span><br><span class="line"></span><br><span class="line">        Drawable drawableRight = mContext.getResources().getDrawable(R.drawable.mark_right);</span><br><span class="line">        drawableRight.setBounds(0, 0, wh, wh);</span><br><span class="line">        AlignImageSpan imgSpanRight = new AlignImageSpan(drawableRight, AlignImageSpan.ALIGN_CENTER);</span><br><span class="line"></span><br><span class="line">        SpannableString spannableString = new SpannableString(selfDesc);</span><br><span class="line">        spannableString.setSpan(imgSpanLeft, 0, 1, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        spannableString.setSpan(imgSpanRight, selfDesc.length()-1, selfDesc.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">        return spannableString;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<p><strong>“.  “+ellipsizeStr+”  .”，我们在这里加入图片的地方加了点和空格，点是为了占位，空格是为了设置与文字之间的间距。为啥要用点占位，不加占位的话，首个文字会被开始的图片给截取点，导致少展示了一个开始的文字。（但是直接用系统ImageSpan，不用TextUtils.ellipsize的时候就不会，感兴趣的朋友可以验证下原因）。</strong></p>
<h2 id="自动换行后，结尾图片显示正常"><a href="#自动换行后，结尾图片显示正常" class="headerlink" title="自动换行后，结尾图片显示正常"></a>自动换行后，结尾图片显示正常</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">textView.post(() -&gt; &#123;</span><br><span class="line">int ellipsisCount = textView.getLayout().getEllipsisCount(textView.getLineCount() - 1);</span><br><span class="line">    if (ellipsisCount &gt; 0) &#123;</span><br><span class="line">        int endIndex = getSubLength(text,textView,ellipsisCount);</span><br><span class="line">        text = text.substring(0, endIndex) + &quot;...  img&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 计算字符截取的point length，可以处理混排换行或数字，字母结尾图片展示不全的情况</span><br><span class="line"> * @param text</span><br><span class="line"> * @param textView</span><br><span class="line"> * @param ellipsisCount</span><br><span class="line"> * @return</span><br><span class="line"> */</span><br><span class="line">private int getSubLength(String text, TextView textView, int ellipsisCount) &#123;</span><br><span class="line">    int endIndex = text.length() - ellipsisCount;</span><br><span class="line">    //默认减去一个字符代替图片位置</span><br><span class="line">    if (textView == null || textView.getPaint() == null) &#123;</span><br><span class="line">        return endIndex - 1;</span><br><span class="line">    &#125;</span><br><span class="line">    //精确计算需要展示的字符length</span><br><span class="line">    String subText = text.substring(0, endIndex);</span><br><span class="line">    char[] chars = subText.toCharArray();</span><br><span class="line">    float textWidth = 0;</span><br><span class="line">    Paint paint = textView.getPaint();</span><br><span class="line">    float point = paint.measureText(&quot;...&quot;);</span><br><span class="line">    for (int i = chars.length - 1; ; i--) &#123;</span><br><span class="line">        textWidth = textWidth + paint.measureText(String.valueOf(chars[i]));</span><br><span class="line">        endIndex = i;</span><br><span class="line">        if (textWidth &gt;= mImgSize + point) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return endIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Html-fromHtml"><a href="#Html-fromHtml" class="headerlink" title="Html.fromHtml"></a>Html.fromHtml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">String texts = &quot;&lt;img src=\&quot;startimg\&quot;/&gt;&amp;nbsp;&amp;nbsp;&quot; + text +&quot;...&amp;nbsp;&amp;nbsp;&lt;img src=\&quot;endimg\&quot;/&gt;&quot;;</span><br><span class="line">Spanned spanned =  Html.fromHtml(texts, new Html.ImageGetter() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Drawable getDrawable(String source) &#123;</span><br><span class="line">        if(&quot;startimg&quot;.equals(source))&#123;</span><br><span class="line">            //根据id从资源文件中获取图片对象</span><br><span class="line">            Drawable d = mContext.getResources().getDrawable(R.drawable.friend_list_card_selfdesc_mark_left);</span><br><span class="line">            d.setBounds(0, 0, wh,wh);</span><br><span class="line">            return d;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            Drawable d = mContext.getResources().getDrawable(R.drawable.friend_list_card_selfdesc_mark_right);</span><br><span class="line">            d.setBounds(0, 0, wh,wh);</span><br><span class="line">            return d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,null);</span><br><span class="line">textView.setText(spanned);</span><br></pre></td></tr></table></figure>

<p>html也不支持混排。</p>
<h2 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h2><p>通过计算每个字符的宽度，来自动添加\n换行,且xml中不需要设置ellipsize。暂支持只两行，其他情况原理相同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">textView.post(() -&gt; &#123;</span><br><span class="line">        String endText = getAutoSplitText(textView,signature,2);</span><br><span class="line">        textView.setText(getSignatureText(endText,wh));</span><br><span class="line">    &#125;);</span><br><span class="line">        </span><br><span class="line">private String getAutoSplitText(TextView textView, String signature, int maxLineCount) &#123;</span><br><span class="line">	int imgSize = mContext.getResources().getDimensionPixelOffset(R.dimen.px28);</span><br><span class="line">	String rawText = signature.replaceAll(&quot;\r&quot;, &quot;&quot;);</span><br><span class="line">	final Paint tvPaint = textView.getPaint();</span><br><span class="line">	float space = tvPaint.measureText(&quot;  &quot;);</span><br><span class="line">	float dot = tvPaint.measureText(&quot;...&quot;);</span><br><span class="line">	float tvWidth = textView.getWidth() - textView.getPaddingLeft() - textView.getPaddingRight(); //控件可用宽度</span><br><span class="line">	//如果整行宽度超过控件可用宽度，则按字符测量，在超过可用宽度的前一个字符处手动换行</span><br><span class="line">	StringBuilder startText = new StringBuilder();</span><br><span class="line">	float lineWidth = imgSize + space;</span><br><span class="line">	int lineCount = 0;</span><br><span class="line">	for (int count = 0; count &lt; rawText.length(); ++count) &#123;</span><br><span class="line">	    char ch = rawText.charAt(count);</span><br><span class="line">	    lineWidth += tvPaint.measureText(String.valueOf(ch));</span><br><span class="line">	    if (lineWidth &lt;= tvWidth) &#123;</span><br><span class="line">	        startText.append(ch);</span><br><span class="line">	    &#125; else &#123;</span><br><span class="line">	        startText.append(&quot;\n&quot;);</span><br><span class="line">	        lineCount++;</span><br><span class="line">	        if (lineCount == maxLineCount) &#123;</span><br><span class="line">	            break;</span><br><span class="line">	        &#125;</span><br><span class="line">	        tvWidth = tvWidth - imgSize - space - dot - tvPaint.measureText(String.valueOf(ch));</span><br><span class="line">	        lineWidth = 0;</span><br><span class="line">	        --count;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	//把结尾多余的\n去掉</span><br><span class="line">	if (startText.toString().endsWith(&quot;\n&quot;)) &#123;</span><br><span class="line">	    startText.deleteCharAt(startText.length() - 1);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	StringBuilder endText = new StringBuilder();</span><br><span class="line">	if(lineCount &lt; 2)&#123;</span><br><span class="line">	    endText.append(&quot;img  &quot;).append(startText).append(&quot;  img&quot;);</span><br><span class="line">	&#125;else&#123;</span><br><span class="line">	    endText.append(&quot;img  &quot;).append(startText).append(&quot;...  img&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	return endText.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="http://nunu03.github.io/2019/09/26/TextView%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E5%B1%85%E4%B8%AD%E3%80%81%E5%9B%BE%E7%89%87%E8%A2%AB%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/nodot.png" alt="nodot"><br><img src="http://nunu03.github.io/2019/09/26/TextView%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92%E5%B1%85%E4%B8%AD%E3%80%81%E5%9B%BE%E7%89%87%E8%A2%AB%E6%88%AA%E6%96%AD%E9%97%AE%E9%A2%98/dot.png" alt="dot"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://ddrv.cn/a/232387" target="_blank" rel="noopener">TextView 图文混排，解决图片被截断</a></p>
<p><a href="https://blog.csdn.net/jdsjlzx/article/details/90033791" target="_blank" rel="noopener">TextView图文混排图片被截断的问题以及Android省略号只有一个点的问题</a></p>
<p><a href="https://blog.csdn.net/jiangtea/article/details/54098123" target="_blank" rel="noopener">SpannableString的用法详解</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 7.0之后抓包证书无效的解决方案]]></title>
      <url>/2019/09/20/Android-7-0%E4%B9%8B%E5%90%8E%E6%8A%93%E5%8C%85%E8%AF%81%E4%B9%A6%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用抓包软件（以 Charles 为例）抓取APP的 https 请求时，Android和Charles都正确安装了证书却出现抓包失败，报错：</p>
<p>Failure    Client SSL handshake failed: An unknown issue occurred processing the certificate (certificate_unknown)</p>
<a id="more"></a>

<p><img src="http://nunu03.github.io/2019/09/20/Android-7-0%E4%B9%8B%E5%90%8E%E6%8A%93%E5%8C%85%E8%AF%81%E4%B9%A6%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/certunknow.png" alt="certunknow"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="导出-pem"><a href="#导出-pem" class="headerlink" title="导出.pem"></a>导出.pem</h3><h3 id="获取文件名"><a href="#获取文件名" class="headerlink" title="获取文件名"></a>获取文件名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -subject_hash -in  /Users/chenyulong01/Desktop/Untitled.pem </span><br><span class="line">07cc5b45</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIFbDCCBFSgAwIBAgIGAV84nCXLMA0GCSqGSIb3DQEBCwUAMIG6MUswSQYDVQQD</span><br><span class="line">DEJDaGFybGVzIFByb3h5IENBICgyMCDljYHmnIggMjAxNywgY2hlbnl1bG9uZzAx</span><br><span class="line">ZGVNYWNCb29rLVByby5sb2NhbCkxJTAjBgNVBAsMHGh0dHBzOi8vY2hhcmxlc3By</span><br><span class="line">b3h5LmNvbS9zc2wxETAPBgNVBAoMCFhLNzIgTHRkMREwDwYDVQQHDAhBdWNrbGFu</span><br><span class="line">ZDERMA8GA1UECAwIQXVja2xhbmQxCzAJBgNVBAYTAk5aMB4XDTAwMDEwMTAwMDAw</span><br><span class="line">MFoXDTQ2MTIxNzA3MDc1OFowgboxSzBJBgNVBAMMQkNoYXJsZXMgUHJveHkgQ0Eg</span><br><span class="line">KDIwIOWNgeaciCAyMDE3LCBjaGVueXVsb25nMDFkZU1hY0Jvb2stUHJvLmxvY2Fs</span><br><span class="line">KTElMCMGA1UECwwcaHR0cHM6Ly9jaGFybGVzcHJveHkuY29tL3NzbDERMA8GA1UE</span><br><span class="line">CgwIWEs3MiBMdGQxETAPBgNVBAcMCEF1Y2tsYW5kMREwDwYDVQQIDAhBdWNrbGFu</span><br><span class="line">ZDELMAkGA1UEBhMCTlowggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCU</span><br><span class="line">i7FUgkLSIxIYcQWXNf4OkncxNZl1SWXExV8whjC3W+IWA3C3gJgYVY57j4uj+B1q</span><br><span class="line">EGbqIYw4dok3ayB+Yrrcm0WVirb4IJVwUc/EfNnkqAluc/US01Mti6+PuUnya8ze</span><br><span class="line">JZN8ZzJReIgiI7LlYlrPjD0hl4cTckpsdcGLqlfkjuXyeUU3b/qNyKsquAq42o8M</span><br><span class="line">ngB7zbObsie/EpEsI3beqa7MForKeuq5Cc900IdMfTqeIATY7GTdtyXPXPzSionF</span><br><span class="line">TcYMk3QQqLZz+hqF6v8sKB4NeZNFpjSzJF2l7xjUMApMeDppaBN8kTSgf8k8OSxe</span><br><span class="line">HWk1lLhdJfh96O/nEbz9AgMBAAGjggF0MIIBcDAPBgNVHRMBAf8EBTADAQH/MIIB</span><br><span class="line">LAYJYIZIAYb4QgENBIIBHROCARlUaGlzIFJvb3QgY2VydGlmaWNhdGUgd2FzIGdl</span><br><span class="line">bmVyYXRlZCBieSBDaGFybGVzIFByb3h5IGZvciBTU0wgUHJveHlpbmcuIElmIHRo</span><br><span class="line">aXMgY2VydGlmaWNhdGUgaXMgcGFydCBvZiBhIGNlcnRpZmljYXRlIGNoYWluLCB0</span><br><span class="line">aGlzIG1lYW5zIHRoYXQgeW91J3JlIGJyb3dzaW5nIHRocm91Z2ggQ2hhcmxlcyBQ</span><br><span class="line">cm94eSB3aXRoIFNTTCBQcm94eWluZyBlbmFibGVkIGZvciB0aGlzIHdlYnNpdGUu</span><br><span class="line">IFBsZWFzZSBzZWUgaHR0cDovL2NoYXJsZXNwcm94eS5jb20vc3NsIGZvciBtb3Jl</span><br><span class="line">IGluZm9ybWF0aW9uLjAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFPDxZ1dwMgBq</span><br><span class="line">AuPwBWMv/Lcd7GOGMA0GCSqGSIb3DQEBCwUAA4IBAQA3nLkJtVRUUX94BJbryczU</span><br><span class="line">C0l5dqURDA6KKlNF3PtYvXxGGrdt7Ojkno9d2thUg1b+vKRwcY8tioJJHt01/QbH</span><br><span class="line">BK3uSIsdoxR+FY9Q7+hJc7XE8d+D3h4KlUgRY8EhCvBZMMo45O4t7wZYRbiCZh3q</span><br><span class="line">p4bayK99HZ8naYovYYK9oJiR8L41+YwuLZllkn5thJ+kvKw0NAgrP5YOsuxu+3DV</span><br><span class="line">uoDEhQPOwmPSVWq1JRAKMi8Ck9dfRYxZklLGZ+ZiT1L2ShyNuCLRKFHaP880RWJF</span><br><span class="line">uwuKep/FHqmCHWj5DumZF37jbsY56i13f723nSVZ56XJUq+yQ8KZzTqbEYBfC9Si</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure>

<p>07cc5b45,就是我们获取到的文件名。</p>
<h3 id="修改文件名"><a href="#修改文件名" class="headerlink" title="修改文件名"></a>修改文件名</h3><p>就是将我们从charles中导出的xxxxx.pem文件名改为07cc5b45.0</p>
<h3 id="push到手机中（需要root）"><a href="#push到手机中（需要root）" class="headerlink" title="push到手机中（需要root）"></a>push到手机中（需要root）</h3><p>/system/etc/security/cacerts/</p>
<p>放入的过程中，上述文件后缀名的数字是为了防止文件名冲突的，比如如果两个证书算出的Hash值是一样的话，那么一个证书的后缀名数字可以设置成0，而另一个证书的后缀名数字可以设置成1（07cc5b45.1）。</p>
<h3 id="证书安装成功"><a href="#证书安装成功" class="headerlink" title="证书安装成功"></a>证书安装成功</h3><p>此时你应该可以在 设置-&gt;安全-&gt;信任的凭据 的系统标签页看到你新加入的证书，将其启用即可顺利抓包。</p>
<p><img src="http://nunu03.github.io/2019/09/20/Android-7-0%E4%B9%8B%E5%90%8E%E6%8A%93%E5%8C%85%E8%AF%81%E4%B9%A6%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/certsuc.png" alt="certsuc"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/shadowyspirits/article/details/79756274" target="_blank" rel="noopener">Android 7.0 之后抓包 unknown 和证书无效的解决方案（无需改代码)</a></p>
]]></content>
      
        <categories>
            
            <category> Charles </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Charles </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[gitlab api 使用问题]]></title>
      <url>/2019/08/29/gitlab-api-%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>在我们使用gitlab获取数据的时候，一般返回的数据都是每页20条数据，但是如果我们想一次获取获取多于20条怎么办？其实gitlab有两个参数可以设置。page和per_page，可以分别设置页数和条数，加到请求参数里即可。<br>API如下：</p>
<a id="more"></a>
<h2 id="Pagination"><a href="#Pagination" class="headerlink" title="Pagination"></a>Pagination</h2><p>Sometimes the returned result will span across many pages. When listing<br>resources you can pass the following parameters:</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>page</td>
<td>Page number (default: 1)</td>
</tr>
<tr>
<td>per_page</td>
<td>Number of items to list per page (default: 20, max: 100)</td>
</tr>
</tbody></table>
]]></content>
      
        <categories>
            
            <category> GitLab </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GitLab </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[通过ngrok搭建github的webhook]]></title>
      <url>/2019/08/21/%E9%80%9A%E8%BF%87ngrok%E6%90%AD%E5%BB%BAgithub%E7%9A%84webhook/</url>
      <content type="html"><![CDATA[<h2 id="WebHook"><a href="#WebHook" class="headerlink" title="WebHook"></a>WebHook</h2><h3 id="webhook概述"><a href="#webhook概述" class="headerlink" title="webhook概述"></a>webhook概述</h3><p>When one of those events is triggered, we’ll send a HTTP POST payload to the webhook’s configured URL. Webhooks can be used to update an external issue tracker, trigger CI builds, update a backup mirror, or even deploy to your production server. You’re only limited by your imagination.</p>
<a id="more"></a>
<p>Webhooks can be installed on an organization, a specific repository, or a GitHub App. Once installed, the webhook will be sent each time one or more subscribed events occurs.</p>
<p>You can create up to 20 webhooks for each event on each installation target (specific organization or specific repository).<br>Learn more in our <a href="https://developer.github.com/webhooks/" target="_blank" rel="noopener">Webhooks Guide</a>.</p>
<p>当触发其中一个事件时，我们将向webhook配置的URL发送httppost负载。webhook可以用于更新外部问题跟踪程序、触发CI构建、更新备份镜像，甚至可以部署到生产服务器。webhook不能做的的，可能是受到想象力的限制。</p>
<p>webhook可以安装在组织、特定存储库或GitHub应用程序上。一旦安装，webhook将在每次发生一个或多个订阅事件时发送。</p>
<p>您可以为每个安装目标（特定组织或特定存储库）上的每个事件创建最多20个webhook。</p>
<p>所以，Webhook顾名思义，其实就是一钩子。当我们在Github上做出某些特定操作时，可以触发钩子，去进行一些我们事先设定好的脚本，以达到某些特定功能（例如–前端项目自动发布）。</p>
<h3 id="github上webhook设置"><a href="#github上webhook设置" class="headerlink" title="github上webhook设置"></a>github上webhook设置</h3><p>在配置webhook的时候，你可以选择自己想要接收的事件。你甚至可以选择参加触发所有事件。只有订阅特殊的需要的事件，可以有效限制服务器HTTP请求数。可以通过API或者UR随时订阅事件。默认情况下，webhook只订阅push事件。<br><img src="http://nunu03.github.io/2019/08/21/%E9%80%9A%E8%BF%87ngrok%E6%90%AD%E5%BB%BAgithub%E7%9A%84webhook/webhooks.png" alt="webhooks position"><br><img src="http://nunu03.github.io/2019/08/21/%E9%80%9A%E8%BF%87ngrok%E6%90%AD%E5%BB%BAgithub%E7%9A%84webhook/webhooksuc.png" alt="add webhook"><br>上图是我设置的好的webhook：可以看到我设置好了Payload URL和Content type.</p>
<p>Payload URL：就是我们要设置的钩子。</p>
<p>Content type：是在通知我们时传递的内容类型，一般情况下我们选择json数据格式。还有另外一种类型：application/x-www-form-urlencoded。</p>
<p>Which events would you like to trigger this webhook?：这个选择比较重要，直接决定了当仓库发生什么变化时才对我们进行通知。</p>
<p>到此webhook添加完成。</p>
<h3 id="负载数据属性"><a href="#负载数据属性" class="headerlink" title="负载数据属性"></a>负载数据属性</h3><p>每个webhook事件负载还包含事件特有的属性。</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody><tr>
<td>action</td>
<td>string</td>
<td>Most webhook payloads contain an action property that contains the specific activity that triggered the event.</td>
</tr>
<tr>
<td>sender</td>
<td>object</td>
<td>The user that triggered the event. This property is included in every webhook payload.</td>
</tr>
<tr>
<td>repository</td>
<td>object</td>
<td>The repository where the event occurred. Webhook payloads contain the repository property when the event occurs from activity in a repository.</td>
</tr>
<tr>
<td>organization</td>
<td>object</td>
<td>Webhook payloads contain the organization object when the webhook is configured for an organization or the event occurs from activity in a repository owned by an organization.</td>
</tr>
<tr>
<td>installation</td>
<td>object</td>
<td>The GitHub App installation. Webhook payloads contain the installation property when the event is configured for and sent to a GitHub App. For more information, see “Building GitHub App.”</td>
</tr>
</tbody></table>
<p><strong>注意：</strong></p>
<blockquote>
<p>Payloads are capped at 25 MB. If your event generates a larger payload, a<br>webhook will not be fired. This may happen, for example, on a create event if  many branches or tags are pushed at once.</p>
</blockquote>
<h3 id="报文头"><a href="#报文头" class="headerlink" title="报文头"></a>报文头</h3><p>发送到webhook配置URL的HTTP POST负载会包含几个指定的报文头。</p>
<p>X-GitHub-Event：触发分发的事件类型。<br>X-GitHub-Delivery：唯一识别分发的GUID。<br>X-Hub-Signature：HMAC十六进制的响应体。<br>X-Hub-Signature-256：<br>如果secret配置了，这个头信息将被发送。HMAC十六进制由sha1哈希算法生成，secret作为HMAC的key。</p>
<h3 id="事例"><a href="#事例" class="headerlink" title="事例"></a>事例</h3><p>通过python配置一个简单的服务器，用于接收通知信息。具体事例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@route(&apos;/payload&apos;, method=[&apos;GET&apos;,&apos;POST&apos;])</span><br><span class="line">def payload():</span><br><span class="line">    print(&apos;payload----request.json:&apos;+request.json.__str__())</span><br><span class="line">    print(&apos;payload----request.headers.X-GitHub-Event:&apos;+request.get_header(&apos;X-GitHub-Event&apos;))</span><br><span class="line">    print(&apos;payload----request.headers.X-GitHub-Delivery:&apos;+request.get_header(&apos;X-GitHub-Delivery&apos;))</span><br><span class="line">    return &quot;hello world&quot;</span><br></pre></td></tr></table></figure>

<p>这个时候我们手动push一个信息，打印信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;ref&quot;: &quot;refs/heads/master&quot;,</span><br><span class="line">	&quot;before&quot;: &quot;fc7585b3799386a625a2584b75c3e94424212889&quot;,</span><br><span class="line">	&quot;after&quot;: &quot;db7bbed15a40cec6c3cbbd778877fee8941bf86d&quot;,</span><br><span class="line">	&quot;created&quot;: false,</span><br><span class="line">	&quot;deleted&quot;: false,</span><br><span class="line">	&quot;forced&quot;: false,</span><br><span class="line">	&quot;base_ref&quot;: &quot;none&quot;,</span><br><span class="line">	&quot;compare&quot;: &quot;https://github.com/nunu03/photo/compare/fc7585b37993...db7bbed15a40&quot;,</span><br><span class="line">	&quot;commits&quot;: [&#123;</span><br><span class="line">		&quot;id&quot;: &quot;db7bbed15a40cec6c3cbbd778877fee8941bf86d&quot;,</span><br><span class="line">		&quot;tree_id&quot;: &quot;8394661d6d3855d60e431ad5a73a88b03e6944ab&quot;,</span><br><span class="line">		&quot;distinct&quot;: true,</span><br><span class="line">		&quot;message&quot;: &quot;6 update and commit&quot;,</span><br><span class="line">		&quot;timestamp&quot;: &quot;2019-08-21T18:04:00+08:00&quot;,</span><br><span class="line">		&quot;url&quot;: &quot;https://github.com/nunu03/photo/commit/db7bbed15a40cec6c3cbbd778877fee8941bf86d&quot;,</span><br><span class="line">		&quot;author&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;YlJava110&quot;,</span><br><span class="line">			&quot;email&quot;: &quot;594531261@qq.com&quot;,</span><br><span class="line">			&quot;username&quot;: &quot;nunu03&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;committer&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;YlJava110&quot;,</span><br><span class="line">			&quot;email&quot;: &quot;594531261@qq.com&quot;,</span><br><span class="line">			&quot;username&quot;: &quot;nunu03&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;added&quot;: [],</span><br><span class="line">		&quot;removed&quot;: [],</span><br><span class="line">		&quot;modified&quot;: [&quot;P2.docx&quot;]</span><br><span class="line">	&#125;],</span><br><span class="line">	&quot;head_commit&quot;: &#123;</span><br><span class="line">		&quot;id&quot;: &quot;db7bbed15a40cec6c3cbbd778877fee8941bf86d&quot;,</span><br><span class="line">		&quot;tree_id&quot;: &quot;8394661d6d3855d60e431ad5a73a88b03e6944ab&quot;,</span><br><span class="line">		&quot;distinct&quot;: true,</span><br><span class="line">		&quot;message&quot;: &quot;6 update and commit&quot;,</span><br><span class="line">		&quot;timestamp&quot;: &quot;2019-08-21T18:04:00+08:00&quot;,</span><br><span class="line">		&quot;url&quot;: &quot;https://github.com/nunu03/photo/commit/db7bbed15a40cec6c3cbbd778877fee8941bf86d&quot;,</span><br><span class="line">		&quot;author&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;YlJava110&quot;,</span><br><span class="line">			&quot;email&quot;: &quot;594531261@qq.com&quot;,</span><br><span class="line">			&quot;username&quot;: &quot;nunu03&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;committer&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;YlJava110&quot;,</span><br><span class="line">			&quot;email&quot;: &quot;594531261@qq.com&quot;,</span><br><span class="line">			&quot;username&quot;: &quot;nunu03&quot;</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;added&quot;: [],</span><br><span class="line">		&quot;removed&quot;: [],</span><br><span class="line">		&quot;modified&quot;: [&quot;P2.docx&quot;]</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;repository&quot;: &#123;</span><br><span class="line">		&quot;id&quot;: 158326464,</span><br><span class="line">		&quot;node_id&quot;: &quot;MDEwOlJlcG9zaXRvcnkxNTgzMjY0NjQ=&quot;,</span><br><span class="line">		&quot;name&quot;: &quot;photo&quot;,</span><br><span class="line">		&quot;full_name&quot;: &quot;nunu03/photo&quot;,</span><br><span class="line">		&quot;private&quot;: false,</span><br><span class="line">		&quot;owner&quot;: &#123;</span><br><span class="line">			&quot;name&quot;: &quot;nunu03&quot;,</span><br><span class="line">			&quot;email&quot;: &quot;594531261@qq.com&quot;,</span><br><span class="line">			&quot;login&quot;: &quot;nunu03&quot;,</span><br><span class="line">			&quot;id&quot;: 9353063,</span><br><span class="line">			&quot;node_id&quot;: &quot;MDQ6VXNlcjkzNTMwNjM=&quot;,</span><br><span class="line">			&quot;avatar_url&quot;: &quot;https://avatars0.githubusercontent.com/u/9353063?v=4&quot;,</span><br><span class="line">			......</span><br><span class="line">		&#125;,</span><br><span class="line">		&quot;created_at&quot;: 1542684949,</span><br><span class="line">		......</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;pusher&quot;: &#123;</span><br><span class="line">		&quot;name&quot;: &quot;nunu03&quot;,</span><br><span class="line">		&quot;email&quot;: &quot;594531261@qq.com&quot;</span><br><span class="line">	&#125;,</span><br><span class="line">	&quot;sender&quot;: &#123;</span><br><span class="line">		&quot;login&quot;: &quot;nunu03&quot;,</span><br><span class="line">		&quot;id&quot;: 9353063,</span><br><span class="line">		......</span><br><span class="line">		&quot;type&quot;: &quot;User&quot;,</span><br><span class="line">		&quot;site_admin&quot;: false</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload----request.headers.X-GitHub-Event:push</span><br><span class="line">payload----request.headers.X-GitHub-Delivery:7a8185c4-c40a-11e9-8ed7-401aabcf3ce7</span><br></pre></td></tr></table></figure>

<p>事件的驱动信息可以在webhook中查看：<br><img src="http://nunu03.github.io/2019/08/21/%E9%80%9A%E8%BF%87ngrok%E6%90%AD%E5%BB%BAgithub%E7%9A%84webhook/webhookimage.jpg" alt="webhook deliveries"></p>
<p><a href="https://igit.58corp.com/help/api/README.md" target="_blank" rel="noopener">igit api help</a></p>
<h2 id="ngrok配置"><a href="#ngrok配置" class="headerlink" title="ngrok配置"></a>ngrok配置</h2><p>你设置好了钩子，那就需要当收到通知的时候进行接收处理。这个时候要注意，我们的钩子里要求你的服务器能连接到外网上。那怎么办，我们本地做服务器，肯定就收不到通知了。这个时候推荐一个神器ngrok，它就可以让你在本地就有一个外网地址。<a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok下载地址</a>.下载之后，在ngrok目录执行cmd：./ngrok http 4567，弹出下面的界面：<br><img src="http://nunu03.github.io/2019/08/21/%E9%80%9A%E8%BF%87ngrok%E6%90%AD%E5%BB%BAgithub%E7%9A%84webhook/ngrok.png" alt="ngrok start"><br>可以看到我们本地服务器的地址被映射到了一个外网的地址。而这个<a href="http://4c8a9e3f.ngrok.io/就是上图中我们设置好的Payload" target="_blank" rel="noopener">http://4c8a9e3f.ngrok.io/就是上图中我们设置好的Payload</a> URL。</p>
<p>需要注意的是，当我们调试程序的时候，ngrok要打开，并且每次启动ngrok，外网地址都不同，每次启动有效时间为8小时。</p>
<h3 id="ngrok注册"><a href="#ngrok注册" class="headerlink" title="ngrok注册"></a>ngrok注册</h3><p><img src="http://nunu03.github.io/2019/08/21/%E9%80%9A%E8%BF%87ngrok%E6%90%AD%E5%BB%BAgithub%E7%9A%84webhook/authtoken.png" alt="ngrok register"></p>
<p>通过官网注册，拿到了authtoken，然后保存即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01deMacBook-Pro:ngrok chenyulong01$ ./ngrok authtoken 1mg5VxMW7jhF3J90SBAerxFulVJ_7YWWYmNVX4C3jYyYoz5xR</span><br><span class="line">Authtoken saved to configuration file: /Users/chenyulong01/.ngrok2/ngrok.yml</span><br><span class="line"></span><br><span class="line">chenyulong01deMacBook-Pro:ngrok chenyulong01$ ./ngrok http 4567</span><br></pre></td></tr></table></figure>

<p>使用open .ngrok2 打开ngrok.yml文件夹，ngrok.yml中存储了Authtoken，同时我们也可以修改其内容，增加root_cas: trusted，可以解决How to fix ngrok reconnecting (x509 certificate signed by unknown authority)异常问题。</p>
<h3 id="其他反代理工具"><a href="#其他反代理工具" class="headerlink" title="其他反代理工具"></a>其他反代理工具</h3><p>localtunnel，natapp，花生壳</p>
<h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><h3 id="bottle"><a href="#bottle" class="headerlink" title="bottle"></a>bottle</h3><p>Bottle是一个简单高效的遵循WSGI的微型python Web框架。bottle几乎没有任何依赖，而且只有一个文件。而相对于python默认的SimpleHTTPServer，功能更加丰富，实用更加灵活。如果只是开发一个小型的web程序，bottle已经足够了。但是这个服务器是阻塞式的，当一个用户请求的时候，其他用户的请求会被阻塞。可以很简单的使用其他的框架来配合bottle来实现无阻塞的web服务器。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@route(&apos;/&apos;)</span><br><span class="line">@route(&apos;/index.html&apos;)</span><br><span class="line">def index():</span><br><span class="line">    return &apos;&lt;a href=&quot;/hello&quot;&gt;Go to Hello World Page&lt;/a&gt;&apos;</span><br><span class="line">@route(&apos;/hello&apos;)</span><br><span class="line">def hello():</span><br><span class="line">    return &apos;Hello World&apos;</span><br><span class="line">@route(&apos;/hello/&lt;id&gt;&apos;)</span><br><span class="line">def hello(id):</span><br><span class="line">    return &apos;Hello World&apos;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">server_names = &#123;</span><br><span class="line">    &apos;cgi&apos;: CGIServer,</span><br><span class="line">    &apos;flup&apos;: FlupFCGIServer,</span><br><span class="line">    &apos;wsgiref&apos;: WSGIRefServer,</span><br><span class="line">    &apos;waitress&apos;: WaitressServer,</span><br><span class="line">    &apos;cherrypy&apos;: CherryPyServer,</span><br><span class="line">    &apos;paste&apos;: PasteServer,</span><br><span class="line">    &apos;fapws3&apos;: FapwsServer,</span><br><span class="line">    &apos;tornado&apos;: TornadoServer,</span><br><span class="line">    &apos;gae&apos;: AppEngineServer,</span><br><span class="line">    &apos;twisted&apos;: TwistedServer,</span><br><span class="line">    &apos;diesel&apos;: DieselServer,</span><br><span class="line">    &apos;meinheld&apos;: MeinheldServer,</span><br><span class="line">    &apos;gunicorn&apos;: GunicornServer,</span><br><span class="line">    &apos;eventlet&apos;: EventletServer,</span><br><span class="line">    &apos;gevent&apos;: GeventServer,</span><br><span class="line">    &apos;geventSocketIO&apos;:GeventSocketIOServer,</span><br><span class="line">    &apos;rocket&apos;: RocketServer,</span><br><span class="line">    &apos;bjoern&apos; : BjoernServer,</span><br><span class="line">    &apos;auto&apos;: AutoServer,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="paste"><a href="#paste" class="headerlink" title="paste"></a>paste</h3><table>
<tbody>
<tr><th style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);font-size:1.2em;">
名称</th>
<th style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);font-size:1.2em;">
主页</th>
<th style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);font-size:1.2em;">
介绍</th>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
cgi</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
 </td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
以CGI脚本运行</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
flup</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://trac.saddi.com/flup" rel="noopener" title="FLUP" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="c7b4b5077834a0ed1f5c0a4bca14f4cf" target="_blank">http://trac.saddi.com/flup</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
以FastCGI进程运行</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
gae</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://code.google.com/appengine/docs/python/overview.html" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="288e3bc1b26e0f48f7cbdecc50951f37" target="_blank">http://code.google.com/appengine/docs/python/overview.html</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
Google App Engine部属</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
wsgiref</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://docs.python.org/library/wsgiref.html" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="237e23e44a4365b59fcc33b28a891844" target="_blank">http://docs.python.org/library/wsgiref.html</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
默认为单线程的服务器</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
cherrypy</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://www.cherrypy.org/" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="72c50cd82c583c625d441d5022206177" target="_blank">http://www.cherrypy.org/</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
多线程服务器</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
paste</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://pythonpaste.org/" rel="noopener" title="http://pythonpaste.org/" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="71228709dedcb943fefeb0aec3bbd640" target="_blank">http://pythonpaste.org/</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
多线程服务器</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
rocket</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://pypi.python.org/pypi/rocket" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="cefb0f508a65db9aca1af3f78aa8df61" target="_blank">http://pypi.python.org/pypi/rocket</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
多线程服务器</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
gunicorn</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://pypi.python.org/pypi/gunicorn" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="9a58bd759fbfdbd2c6bb60b30eb894f3" target="_blank">http://pypi.python.org/pypi/gunicorn</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
部分用C编写</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
fapws3</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://www.fapws.org/" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="7380c8ebddf823041cb3785a15444f1e" target="_blank">http://www.fapws.org/</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
Asynchronous，基于C开发</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
tornado</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://www.tornadoweb.org/" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="28816a7f106f3be4d11b72a58302eabb" target="_blank">http://www.tornadoweb.org/</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
Asynchronous，服务了部分 FaceBook 的服务</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
twisted</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://twistedmatrix.com/" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="c11813c5b43ff62fd484194d38ea9b09" target="_blank">http://twistedmatrix.com/</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
Asynchronous</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
gevent</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://www.gevent.org/" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="8739ffd1da6ba93b622d20965903c018" target="_blank">http://dieselweb.org/</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
Asynchronous，基于Greenlet</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
diesel</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://dieselweb.org/" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="8739ffd1da6ba93b622d20965903c018" target="_blank">http://dieselweb.org/</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
Asynchronous，基于Greenlet</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
meinheld</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://pypi.python.org/pypi/meinheld" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="e8fc885d48908fbe74c4848d401bb8f0" target="_blank">http://pypi.python.org/pypi/meinheld</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
Asynchronous，部分基于C开发</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
bjoern</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
<a href="http://pypi.python.org/pypi/bjoern" rel="noopener" style="text-decoration:none;color:rgb(38,94,21);border-bottom-color:rgb(153,102,51);border-bottom-width:1px;border-bottom-style:dashed;" data-token="f9fa6703b208a2b47317f58614c91139" target="_blank">http://pypi.python.org/pypi/bjoern</a></td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
Asynchronous，非常快，基于C开发</td>
</tr>

<tr><td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
auto</td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
 </td>
<td style="border-bottom-width:1px;border-bottom-style:solid;border-bottom-color:rgb(221,221,221);">
自动选择一个可用的服务器</td>
</tr>
</tbody>
</table>
可以看到，bottle适配的web服务器很丰富。工作模式也很全面，有多线程的（如paste）、有多进程模式的（如gunicorn）、也有基于协程的（如gevent）。

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>nohup python3 -u githook.py &gt; nohup.log 2&gt;&amp;1 &amp;</p>
<p>nohup：放在命令的开头，表示不挂起（no hang up），也即，关闭终端或者退出某个账号，进程也继续保持运行状态。</p>
<p>-u ：不启用缓冲。</p>
<p>nohup.log：日志文件</p>
<p>2&gt;&amp;1：也就表示将错误重定向到标准输出上</p>
<p>&amp; ：放在命令到结尾，表示后台运行，防止终端一直被某个进程占用，这样终端可以执行别到任务。</p>
<p><strong>注意使用nohup命令后台运行命令之后，需要使用exit正常退出当前账户，这样才能保证命令一直在后台运行。否则当前账户非正常退出或者结束的时候，命令还是会结束。</strong></p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>1.我们的路由@route(‘/payload’, method=[‘GET’,’POST’])是必填的，如果丢失method,我们将不能受到请求。同时payload，要与Payload URL中设置的名一样。</p>
<p>2.requests</p>
<p>print(r):&lt;Response [200]&gt;<br>print(r.json):{‘id’: 132968, ‘iid’: 2182437, ‘project_id’: 15509,<br>print(r.text):{“id”:132968,”iid”:2182437,”project_id”:15509,<br>json.dumps(r.json())</p>
<p>3.can only concatenate str (not “int”) to str</p>
<p>print(‘payload—-projectid:%d’ % projectid)</p>
<h2 id="MR方案"><a href="#MR方案" class="headerlink" title="MR方案"></a>MR方案</h2><p><img src="http://nunu03.github.io/2019/08/21/%E9%80%9A%E8%BF%87ngrok%E6%90%AD%E5%BB%BAgithub%E7%9A%84webhook/automr.png" alt="MR流程图"></p>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>1.Could not fetch URL <a href="https://pypi.python.org/simple/requests/" target="_blank" rel="noopener">https://pypi.python.org/simple/requests/</a>: There was a problem confirming the ssl certificate: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:777) - skipping<br>  Could not find a version that satisfies the requirement requests (from versions: )<br>No matching distribution found for requests</p>
<p>解决方法：pip3 install requests  -i  <a href="http://pypi.douban.com/simple" target="_blank" rel="noopener">http://pypi.douban.com/simple</a> –trusted-host=pypi.douban.com</p>
<p>2.升级pip</p>
<p>解决方法：尝试使用如下指令</p>
<p>pip install -U pip</p>
<p>sudo easy_install –upgrade pip</p>
<p>3.405 Method Not Allowed</p>
<p>路由名不对与Payload URL中设置的名不一样，或者method丢失。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.jianshu.com/p/55209f1031e8" target="_blank" rel="noopener">webhook小试水(无需外网服务器)</a></p>
<p><a href="https://forge.autodesk.com/blog/how-fix-ngrok-reconnecting-x509-certificate-signed-unknown-authority" target="_blank" rel="noopener">x509 certificate signed by unknown authority</a></p>
<p><a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="noopener">ngrok git</a></p>
<p><a href="https://ngrok.com/download" target="_blank" rel="noopener">ngrok官网</a></p>
<p><a href="https://docs.github.com/en/free-pro-team@latest/developers" target="_blank" rel="noopener">webhooks developers</a></p>
<p><a href="https://www.cnblogs.com/handsome1013/p/7390849.html" target="_blank" rel="noopener">反向代理</a></p>
<p><a href="https://www.jianshu.com/p/b11d70d9dd52" target="_blank" rel="noopener">映射公网花生壳、PubYun、NoIP、DynDNS、Ngrok、Tunnel、localtunnel、pagekite</a></p>
]]></content>
      
        <categories>
            
            <category> WebHook </category>
            
            <category> ngrok </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ngrok </tag>
            
            <tag> WebHook </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Charles设置]]></title>
      <url>/2019/08/16/charles%E4%BF%AE%E6%94%B9%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="修改请求参数"><a href="#修改请求参数" class="headerlink" title="修改请求参数"></a>修改请求参数</h2><p>先点击选定自己想要修改的该条请求，然后右击该条请求选择Compose，则会出现以下界面，便可以开始修改该请求了.</p>
<a id="more"></a>
<p><img src="http://nunu03.github.io/2019/08/16/charles%E4%BF%AE%E6%94%B9%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/charles.png" alt="charles"></p>
<h2 id="弱网设置"><a href="#弱网设置" class="headerlink" title="弱网设置"></a>弱网设置</h2><p>我们在测试过程中，需要测试一些网络不好时候的异常场景，我们就可以通过设置Charles，模拟2G、3G的网络情况，设置一些上下行速率，设置一些丢包率。这些设置有行业标准，可以参考行业标准。<br><img src="http://nunu03.github.io/2019/08/16/charles%E4%BF%AE%E6%94%B9%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/throttle_set.png" alt="throttle_set"><br><img src="http://nunu03.github.io/2019/08/16/charles%E4%BF%AE%E6%94%B9%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0/throttle_input.png" alt="throttle_input"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/weixin_40669017/article/details/81975000" target="_blank" rel="noopener">Charles抓包、修改请求、修改返回、弱网设置</a></p>
]]></content>
      
        <categories>
            
            <category> Charles </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Charles </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Fragment和Activity生命周期]]></title>
      <url>/2019/08/08/Fragment%E5%92%8CActivity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      <content type="html"><![CDATA[<h2 id="Fragment生命周期"><a href="#Fragment生命周期" class="headerlink" title="Fragment生命周期"></a>Fragment生命周期</h2><a id="more"></a>
<p><img src="http://nunu03.github.io/2019/08/08/Fragment%E5%92%8CActivity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/fragment.png" alt="fragment"></p>
<h2 id="Fragment与Activity生命周期比较"><a href="#Fragment与Activity生命周期比较" class="headerlink" title="Fragment与Activity生命周期比较"></a>Fragment与Activity生命周期比较</h2><p><img src="http://nunu03.github.io/2019/08/08/Fragment%E5%92%8CActivity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/activity.png" alt="activity"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.csdn.net/asdf717/article/details/51383750" target="_blank" rel="noopener">Android Fragment 生命周期onCreatView、onViewCreated</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[aar依赖引用关系]]></title>
      <url>/2019/07/23/aar%E4%BE%9D%E8%B5%96%E5%BC%95%E7%94%A8%E5%85%B3%E7%B3%BB/</url>
      <content type="html"><![CDATA[<h2 id="依赖关系查看"><a href="#依赖关系查看" class="headerlink" title="依赖关系查看"></a>依赖关系查看</h2><h3 id="Gradle-View"><a href="#Gradle-View" class="headerlink" title="Gradle View"></a>Gradle View</h3><p>在AS中安装Gradle View插件，安装完重启。</p>
<p>在AS面板中-&gt;View-&gt;Tool Windows-&gt;Gradle View查看。</p>
<a id="more"></a>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="查看app模块所有依赖，包含依赖的依赖"><a href="#查看app模块所有依赖，包含依赖的依赖" class="headerlink" title="查看app模块所有依赖，包含依赖的依赖"></a>查看app模块所有依赖，包含依赖的依赖</h4><p>./gradlew -q :app:dependencies</p>
<h4 id="查看app模块所有依赖，包含依赖的依赖-1"><a href="#查看app模块所有依赖，包含依赖的依赖-1" class="headerlink" title="查看app模块所有依赖，包含依赖的依赖"></a>查看app模块所有依赖，包含依赖的依赖</h4><p> ./gradlew : app:dependencies –configuration implementation</p>
<h4 id="查看指定项目app模块的依赖，并输出到文件"><a href="#查看指定项目app模块的依赖，并输出到文件" class="headerlink" title="查看指定项目app模块的依赖，并输出到文件"></a>查看指定项目app模块的依赖，并输出到文件</h4><p> ./gradlew -q :app:dependencies &gt; tree.txt</p>
<h2 id="多版本依赖"><a href="#多版本依赖" class="headerlink" title="多版本依赖"></a>多版本依赖</h2><blockquote>
<p>依赖库有版本冲突时，默认使用高版本中的依赖（注意：是引用库的高版本中的依赖），如果项目中指定版本高于依赖中，优先用项目中指定的版本<br>如果想指定使用引入库中版本，使用force参数</p>
<blockquote>
<p>总结：</p>
<p>1.a = 引用库依赖（高）&gt;引用库依赖（低）;</p>
<p>2.force = true 使用指定;</p>
<p>3.引用&gt; a 使用引用，否则使用a</p>
</blockquote>
</blockquote>
<p><img src="http://nunu03.github.io/2019/07/23/aar%E4%BE%9D%E8%B5%96%E5%BC%95%E7%94%A8%E5%85%B3%E7%B3%BB/aar.jpg" alt="aar"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_33714884/article/details/90770965" target="_blank" rel="noopener">aar依赖关系解析</a></p>
<p><a href="https://www.jianshu.com/p/3b29f6890eac" target="_blank" rel="noopener">Android Studio查看第三方库依赖树</a></p>
<p><a href="https://blog.csdn.net/jifenglie/article/details/81390517" target="_blank" rel="noopener">Gradle查看第三方依赖关系图</a></p>
]]></content>
      
        <categories>
            
            <category> Gradle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> aar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flutter 配置]]></title>
      <url>/2019/07/12/Flutter-%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h2 id="下载SDK"><a href="#下载SDK" class="headerlink" title="下载SDK"></a>下载SDK</h2><p><a href="https://flutter.dev/docs/development/tools/sdk/releases?tab=macos#macos" target="_blank" rel="noopener">SDK下载地址</a><br>对应下载合适的平台即可，可能由于网速等原因，下载详细未显示，所以我用的是直接git clone。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/flutter/flutter.git</span><br></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ open .bash_profile</span><br></pre></td></tr></table></figure>

<p>在.bash_profile中添加flutter的path</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#flutter</span><br><span class="line">export PATH=/Users/xxxxxxx/flutter/bin:$PATH</span><br></pre></td></tr></table></figure>

<p>更新环境配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ source .bash_profile</span><br><span class="line">$ echo $PATH</span><br></pre></td></tr></table></figure>

<p>执行flutter doctor或flutter –version命令来查看是否还需要安装其它依赖。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Downloading Dart SDK from Flutter engine d1dcd1848633c5764e23313823445cbcba451a59...</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  0     0    0     0    0     0      0      0 --:--:--  0:00:39 --:--:--     0</span><br><span class="line">curl: (56) SSLRead() return error -9806</span><br><span class="line"></span><br><span class="line">Failed to retrieve the Dart SDK from: https://storage.googleapis.com/flutter_infra/flutter/d1dcd1848633c5764e23313823445cbcba451a59/dart-sdk-darwin-x64.zip</span><br><span class="line">If you&apos;re located in China, please see this page:</span><br><span class="line">  https://flutter.dev/community/china</span><br></pre></td></tr></table></figure>

<p><strong>解决方式</strong>:由于在国内访问Flutter有时可能会受到限制，Flutter官方为中国开发者搭建了临时镜像，大家可以将如下环境变量加入到用户环境变量中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</span><br><span class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure>

<p>正常下载如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">chenyulong01deMacBook-Pro:flutter chenyulong01$ flutter doctor</span><br><span class="line">Downloading Dart SDK from Flutter engine d1dcd1848633c5764e23313823445cbcba451a59...</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100  120M  100  120M    0     0   655k      0  0:03:07  0:03:07 --:--:--  656k</span><br><span class="line">Building flutter tool...</span><br><span class="line"></span><br><span class="line">  ╔════════════════════════════════════════════════════════════════════════════╗</span><br><span class="line">  ║                 Welcome to Flutter! - https://flutter.dev                  ║</span><br><span class="line">  ║                                                                            ║</span><br><span class="line">  ║ The Flutter tool anonymously reports feature usage statistics and crash    ║</span><br><span class="line">  ║ reports to Google in order to help Google contribute improvements to       ║</span><br><span class="line">  ║ Flutter over time.                                                         ║</span><br><span class="line">  ║                                                                            ║</span><br><span class="line">  ║ Read about data we send with crash reports:                                ║</span><br><span class="line">  ║ https://github.com/flutter/flutter/wiki/Flutter-CLI-crash-reporting        ║</span><br><span class="line">  ║                                                                            ║</span><br><span class="line">  ║ See Google&apos;s privacy policy:                                               ║</span><br><span class="line">  ║ https://www.google.com/intl/en/policies/privacy/                           ║</span><br><span class="line">  ║                                                                            ║</span><br><span class="line">  ║ Use &quot;flutter config --no-analytics&quot; to disable analytics and crash         ║</span><br><span class="line">  ║ reporting.                                                                 ║</span><br><span class="line">  ╚════════════════════════════════════════════════════════════════════════════╝</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Flutter assets will be downloaded from https://storage.flutter-io.cn. Make sure</span><br><span class="line">you trust this source!</span><br><span class="line">Downloading Material fonts...                                       2.8s</span><br><span class="line">Downloading android-arm-profile/darwin-x64 tools...                 4.5s</span><br><span class="line">Downloading android-arm-release/darwin-x64 tools...                 3.6s</span><br><span class="line">Downloading android-arm64-profile/darwin-x64 tools...               4.6s</span><br><span class="line">Downloading android-arm64-release/darwin-x64 tools...               3.8s</span><br><span class="line">Downloading android-x86 tools...                                   24.8s</span><br><span class="line">Downloading android-x64 tools...                                   25.9s</span><br><span class="line">Downloading android-arm tools...                                   11.6s</span><br><span class="line">Download failed -- attempting retry 1 in 1 second...                    </span><br><span class="line">Downloading android-arm-profile tools...                            9.1s</span><br><span class="line">Downloading android-arm-release tools...                            6.0s</span><br><span class="line">Downloading android-arm64 tools...                                 12.3s</span><br><span class="line">Downloading android-arm64-profile tools...                          7.8s</span><br><span class="line">Downloading android-arm64-release tools...                          6.1s</span><br><span class="line">Downloading Gradle Wrapper...                                       0.2s</span><br><span class="line">Downloading package sky_engine...                                   1.4s</span><br><span class="line">Downloading common tools...                                        15.0s</span><br><span class="line">Downloading common tools...                                        15.1s</span><br><span class="line">Downloading darwin-x64 tools...                                    49.2s</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel master, v1.8.2-pre.56, on Mac OS X 10.12.6 16G29, locale</span><br><span class="line">    zh-Hans-CN)</span><br><span class="line"> </span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK version 28.0.3)</span><br><span class="line">[✗] Xcode - develop for iOS and macOS</span><br><span class="line">    ✗ Xcode installation is incomplete; a full installation is necessary for iOS</span><br><span class="line">      development.</span><br><span class="line">      Download at: https://developer.apple.com/xcode/download/</span><br><span class="line">      Or install Xcode via the App Store.</span><br><span class="line">      Once installed, run:</span><br><span class="line">        sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer</span><br><span class="line">    ✗ CocoaPods not installed.</span><br><span class="line">        CocoaPods is used to retrieve the iOS and macOS platform side&apos;s plugin</span><br><span class="line">        code that responds to your plugin usage on the Dart side.</span><br><span class="line">        Without CocoaPods, plugins will not work on iOS or macOS.</span><br><span class="line">        For more info, see https://flutter.dev/platform-plugins</span><br><span class="line">      To install:</span><br><span class="line">        brew install cocoapods</span><br><span class="line">        pod setup</span><br><span class="line">[✗] iOS tools - develop for iOS devices</span><br><span class="line">    ✗ libimobiledevice and ideviceinstaller are not installed. To install with</span><br><span class="line">      Brew, run:</span><br><span class="line">        brew update</span><br><span class="line">        brew install --HEAD usbmuxd</span><br><span class="line">        brew link usbmuxd</span><br><span class="line">        brew install --HEAD libimobiledevice</span><br><span class="line">        brew install ideviceinstaller</span><br><span class="line">    ✗ ios-deploy not installed. To install:</span><br><span class="line">        brew install ios-deploy</span><br><span class="line">[✓] Chrome - develop for the web</span><br><span class="line">[!] Android Studio (version 3.3)</span><br><span class="line">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</span><br><span class="line">    ✗ Dart plugin not installed; this adds Dart specific functionality.</span><br><span class="line">[✓] Connected device (3 available)</span><br><span class="line"></span><br><span class="line">! Doctor found issues in 3 categories.</span><br><span class="line">chenyulong01deMacBook-Pro:flutter chenyulong01$</span><br></pre></td></tr></table></figure>

<h2 id="更新flutter及其依赖"><a href="#更新flutter及其依赖" class="headerlink" title="更新flutter及其依赖"></a>更新flutter及其依赖</h2><h3 id="更新Flutter"><a href="#更新Flutter" class="headerlink" title="更新Flutter"></a>更新Flutter</h3><p><img src="http://nunu03.github.io/2019/07/12/Flutter-%E9%85%8D%E7%BD%AE/fu.jpg" alt></p>
<h3 id="更新Dart及其他依赖"><a href="#更新Dart及其他依赖" class="headerlink" title="更新Dart及其他依赖"></a>更新Dart及其他依赖</h3><p><img src="http://nunu03.github.io/2019/07/12/Flutter-%E9%85%8D%E7%BD%AE/fdu.jpg" alt></p>
<h2 id="AS-Flutter插件安装配置"><a href="#AS-Flutter插件安装配置" class="headerlink" title="AS Flutter插件安装配置"></a>AS Flutter插件安装配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><img src="http://nunu03.github.io/2019/07/12/Flutter-%E9%85%8D%E7%BD%AE/af.jpg" alt></p>
<h3 id="配置SDK"><a href="#配置SDK" class="headerlink" title="配置SDK"></a>配置SDK</h3><p><img src="http://nunu03.github.io/2019/07/12/Flutter-%E9%85%8D%E7%BD%AE/afd.jpg" alt></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://book.flutterchina.club/" target="_blank" rel="noopener">Flutter中文网</a><br><a href="https://flutter.dev/docs/get-started/codelab" target="_blank" rel="noopener">Flutter官方事例</a></p>
]]></content>
      
        <categories>
            
            <category> Flutter </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android API Level对应Android版本一览表]]></title>
      <url>/2019/07/05/Android-API-Level%E5%AF%B9%E5%BA%94Android%E7%89%88%E6%9C%AC%E4%B8%80%E8%A7%88%E8%A1%A8/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><img src="http://nunu03.github.io/2019/07/05/Android-API-Level%E5%AF%B9%E5%BA%94Android%E7%89%88%E6%9C%AC%E4%B8%80%E8%A7%88%E8%A1%A8/api1.jpg" alt="api-1"></p>
<!--more-->
<p><img src="http://nunu03.github.io/2019/07/05/Android-API-Level%E5%AF%B9%E5%BA%94Android%E7%89%88%E6%9C%AC%E4%B8%80%E8%A7%88%E8%A1%A8/api2.jpg" alt="api-2"></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[腾讯加固脱壳使用事例]]></title>
      <url>/2019/07/03/tencentfdex/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文只介绍具体的原理和实现，不涉及Xposed相关技术点。想要了解Xposed具体配置和实现的请参考<a href="http://nunu03.github.io/2019/07/02/xposed/">Xposed的配置与简单使用</a></p>
<a id="more"></a>

<h3 id="直接反编译apk"><a href="#直接反编译apk" class="headerlink" title="直接反编译apk"></a>直接反编译apk</h3><p><img src="http://nunu03.github.io/2019/07/03/tencentfdex/apkjadx.jpg" alt="apk-jadx"></p>
<h2 id="脱壳工具FDex2"><a href="#脱壳工具FDex2" class="headerlink" title="脱壳工具FDex2"></a>脱壳工具FDex2</h2><p><img src="http://nunu03.github.io/2019/07/03/tencentfdex/fdex2.jpeg" alt="fdex2"><br><img src="http://nunu03.github.io/2019/07/03/tencentfdex/dexpath.jpeg" alt="dexpath"></p>
<h3 id="脱壳流程"><a href="#脱壳流程" class="headerlink" title="脱壳流程"></a>脱壳流程</h3><h4 id="第一步、激活"><a href="#第一步、激活" class="headerlink" title="第一步、激活"></a>第一步、激活</h4><p>FDex2和需要脱壳的应用都安装到手机上。在Xposed install模块中勾选FDex2，重启手机。</p>
<h4 id="第二步、选择软件"><a href="#第二步、选择软件" class="headerlink" title="第二步、选择软件"></a>第二步、选择软件</h4><p>然后打开FDex2应用，在应用列表中选择需要脱壳的应用，保存dex即可。</p>
<h4 id="第三步、运行软件"><a href="#第三步、运行软件" class="headerlink" title="第三步、运行软件"></a>第三步、运行软件</h4><p>运行要脱壳的软件，不打开运行软件是无法脱出壳的</p>
<h4 id="第四步、dex目录"><a href="#第四步、dex目录" class="headerlink" title="第四步、dex目录"></a>第四步、dex目录</h4><p>找到dex目录，这里的dex就是脱壳后的dex文件，也就是我即将hook的dex文件。目录一般是/data/user/0/com.luhu.package.xxx。</p>
<h2 id="hook过程"><a href="#hook过程" class="headerlink" title="hook过程"></a>hook过程</h2><p>由于被腾讯加固，所以第一步是需要获取对应ClassLoader；在之后的逆向过程中使用的ClassLoader都是这个ClassLoader。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if(lpparam.packageName.startsWith(&quot;com.luhu.livexiuwu&quot;))&#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        //腾讯加固，需要获取对应classloader</span><br><span class="line">                        XposedHelpers.findAndHookMethod(&quot;com.tencent.StubShell.TxAppEntry&quot;, lpparam.classLoader,</span><br><span class="line">                                &quot;attachBaseContext&quot;, Context.class, new XC_MethodHook() &#123;</span><br><span class="line">                                    @Override</span><br><span class="line">                                    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                                        super.afterHookedMethod(param);</span><br><span class="line">                                        //获取到Context对象，通过这个对象来获取classloader</span><br><span class="line">                                        Context context = (Context) param.args[0];</span><br><span class="line">                                        //获取classloader，之后hook加固后的就使用这个classloader</span><br><span class="line">                                        SecApp.hookLuhu(lpparam,context.getClassLoader());                                </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                                    &#125;</span><br><span class="line"></span><br><span class="line">                                &#125;);</span><br><span class="line">                    &#125;catch (Exception e)&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<h2 id="脱壳原理"><a href="#脱壳原理" class="headerlink" title="脱壳原理"></a>脱壳原理</h2><p>通过Hook ClassLoader的loadClass方法，反射调用getDex方法取得Dex(com.android.dex.Dex类对象)，在将里面的dex写出。<br>脱壳获取dex的关键代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">private static  void fDex(XC_LoadPackage.LoadPackageParam loadPackageParam2)&#123;</span><br><span class="line"></span><br><span class="line">        if(loadPackageParam2.packageName.equals(&quot;com.luhu.livexiuwu&quot;))&#123;</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                Class Dex=Class.forName(&quot;com.android.dex.Dex&quot;);</span><br><span class="line">                Method Dex_getBytes=Dex.getDeclaredMethod(&quot;getBytes&quot;, new Class[0]);</span><br><span class="line">                Method getDex = Class.forName(&quot;java.lang.Class&quot;).getDeclaredMethod(&quot;getDex&quot;, new Class[0]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                XposedHelpers.findAndHookMethod(&quot;java.lang.ClassLoader&quot;, loadPackageParam2.classLoader, &quot;loadClass&quot;, String.class,boolean.class,new XC_MethodHook()&#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        Class cls = (Class) param.getResult();</span><br><span class="line">                     </span><br><span class="line"></span><br><span class="line">                        if (cls != null) &#123;</span><br><span class="line"></span><br><span class="line">                                try &#123;</span><br><span class="line">                                    byte[] bArr = (byte[]) Dex_getBytes.invoke(getDex.invoke(cls, new Object[0]), new Object[0]);</span><br><span class="line">                                   </span><br><span class="line"></span><br><span class="line">                                    if (bArr != null) &#123;</span><br><span class="line"></span><br><span class="line">                                        File apkFileDir = new File(CompatUtil.getSdcardSharedDir(), &quot;lulu&quot;);</span><br><span class="line"></span><br><span class="line">                                        if (!apkFileDir.exists()) &#123;</span><br><span class="line">                                            apkFileDir.mkdirs();</span><br><span class="line">                                        &#125;</span><br><span class="line"></span><br><span class="line">                                        String name = &quot;com.luhu.livexiuwu&quot;+bArr.length+&quot;.dex&quot;;</span><br><span class="line">                                        File file2 = new File(apkFileDir, name);</span><br><span class="line">                                       </span><br><span class="line">                                        if (!file2.exists()) &#123;</span><br><span class="line">                                            FileUtil.writeToFileBy(bArr, file2);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; catch (Exception e3) &#123;</span><br><span class="line">                                    </span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; catch (Throwable e) &#123;</span><br><span class="line">                XposedBridge.log(e);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://mp.weixin.qq.com/s/C44M4XNIlZ43iwI7dl95jw" target="_blank" rel="noopener">java and android 架构</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Xposed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Xposed的配置与简单使用]]></title>
      <url>/2019/07/02/xposed/</url>
      <content type="html"><![CDATA[<h2 id="Xposed是什么"><a href="#Xposed是什么" class="headerlink" title="Xposed是什么"></a>Xposed是什么</h2><p>官方对此的解释是这样的：<br>“Xposed是一个适用于Android的框架。基于这个框架开发的模块可以改变系统和app应用的行为，而不需要修改APK。这是一个很棒的特性，意味着Xposed模块可以不经过任何修改，安装在各种不同的ROM上。Xposed模块可以很容易的开启和关闭。你只需要激活或者禁用Xposed模块，然后重启手机即可。”</p>
<a id="more"></a>
<h2 id="Hook是什么"><a href="#Hook是什么" class="headerlink" title="Hook是什么"></a>Hook是什么</h2><p>Hook 英文就是「挂钩」的意思.那我们如何使用这个「挂钩」呢？在我们的应用程序种，包括应用触发事件和后台逻辑处理，都是是根据事件流程一步步地向下执行。而「挂钩」的意思，就是在事件传送到终点前截获并监控事件的传输，像个钩子钩上事件一样，并且能够在钩上事件时，处理一些自己特定的事件。<br><img src="http://nunu03.github.io/2019/07/02/xposed/hook.png" alt="hook"><br>如何理解，例如我们有一个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private int getResult(int i, int i2) &#123;</span><br><span class="line">    return i+i2; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正常情况下，i=1，i2=1，我们能得到2，但是根据上图，现在我们知道利用Hook现在能做些什么了，通过Hook我们可以对参数i，i2进行修改，i=1，i2=2，最终我们得到的结果是3.这就是挂钩的作用。</p>
<p>关于Android中的Hook机制，大致有两个方式：</p>
<p>要 root 权限，直接Hook系统，可以干掉所有的App。</p>
<p>免root权限，但是只能 Hook 自身，对系统其它 App 无能为力。</p>
<h2 id="Xposed接入"><a href="#Xposed接入" class="headerlink" title="Xposed接入"></a>Xposed接入</h2><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>这个工程就是我们的插件工程，也是我们需要激活的Xposed模块工程。在我们的群控项目中，我们的hotB就是我们的模块工程。什么是模块工程，可以理解我们使用Hook挂钩自定义消息体的工程。这个app安装后可以在Xposed app的模块中找到。<br><img src="http://nunu03.github.io/2019/07/02/xposed/mokuai.png" alt="set"></p>
<h3 id="导入api"><a href="#导入api" class="headerlink" title="导入api"></a>导入api</h3><p>倒入api比较简单：直接在build.gradle中添加依赖即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* Xposed */</span><br><span class="line">    provided &apos;de.robv.android.xposed:api:82&apos;</span><br><span class="line">    provided &apos;de.robv.android.xposed:api:82:sources&apos;</span><br></pre></td></tr></table></figure>

<p><strong>注意：这里是provided，因为Xposed里已有该jar包内容，再次打包进去会冲突，并导致handleLoadPackage没有回调</strong></p>
<h3 id="修改AndroidManifest-xml文件"><a href="#修改AndroidManifest-xml文件" class="headerlink" title="修改AndroidManifest.xml文件"></a>修改AndroidManifest.xml文件</h3><p>在标签里面加三个meta-data</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 作为xposed模块 --&gt;</span><br><span class="line">&lt;meta-data android:name=&quot;xposedmodule&quot; android:value=&quot;true&quot; /&gt;</span><br><span class="line">&lt;!-- Xposed的模块描述 显示在xposed模块列表那里第二行--&gt;</span><br><span class="line">&lt;meta-data android:name=&quot;xposeddescription&quot; android:value=&quot;HotAX&quot; /&gt;</span><br><span class="line">&lt;!-- XposedBridgeApi的最低版本号 --&gt;</span><br><span class="line">&lt;meta-data android:name=&quot;xposedminversion&quot; android:value=&quot;53&quot; /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="编写hook类"><a href="#编写hook类" class="headerlink" title="编写hook类"></a>编写hook类</h3><p>创建一个类，实现IXposedHookLoadPackage接口，重写handleLoadPackage方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class XposedModule implements IXposedHookLoadPackage &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam loadPackageParam) throws Throwable &#123;</span><br><span class="line">        if (!loadPackageParam.packageName.startsWith(&quot;com.hotax.autowechat&quot;)) &#123;</span><br><span class="line">            if (loadPackageParam.packageName.startsWith(&quot;com.tencent.mm&quot;)) &#123;</span><br><span class="line">                XposedHelpers.findAndHookMethod(Application.class, &quot;attach&quot;, Context.class, new XC_MethodHook() &#123;</span><br><span class="line">                    @Override</span><br><span class="line">                    protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    @Override</span><br><span class="line">                    protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建xposed-init文件"><a href="#创建xposed-init文件" class="headerlink" title="创建xposed_init文件"></a>创建xposed_init文件</h3><p>在main/assets目录下创建xposed_init文件，不要后缀名。这个就是模块的入口，只有一行代码，就是说明入口类,这个类就是我们上边的类，在这里我们能打印出所有package。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.hotax.autowechat.xposed.XposedModule。</span><br></pre></td></tr></table></figure>

<p>至此，Xposed模块开发的接入就全部完成了。</p>
<h2 id="Hook实现"><a href="#Hook实现" class="headerlink" title="Hook实现"></a>Hook实现</h2><h3 id="hook变量"><a href="#hook变量" class="headerlink" title="hook变量"></a>hook变量</h3><p>hook前</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private static  int staticPrivateInt = 100;</span><br><span class="line">public static  int staticPublicInt = 100;</span><br><span class="line">private static  String staticPrivateString = &quot;staticPrivateString&quot;;</span><br><span class="line">private static  String staticPublicString = &quot;staticPublicString&quot;;</span><br><span class="line"></span><br><span class="line">public  int publicInt = 200;</span><br><span class="line">private int privateInt = 300;</span><br><span class="line">private String privateString = &quot;privateString&quot;;</span><br><span class="line">private String publicString = &quot;publicString&quot;;</span><br></pre></td></tr></table></figure>

<p>hook</p>
<p>获取Class：</p>
<p>final Class&lt;?&gt; clazz = XposedHelpers.findClass(“全路径类名”, loadPackageParam.classLoader);</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">XposedHelpers.setStaticIntField(clazz, &quot;staticPrivateInt&quot;, 99);</span><br><span class="line">XposedHelpers.setStaticIntField(clazz, &quot;staticPublicInt&quot;, 99);</span><br><span class="line">XposedHelpers.setStaticObjectField(clazz, &quot;staticPrivateString&quot;, &quot;hook_staticPrivateString&quot;);</span><br><span class="line">XposedHelpers.setStaticObjectField(clazz, &quot;staticPublicString&quot;, &quot;hook_staticPublicString&quot;);</span><br><span class="line"></span><br><span class="line">XposedHelpers.setStaticIntField(clazz, &quot;publicInt&quot;, 99);</span><br></pre></td></tr></table></figure>

<p>hook后结果打印</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D/HookDemo: staticPrivateInt = 99</span><br><span class="line">D/HookDemo: staticPublicInt = 99</span><br><span class="line">D/HookDemo: staticPrivateString = hook_staticPrivateString</span><br><span class="line">D/HookDemo: staticPublicString = hook_staticPublicString</span><br><span class="line">D/HookDemo: publicInt = 200</span><br><span class="line">D/HookDemo: privateInt = 300</span><br><span class="line">D/HookDemo: privateString = privateString</span><br><span class="line">D/HookDemo: publicString = publicString</span><br></pre></td></tr></table></figure>

<p><strong>结论：XposedHelpers.setStaticObjectField方法只能修改静态变量，非静态变量不能使用此方式修改。否则会报java.lang.NullPointerException:异常；</strong>那非静态变量如何修改呢：例如我们目标程序里有两个方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void publicMethod(String value)&#123;    </span><br><span class="line">   Log.d(Tag, &quot;参数打印-publicMethod：&quot; + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void privateMethod(String value)&#123;</span><br><span class="line">   Log.d(Tag, &quot;参数打印-privateMethod：&quot; + value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>hook非静态变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">XposedHelpers.findAndHookMethod(clazz, &quot;publicFunc&quot;, String.class, new XC_MethodHook() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                   param.args[0] = &quot;before--------------publicMethod&quot;;</span><br><span class="line">                   XposedHelpers.setIntField(param.thisObject, &quot;publicInt&quot;, 199);</span><br><span class="line">                   XposedHelpers.setIntField(param.thisObject, &quot;privateInt&quot;, 199);</span><br><span class="line">                   XposedHelpers.setObjectField(param.thisObject, &quot;privateString&quot;, &quot;hook_privateString&quot;);</span><br><span class="line">                   XposedHelpers.setObjectField(param.thisObject, &quot;publicString&quot;, &quot;hook_publicString&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   XposedHelpers.setIntField(param.thisObject, &quot;staticPrivateInt&quot;, 199);</span><br><span class="line">                   XposedHelpers.setIntField(param.thisObject, &quot;staticPublicInt&quot;, 199);</span><br><span class="line">                   XposedHelpers.setObjectField(param.thisObject, &quot;staticPrivateString&quot;, &quot;hook_-setObjectField-staticPrivateString&quot;);</span><br><span class="line">                   XposedHelpers.setObjectField(param.thisObject, &quot;staticPublicString&quot;, &quot;hook_-setObjectField-staticPublicString&quot;);</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>hook后结果打印</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">参数打印-publicMethod：before--------------publicMethod</span><br><span class="line">D/HookDemo: staticPrivateInt = 199</span><br><span class="line">D/HookDemo: staticPublicInt = 199</span><br><span class="line">D/HookDemo: staticPrivateString = hook_-setObjectField-staticPrivateString</span><br><span class="line">D/HookDemo: staticPublicString = hook_-setObjectField-staticPublicString</span><br><span class="line">D/HookDemo: publicInt = 199</span><br><span class="line">D/HookDemo: privateInt = 199</span><br><span class="line">D/HookDemo: privateString = hook_privateString</span><br><span class="line">D/HookDemo: publicString = hook_publicString</span><br></pre></td></tr></table></figure>

<p><strong>结论：非静态变量的修改只能通过反射某类中的某个方法（方法类型不限）中修改，且静态变量也可以这么修改。</strong></p>
<h3 id="hook方法"><a href="#hook方法" class="headerlink" title="hook方法"></a>hook方法</h3><h5 id="hook构造方法"><a href="#hook构造方法" class="headerlink" title="hook构造方法"></a>hook构造方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public HookDemo(String value)&#123;</span><br><span class="line">    Log.d(Tag, &quot;参数打印-带参构造方法：&quot; + value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">//Hook有参构造函数，修改参数</span><br><span class="line"> XposedHelpers.findAndHookConstructor(clazz, String.class,  new XC_MethodHook() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    param.args[0] = &quot;参数打印-带参构造方法：我是修改后的参数&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                @Override</span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    XposedBridge.log(&quot;HOOK-After：&quot; +param.args[0]);</span><br><span class="line">                &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">D/HookDemo: 参数打印-带参构造方法：我是修改后的参数</span><br><span class="line">D/HookDemo: HOOK-After：参数打印-带参构造方法：我是修改后的参数</span><br></pre></td></tr></table></figure>

<h5 id="hook带返回值的方法"><a href="#hook带返回值的方法" class="headerlink" title="hook带返回值的方法"></a>hook带返回值的方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public String getHook(String value)&#123;</span><br><span class="line">   return value;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">1、</span><br><span class="line">XposedHelpers.findAndHookMethod(clazz, &quot;getHook&quot;, String.class, new XC_MethodHook() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    param.args[0] = &quot;返回值：before--------------gethook&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">执行结果：</span><br><span class="line">D/HookDemo: getHook 返回值 = 返回值：before--------------gethook</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">2、</span><br><span class="line">   XposedHelpers.findAndHookMethod(clazz, &quot;getHook&quot;, String.class, new XC_MethodHook() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">//                    param.args[0] = &quot;返回值：before--------------gethook&quot;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    param.setResult(&quot;返回值：after--------------gethook&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"> 执行结果：</span><br><span class="line">D/HookDemo: getHook 返回值 = 返回值：after--------------gethook</span><br></pre></td></tr></table></figure>

<h5 id="hook静态方法"><a href="#hook静态方法" class="headerlink" title="hook静态方法"></a>hook静态方法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">private static String staticPrivateMethod(String value)&#123;</span><br><span class="line">    Log.d(&quot;HookDemo&quot;, &quot;静态函数--&quot; + value);</span><br><span class="line">    return &quot;静态函数--返回：&quot;+value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">1、</span><br><span class="line">XposedHelpers.findAndHookMethod(clazz, &quot;staticPrivateMethod&quot;, String.class, new XC_MethodHook() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    param.args[0] = &quot;before---&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    </span><br><span class="line">执行结果：</span><br><span class="line">D/HookDemo: 静态函数--before---</span><br><span class="line">D/HookDemo: 静态函数--返回：before---</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">2、</span><br><span class="line">XposedHelpers.findAndHookMethod(clazz, &quot;staticPrivateMethod&quot;, String.class, new XC_MethodHook() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    param.args[0] = &quot;before---&quot;;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                protected void afterHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                    param.setResult(&quot;静态函数--返回：after---&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">执行结果：</span><br><span class="line">D/HookDemo: 静态函数--before---</span><br><span class="line">D/HookDemo: 静态函数--返回：after---</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">3、</span><br><span class="line">Object object = XposedHelpers.callStaticMethod(clazz, &quot;staticPrivateMethod&quot;, &quot;callStaticMethod 静态函数调用&quot;);</span><br><span class="line">Log.d(&quot;HookDemo&quot;, &quot;xposed-:staticPrivateFunc:&quot;+object);</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">D/HookDemo: 静态函数--callStaticMethod 静态函数调用</span><br><span class="line">D/HookDemo: xposed-:staticPrivateFunc:静态函数--返回：callStaticMethod 静态函数调用</span><br></pre></td></tr></table></figure>

<p><strong>结论：静态方法的修改和其他方法hook方式一样，但是静态方法可以直接通过callStaticMethod进行参数的修改。</strong></p>
<h5 id="Hook复杂的参数"><a href="#Hook复杂的参数" class="headerlink" title="Hook复杂的参数"></a>Hook复杂的参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public void paramsClass(ClasName cn, String value,Intent intent,int key,Map map,List list)&#123;  </span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">Class cnClazz  = loadPackageParam.classLoader.loadClass(&quot;com.xxxx. ClasName&quot;);</span><br><span class="line">Class cnMap = XposedHelpers.findClass(&quot;java.util.Map&quot;, loadPackageParam.classLoader);</span><br><span class="line">Class cnArrayList = XposedHelpers.findClass(&quot;java.util.ArrayList&quot;, loadPackageParam.classLoader);</span><br><span class="line"></span><br><span class="line">XposedHelpers.findAndHookMethod(clazz, &quot;paramsClass&quot;, cnClazz, String.class, Intent.class,int.class,Map.class,ArrayList.class new XC_MethodHook() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h5 id="Hook内部类中的函数"><a href="#Hook内部类中的函数" class="headerlink" title="Hook内部类中的函数"></a>Hook内部类中的函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class HookDemo &#123;</span><br><span class="line">    private String Tag = &quot;HookDemo&quot;;</span><br><span class="line">    class InnerClass&#123;</span><br><span class="line">        public int innerPublicInt = 10;</span><br><span class="line">        private int innerPrivateInt = 20;</span><br><span class="line">        public InnerClass()&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        public void InnerFunc(String value)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">final Class&lt;?&gt; clazz1 = XposedHelpers.findClass(&quot;com.xxxxxx.HookDemo$InnerClass&quot;, loadPackageParam.classLoader);</span><br><span class="line">XposedHelpers.findAndHookMethod(clazz1, &quot;InnerMethod&quot;, String.class, new XC_MethodHook() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p><strong>注：hook内部类中的函数和变量，跟以上的hook方式没有区别，唯一的区别是，XposedHelpers.findClass中的路径名不同。</strong></p>
<h5 id="Hook匿名内部类中的函数"><a href="#Hook匿名内部类中的函数" class="headerlink" title="Hook匿名内部类中的函数"></a>Hook匿名内部类中的函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">anonymousInner(new ClasName() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void clasNameMethod(String value) &#123;</span><br><span class="line">        		Log.d(Tag, &quot;匿名类参数修改：get：&quot; + value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">XposedHelpers.findAndHookMethod(&quot;com.xxxxxx.HookDemo$1&quot;, clazz.getClassLoader(),</span><br><span class="line">                    &quot;clasNameMethod&quot;,String.class, new XC_MethodHook() &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        protected void beforeHookedMethod(MethodHookParam param) throws Throwable &#123;</span><br><span class="line">                             param.args[0] = &quot;匿名类-参数修改&quot;;                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">执行结果：</span><br><span class="line">D/HookDemo: 匿名类参数修改：get：匿名类-参数修改</span><br></pre></td></tr></table></figure>

<h5 id="Hook替换函数"><a href="#Hook替换函数" class="headerlink" title="Hook替换函数"></a>Hook替换函数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">private void repleaceMethod()&#123;</span><br><span class="line">    getHook(&quot;sfdsfs-afsafsf&quot;);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"> XposedHelpers.findAndHookMethod(clazz, &quot;repleaceMethod&quot;, new XC_MethodReplacement() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                protected Object replaceHookedMethod(MethodHookParam methodHookParam) throws Throwable &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">	            			// 直接替换原来要执行的逻辑代码,目标方法就不在执行了</span><br><span class="line">			        &#125; catch (Throwable t) &#123;</span><br><span class="line">			            XposedBridge.log(t);</span><br><span class="line">			        &#125;                    </span><br><span class="line">		       </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="替换资源"><a href="#替换资源" class="headerlink" title="替换资源"></a>替换资源</h3><h4 id="IXposedHookZygoteInit"><a href="#IXposedHookZygoteInit" class="headerlink" title="IXposedHookZygoteInit"></a>IXposedHookZygoteInit</h4><p>Hook the initialization of Zygote process(es), from which all the apps are forked.</p>
<p>Implement this interface in your module’s main class in order to be notified when Android is starting up. In IXposedHookZygoteInit, you can modify objects and place hooks that should be applied for every app. Only the Android framework/system classes are available at that point in time. Use null as class loader for XposedHelpers.findAndHookMethod(String, ClassLoader, String, Object…) and its variants.</p>
<p>If you want to hook one/multiple specific apps, use IXposedHookLoadPackage instead.</p>
<p>替换系统框架资源（对所有app 起作用）需要实现 IXposedHookZygoteInit接口的 initZygote 方法，并在该方法中调用Resources.setSystemWideReplacement(…) 方法替换资源：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Tutorial2  implements IXposedHookZygoteInit&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void initZygote(StartupParam arg0) throws Throwable &#123;</span><br><span class="line">        XResources.setSystemWideReplacement(&quot;android&quot;, &quot;bool&quot;, &quot;config_unplugTurnsOnScreen&quot;, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="IXposedHookInitPackageResources"><a href="#IXposedHookInitPackageResources" class="headerlink" title="IXposedHookInitPackageResources"></a>IXposedHookInitPackageResources</h4><p>替换app应用资源需要实现 IXposedHookInitPackageResources 类的<br>andleInitPackageResources方法，并在该方法中调用res.setReplacement(…)方法替换资源，注意在该方法中不要使用XResources.setSystemWideReplacement 方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line"> public void handleInitPackageResources(XC_InitPackageResources.InitPackageResourcesParam resparam) throws Throwable &#123;</span><br><span class="line"></span><br><span class="line">     if (resparam.packageName.equals(&quot;com.example.xposedhooktarget&quot;)) &#123;</span><br><span class="line">         //getClassInfo(clazz);</span><br><span class="line">         resparam.res.setReplacement(&quot;com.xxxxxx.xposedhooktarget&quot;, &quot;string&quot;, &quot;action_test&quot;, &quot;HkTargetTest&quot;);</span><br><span class="line">         resparam.res.setReplacement(&quot;com.example.xposedhooktarget&quot;, &quot;color&quot;, &quot;colorAccent&quot;, R.color.colorPrimary);</span><br><span class="line">resparam.res.setReplacement(&quot;2131165219&quot;, &quot;HkTargetTest-action_text&quot;);</span><br><span class="line">         resparam.res.setReplacement(&quot;com.xxxxxxx.xposedhooktarget&quot;, &quot;mipmap&quot;, &quot;test_icon&quot;, new XResources.DrawableLoader() &#123;</span><br><span class="line">             @Override</span><br><span class="line">             public Drawable newDrawable(XResources res, int id) throws Throwable &#123;</span><br><span class="line">                 Drawable dg = res.getDrawable(R.mipmap.ic_launcher);</span><br><span class="line">                 return dg;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>还可以替换动画文件等等。</p>
<h3 id="修改布局"><a href="#修改布局" class="headerlink" title="修改布局"></a>修改布局</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resparam.res.hookLayout(&quot;com.xxxxxx.xposedhooktarget&quot;, &quot;layout&quot;, &quot;activity_main&quot;, new XC_LayoutInflated() &#123;</span><br><span class="line">               @Override</span><br><span class="line">               public void handleLayoutInflated(LayoutInflatedParam liparam) throws Throwable &#123;</span><br><span class="line">                   //增加一个TextView</span><br><span class="line">                   FrameLayout contentview = (FrameLayout) liparam.view;</span><br><span class="line">                   if (contentview != null) &#123;</span><br><span class="line">                       TextView textView = new TextView(contentview.getContext());</span><br><span class="line">                       textView.setText(&quot;修改布局&quot;);</span><br><span class="line">                       contentview.addView(textView);</span><br><span class="line">                   &#125;</span><br><span class="line">                   //修改@+id= bt_text1 的TextView的文案</span><br><span class="line">                   TextView bt_text1 = (TextView) liparam.view.findViewById(</span><br><span class="line">                           liparam.res.getIdentifier(&quot;bt_text1&quot;, &quot;id&quot;, &quot;com.xxxxxx.xposedhooktarget&quot;));</span><br><span class="line">                   bt_text1.setText(&quot;修改布局文本&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="群控"><a href="#群控" class="headerlink" title="群控"></a>群控</h2><p>需求：被动添加好友。</p>
<p>要求：采用静默的无感知模式。</p>
<p>实现：思路，采用hook添加好友协议的模式，入口在db的hook基础上进行监听验证好友的请求，因为不论什么信息，都会首先会存储与微信的db中。</p>
<p>前提：已经hook了界面的跳转，和打开了微信的log信息。<a href="http://wxc.58corp.com/pages/viewpage.action?pageId=25070673" target="_blank" rel="noopener">详细点击</a>.</p>
<p>过程：在前提下，我们可以得到了三个关于被动添加好友的信息：</p>
<p>1、好友通过验证的界面名称和传递的参数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">E/hotWeixinHook: ActivityHook; activity=com.tencent.mm.plugin.profile.ui.SayHiWithSnsPermissionUI@a3b6b62, onCreate; getIntent()=Intent</span><br><span class="line">        &#123; cmp=com.tencent.mm/.plugin.profile.ui.SayHiWithSnsPermissionUI (has extras), extra=bundle&#123;</span><br><span class="line">            sayhi_with_sns_perm_send_verify=true,</span><br><span class="line">        room_name=null,</span><br><span class="line">        source_from_user_name=null,</span><br><span class="line">        sayhi_with_sns_perm_add_remark=true,</span><br><span class="line">        source_from_nick_name=null,</span><br><span class="line">        Contact_Nick=大王,</span><br><span class="line">        Contact_User=v1_841761d9ad2fee00bafee3e6c65ec45aef0c541d5c3bacfc2d24acd30fe184f31cd28a41808180cfff4ebd0325d4a1a1@stranger,</span><br><span class="line">        Contact_Scene=15,</span><br><span class="line">        Contact_RemarkName=,</span><br><span class="line">        =false,</span><br><span class="line">        AntispamTicket=v2_6e521f51ae39720c3154a79ba26c689efab115f39b314795f803a2889d76a013e05b3569cdd1f5328da35803ed134968@stranger</span><br><span class="line"></span><br><span class="line">        &#125; &#125;, bundle=bundle&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>2、验证的详细信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">MicroMsg.FMessageProvider; setDigest, </span><br><span class="line">fmsgType = 1, fmsgScene = 30, </span><br><span class="line">fmsgContent = </span><br><span class="line">&lt;msg </span><br><span class="line">fromusername=&quot;aibhyi1314521&quot; encryptusername=&quot;v1_4bb4022da882fa9b480543b3a0e48fcc76b5530d371c9defe34a653497843e38@stranger&quot; </span><br><span class="line">fromnickname=&quot;忘记一切&quot; </span><br><span class="line">content=&quot;我是忘记一切&quot; </span><br><span class="line">fullpy=&quot;wangjiyiqie&quot; </span><br><span class="line">shortpy=&quot;WJYQ&quot; </span><br><span class="line">imagestatus=&quot;3&quot; </span><br><span class="line">scene=&quot;30&quot; country=&quot;CN&quot; province=&quot;Hebei&quot; city=&quot;Baoding&quot; </span><br><span class="line">sign=&quot;带走一盏渔火，让他温暖我的双眼。留下一段真情让他停泊在枫桥边&quot; percard=&quot;1&quot; sex=&quot;1&quot; alias=&quot;wuluqi0606&quot; weibo=&quot;&quot; albumflag=&quot;0&quot; albumstyle=&quot;0&quot; albumbgimgid=&quot;&quot; snsflag=&quot;17&quot; </span><br><span class="line">snsbgimgid=&quot;http://shmmsns.qpic.cn/mmsns/CttmTaYSYkS6fvUyDJs0icQ6oRUqibtDIuUylCkHeRHfk4jF7nToTbSYAm5H0z84qh9fHACkovW1c/0&quot; </span><br><span class="line">snsbgobjectid=&quot;12854304281324228767&quot; mhash=&quot;3140af8c3cd25f8db0eaa8815cc2cd95&quot; mfullhash=&quot;3140af8c3cd25f8db0eaa8815cc2cd95&quot; </span><br><span class="line">bigheadimgurl=&quot;http://wx.qlogo.cn/mmhead/ver_1/qKwkYHXZa7iahrsJ2DV7NhuZnrWft9icLTiculKSTJiaJVQvpMPV1dyKH9HuqM3F9picnfZ6dd1ujxxCADH0tHburXhYQBsSP0ZQbD8USaqzXh7c/0&quot; smallheadimgurl=&quot;http://wx.qlogo.cn/mmhead/ver_1/qKwkYHXZa7iahrsJ2DV7NhuZnrWft9icLTiculKSTJiaJVQvpMPV1dyKH9HuqM3F9picnfZ6dd1ujxxCADH0tHburXhYQBsSP0ZQbD8USaqzXh7c/96&quot; ticket=&quot;v2_e57f9519b15cab7743fe81feced778340c7cb4a2c6cbbb361fdd606bbf815478db4e967568ece4fbf27519726dda64492f68992a4e750ef8e4e6e72724f075e8@stranger&quot; </span><br><span class="line">opcode=&quot;2&quot; googlecontact=&quot;&quot; qrticket=&quot;&quot; chatroomusername=&quot;&quot; sourceusername=&quot;&quot; sourcenickname=&quot;&quot;&gt;</span><br><span class="line">&lt;brandlist count=&quot;0&quot; ver=&quot;685330891&quot;&gt;&lt;/brandlist&gt;</span><br><span class="line">&lt;/msg&gt;, </span><br><span class="line">isSend = false</span><br></pre></td></tr></table></figure>

<p>3、存储数据库名称。</p>
<p>MicroMsg.SDK.MAutoStorage; <strong>fmessage_conversation</strong>:get with primary key</p>
<p>4、根据1得到的界面，我们可以查看微信的逆向代码。我是用的jadx-0.7.2，不要用jadx低版本，因为低版本的逆向结果的代码中，不含有我们需要hook的具体类名和方法名。因为微信的包比较大，我们最好把逆向代码导出来，使用的时候用AS打开即可。</p>
<p>5、<br>我们看下点击发送按钮等源代码：（比较长，但是不贴一下，没法说啊）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">class C305316 implements OnMenuItemClickListener &#123;</span><br><span class="line">        C305316() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public final boolean onMenuItemClick(MenuItem menuItem) &#123;</span><br><span class="line">            final C1138k c8233f;</span><br><span class="line">            SayHiWithSnsPermissionUI sayHiWithSnsPermissionUI;</span><br><span class="line">            Context context;</span><br><span class="line">            if (SayHiWithSnsPermissionUI.this.f97358pqM) &#123;</span><br><span class="line">                int i;</span><br><span class="line">                List linkedList = new LinkedList();</span><br><span class="line">                linkedList.add(SayHiWithSnsPermissionUI.this.userName);</span><br><span class="line">                List linkedList2 = new LinkedList();</span><br><span class="line">                linkedList2.add(Integer.valueOf(SayHiWithSnsPermissionUI.this.f97352pnn));</span><br><span class="line">                String g = SayHiWithSnsPermissionUI.m63520g(SayHiWithSnsPermissionUI.this);</span><br><span class="line">                Map hashMap = new HashMap();</span><br><span class="line">                if (SayHiWithSnsPermissionUI.this.f97357pqL.f28645zEk) &#123;</span><br><span class="line">                    i = 1;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    i = 0;</span><br><span class="line">                &#125;</span><br><span class="line">                hashMap.put(SayHiWithSnsPermissionUI.this.userName, Integer.valueOf(i));</span><br><span class="line">                C6159x.m11666d(&quot;MicroMsg.SayHiWithSnsPermissionUI&quot;, &quot;select sns permission, %s&quot;, Integer.valueOf(i));</span><br><span class="line">                if (C10044x.m20844Xg(SayHiWithSnsPermissionUI.this.userName)) &#123;</span><br><span class="line">                    c8233f = new C8233f(SayHiWithSnsPermissionUI.this.userName, g, SayHiWithSnsPermissionUI.this.getIntent().getStringExtra(C32536a.f104548xML));</span><br><span class="line">                    C32688as.m69428CN().mo13442a(c8233f, 0);</span><br><span class="line">                    sayHiWithSnsPermissionUI = SayHiWithSnsPermissionUI.this;</span><br><span class="line">                    context = SayHiWithSnsPermissionUI.this.mController.f28409xRr;</span><br><span class="line">                    SayHiWithSnsPermissionUI.this.getString(C1085R.C1081l.f8616dGZ);</span><br><span class="line">                    sayHiWithSnsPermissionUI.f97348inI = C36199h.m82220a(context, SayHiWithSnsPermissionUI.this.getString(C1085R.C1081l.f10212eKs), true, new OnCancelListener() &#123;</span><br><span class="line">                        public final void onCancel(DialogInterface dialogInterface) &#123;</span><br><span class="line">                            C32688as.m69428CN().mo13446c(c8233f);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    final C1138k c31589o = new C31589o(2, linkedList, linkedList2, g, &quot;&quot;, hashMap, SayHiWithSnsPermissionUI.this.chatroomName);</span><br><span class="line">                    String stringExtra = SayHiWithSnsPermissionUI.this.getIntent().getStringExtra(&quot;source_from_user_name&quot;);</span><br><span class="line">                    String stringExtra2 = SayHiWithSnsPermissionUI.this.getIntent().getStringExtra(&quot;source_from_nick_name&quot;);</span><br><span class="line">                    if (!C6135bi.m11498oN(stringExtra)) &#123;</span><br><span class="line">                        c31589o.mo40569fj(stringExtra, stringExtra2);</span><br><span class="line">                    &#125;</span><br><span class="line">                    C32688as.m69428CN().mo13442a(c31589o, 0);</span><br><span class="line">                    SayHiWithSnsPermissionUI sayHiWithSnsPermissionUI2 = SayHiWithSnsPermissionUI.this;</span><br><span class="line">                    context = SayHiWithSnsPermissionUI.this.mController.f28409xRr;</span><br><span class="line">                    SayHiWithSnsPermissionUI.this.getString(C1085R.C1081l.f8616dGZ);</span><br><span class="line">                    sayHiWithSnsPermissionUI2.f97348inI = C36199h.m82220a(context, SayHiWithSnsPermissionUI.this.getString(C1085R.C1081l.f10212eKs), true, new OnCancelListener() &#123;</span><br><span class="line">                        public final void onCancel(DialogInterface dialogInterface) &#123;</span><br><span class="line">                            C32688as.m69428CN().mo13446c(c31589o);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else if (SayHiWithSnsPermissionUI.this.f97359pqN) &#123;</span><br><span class="line">                String stringExtra3 = SayHiWithSnsPermissionUI.this.getIntent().getStringExtra(&quot;Verify_ticket&quot;);</span><br><span class="line">                if (C10044x.m20844Xg(SayHiWithSnsPermissionUI.this.userName)) &#123;</span><br><span class="line">                    c8233f = new C8234g(SayHiWithSnsPermissionUI.this.userName, stringExtra3);</span><br><span class="line">                    C32688as.m69428CN().mo13442a(c8233f, 0);</span><br><span class="line">                    sayHiWithSnsPermissionUI = SayHiWithSnsPermissionUI.this;</span><br><span class="line">                    context = SayHiWithSnsPermissionUI.this.mController.f28409xRr;</span><br><span class="line">                    SayHiWithSnsPermissionUI.this.getString(C1085R.C1081l.f8616dGZ);</span><br><span class="line">                    sayHiWithSnsPermissionUI.f97348inI = C36199h.m82220a(context, SayHiWithSnsPermissionUI.this.getString(C1085R.C1081l.f9343dUY), true, new OnCancelListener() &#123;</span><br><span class="line">                        public final void onCancel(DialogInterface dialogInterface) &#123;</span><br><span class="line">                            C32688as.m69428CN().mo13446c(c8233f);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    c8233f = new C31589o(SayHiWithSnsPermissionUI.this.userName, stringExtra3, SayHiWithSnsPermissionUI.this.f97352pnn);</span><br><span class="line">                    C32688as.m69428CN().mo13442a(c8233f, 0);</span><br><span class="line">                    sayHiWithSnsPermissionUI = SayHiWithSnsPermissionUI.this;</span><br><span class="line">                    context = SayHiWithSnsPermissionUI.this.mController.f28409xRr;</span><br><span class="line">                    SayHiWithSnsPermissionUI.this.getString(C1085R.C1081l.f8616dGZ);</span><br><span class="line">                    sayHiWithSnsPermissionUI.f97348inI = C36199h.m82220a(context, SayHiWithSnsPermissionUI.this.getString(C1085R.C1081l.f9343dUY), true, new OnCancelListener() &#123;</span><br><span class="line">                        public final void onCancel(DialogInterface dialogInterface) &#123;</span><br><span class="line">                            C32688as.m69428CN().mo13446c(c8233f);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>经过一系列判断，我们最终最后定位到通过协议的代码C32688as.m69428CN().mo13442a(c8233f, 0);为啥啊，因为不管是if和else if的的条件我们都能够拿到，怎么拿到，我们可以通过XposedHelpers.getObjectField(param.thisObject, “方法变量”);获得到f97359pqN和f97358pqM的值；然后我们看C32688as这个类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* renamed from: com.tencent.mm.y.as */</span><br><span class="line">public final class C32688as &#123;</span><br><span class="line">	/* renamed from: CN */</span><br><span class="line">    public static C7656n m69428CN() &#123;</span><br><span class="line">        C1693g.m4270Dr();</span><br><span class="line">        return C1693g.m4268Dp().f13865gRu;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看C7656n调用类：好吧只看mo13442a这一个方法就行了，这个就是通过好友的开始方法了；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* renamed from: com.tencent.mm.ad.n */</span><br><span class="line">public final class C7656n implements C1125e &#123;</span><br><span class="line">	/* renamed from: a */</span><br><span class="line">    public final boolean mo13442a(C1138k c1138k, int i) &#123;</span><br><span class="line">        boolean z = c1138k != null || i &gt;= 0;</span><br><span class="line">        Assert.assertTrue(z);</span><br><span class="line">        String str = &quot;worker thread has not been set&quot;;</span><br><span class="line">        if (this.f30978hoG != null) &#123;</span><br><span class="line">            z = true;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            z = false;</span><br><span class="line">        &#125;</span><br><span class="line">        Assert.assertTrue(str, z);</span><br><span class="line">        if (!m15236e(c1138k)) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        m15231b(c1138k, i);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们在看请求的参数：一个类C31589o，好吧，看出来了，就是一个model类。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/* renamed from: com.tencent.mm.pluginsdk.model.o */</span><br><span class="line">public class C31589o extends C1138k implements C1865k &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上：我们可以得到最终的静默实现好友验证请求通过了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public void onUpdate(Object database, String path, String table, ContentValues values, String whereClause, String[] whereArgs, int conflictAlgorithm) &#123;</span><br><span class="line">        if (DBConstants.MicroMsg.Fmessage_Conversation.TABLE_NAME.equals(table)) &#123;</span><br><span class="line"></span><br><span class="line">            Integer isNew = values.getAsInteger(DBConstants.MicroMsg.Fmessage_Conversation.COLUMN_isNew);</span><br><span class="line">            String talker = values.getAsString(DBConstants.MicroMsg.Fmessage_Conversation.COLUMN_talker);</span><br><span class="line">            Log.e(WeixinHook.TAG, &quot;DBEventReceiveFriendsVerify; parseRequestContent;isNew.&quot;+isNew);</span><br><span class="line"></span><br><span class="line">            // isNew == 1:新好友请求</span><br><span class="line">            if (isNew != null &amp;&amp; isNew == 1) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    String fmsgContent = values.getAsString(DBConstants.MicroMsg.Fmessage_Conversation.COLUMN_fmsgContent);</span><br><span class="line">                    Log.e(WeixinHook.TAG, &quot;DBEventReceiveFriendsVerify; parseRequestContent;fmsgContent.&quot;+fmsgContent);</span><br><span class="line"></span><br><span class="line">                    JSONObject jsonObject = new XmlToJson.Builder(fmsgContent).build().toJson();</span><br><span class="line">                    JSONObject appMsg = jsonObject.getJSONObject(&quot;msg&quot;);</span><br><span class="line">                    if (fmsgContent == null) &#123;</span><br><span class="line">                        Log.e(WeixinHook.TAG, &quot;DBEventReceiveFriendsVerify; parseRequestContent; appMsg is null, just return.&quot;);</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Log.e(WeixinHook.TAG, &quot;DBEventReceiveFriendsVerify; &amp;wxid:=&quot; + appMsg.getString(&quot;fromusername&quot;) + &quot;&amp;ticket:&quot; + appMsg.getString(&quot;ticket&quot;) + &quot;&amp;scene:&quot; + appMsg.getInt(&quot;scene&quot;));</span><br><span class="line">                    int state  = Utils.getFCState(talker);</span><br><span class="line">                    Log.e(WeixinHook.TAG, &quot;DBEventReceiveFriendsVerify; state1:&quot;+state);</span><br><span class="line">                    if(state == 1)&#123;</span><br><span class="line">                        report(appMsg.getString(&quot;fromusername&quot;).toString(),</span><br><span class="line">                                appMsg.getString(&quot;fromnickname&quot;).toString(),</span><br><span class="line">                                appMsg.getString(&quot;content&quot;).toString()</span><br><span class="line">                        );</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        final Object instance_y_as_cn = XposedHelpers.callStaticMethod(</span><br><span class="line">                                XposedHelpers.findClass(&quot;com.tencent.mm.y.as&quot;, mWeixinHook.getClassLoader()),</span><br><span class="line">                                &quot;CN&quot;</span><br><span class="line">                        );</span><br><span class="line"></span><br><span class="line">                        String username = appMsg.getString(&quot;fromusername&quot;).toString();</span><br><span class="line">                        String ticket = appMsg.getString(&quot;ticket&quot;).toString();</span><br><span class="line">                        int scene = appMsg.getInt(&quot;scene&quot;);</span><br><span class="line">                        Class&lt;?&gt; class_model_o = XposedHelpers.findClass(&quot;com.tencent.mm.pluginsdk.model.o&quot;, mWeixinHook.getClassLoader());</span><br><span class="line">                        Object request = XposedHelpers.newInstance(class_model_o, username, ticket, scene);</span><br><span class="line"></span><br><span class="line">                        Object result = XposedHelpers.callMethod(instance_y_as_cn, &quot;a&quot;, request, 0);</span><br><span class="line">                        Log.e(WeixinHook.TAG, &quot;DBEventReceiveFriendsVerify; result; &quot; + result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>测试一下，搞定。</p>
<h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><p><a href="https://api.xposed.info/reference/packages.html" target="_blank" rel="noopener">https://api.xposed.info/reference/packages.html</a></p>
<p><a href="https://bintray.com/rovo89/de.robv.android.xposed/api" target="_blank" rel="noopener">https://bintray.com/rovo89/de.robv.android.xposed/api</a></p>
<p><a href="http://www.infoq.com/cn/articles/android-in-depth-xposed" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/android-in-depth-xposed</a></p>
<p><a href="https://blog.csdn.net/u012417380/article/details/55254369?locationNum=13&amp;fps=1" target="_blank" rel="noopener">https://blog.csdn.net/u012417380/article/details/55254369?locationNum=13&amp;fps=1</a></p>
<p><a href="https://www.cnblogs.com/gordon0918/p/6732100.html" target="_blank" rel="noopener">https://www.cnblogs.com/gordon0918/p/6732100.html</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Xposed </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MIUI权限检测之路]]></title>
      <url>/2019/07/02/permissioncheck/</url>
      <content type="html"><![CDATA[<h2 id="问题与需求"><a href="#问题与需求" class="headerlink" title="问题与需求"></a>问题与需求</h2><p>在业务线在使用过程中，发生了一些权限状态丢失的情况。而在我们的群控平台中，如果某些权限的设置状态丢失，则群控平台绝大多数功能不能执行。尤其是HRG业务人员，它们不仅需要群控自动执行功能指令，还不能影响手动操作。所以在权限状态丢失后，产品提出了一个权限检测的需求。这个需求就是在我们的平台中检测应用的权限列表，获取权限的当前状态。用于提示使用者，当前的群控在权限设置上是否已经被允许。</p>
<a id="more"></a>
<h2 id="权限介绍"><a href="#权限介绍" class="headerlink" title="权限介绍"></a>权限介绍</h2><p>一个Android应用默认情况下是不拥有任何权限的,  在默认情况下, 一个应用是没有权利去进行一些可能会造成不好影响的操作的. 这些不好的影响可能是对其它应用,操作系统,或者是用户.<br>如果应用需要某些额外的能力,则需要在AndroidManifest.xml中静态地声明相应的权限.<br>也就是我们在AndroidManifest.xml注册了一系列uses-permission，这些permission就是我们需要申请的权限。</p>
<p>在Android 6.0发布之前, 所有的权限都在安装应用的时候显示给用户,用户选择安装则表示全部接受这些权限, 之后无法撤销对这些权限的授权.<br>但是从Android 6.0开始, 一部分比较危险的权限需要在程序运行请求用户授权.<br>至于什么时候需要授权,由应用程序自己决定.而这些权限，就是我们所说的运行时权限。<br>而对于其他权限,认为不是很危险,所以仍然保持原来的做法,在用户安装应用程序时就予以授权.<br>需要注意的是,在设置中,对于应用的危险权限,用户可以选择性地进行授权或者关闭.</p>
<p>Dangerous Permissions主要有：</p>
<table style="margin-left: auto; margin-right: auto;">
<tbody>
<tr><th>Permission Group</th><th>Permissions</th></tr>
<tr>
<td><code><a href="https://developer.android.com/reference/android/Manifest.permission_group.html#CALENDAR" target="_blank" rel="noopener">CALENDAR</a></code></td>
<td>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#READ_CALENDAR" target="_blank" rel="noopener">READ_CALENDAR</a></code></li>
</ul>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_CALENDAR" target="_blank" rel="noopener">WRITE_CALENDAR</a></code></li>
</ul>
</td>
</tr>
<tr>
<td><code><a href="https://developer.android.com/reference/android/Manifest.permission_group.html#CAMERA" target="_blank" rel="noopener">CAMERA</a></code></td>
<td>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#CAMERA" target="_blank" rel="noopener">CAMERA</a></code></li>
</ul>
</td>
</tr>
<tr>
<td><code><a href="https://developer.android.com/reference/android/Manifest.permission_group.html#CONTACTS" target="_blank" rel="noopener">CONTACTS</a></code></td>
<td>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#READ_CONTACTS" target="_blank" rel="noopener">READ_CONTACTS</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_CONTACTS" target="_blank" rel="noopener">WRITE_CONTACTS</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#GET_ACCOUNTS" target="_blank" rel="noopener">GET_ACCOUNTS</a></code></li>
</ul>
</td>
</tr>
<tr>
<td><code><a href="https://developer.android.com/reference/android/Manifest.permission_group.html#LOCATION" target="_blank" rel="noopener">LOCATION</a></code></td>
<td>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_FINE_LOCATION" target="_blank" rel="noopener">ACCESS_FINE_LOCATION</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#ACCESS_COARSE_LOCATION" target="_blank" rel="noopener">ACCESS_COARSE_LOCATION</a></code></li>
</ul>
</td>
</tr>
<tr>
<td><code><a href="https://developer.android.com/reference/android/Manifest.permission_group.html#MICROPHONE" target="_blank" rel="noopener">MICROPHONE</a></code></td>
<td>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#RECORD_AUDIO" target="_blank" rel="noopener">RECORD_AUDIO</a></code></li>
</ul>
</td>
</tr>
<tr>
<td><code><a href="https://developer.android.com/reference/android/Manifest.permission_group.html#PHONE" target="_blank" rel="noopener">PHONE</a></code></td>
<td>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#READ_PHONE_STATE" target="_blank" rel="noopener">READ_PHONE_STATE</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#CALL_PHONE" target="_blank" rel="noopener">CALL_PHONE</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#READ_CALL_LOG" target="_blank" rel="noopener">READ_CALL_LOG</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_CALL_LOG" target="_blank" rel="noopener">WRITE_CALL_LOG</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#ADD_VOICEMAIL" target="_blank" rel="noopener">ADD_VOICEMAIL</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#USE_SIP" target="_blank" rel="noopener">USE_SIP</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#PROCESS_OUTGOING_CALLS" target="_blank" rel="noopener">PROCESS_OUTGOING_CALLS</a></code></li>
</ul>
</td>
</tr>
<tr>
<td><code><a href="https://developer.android.com/reference/android/Manifest.permission_group.html#SENSORS" target="_blank" rel="noopener">SENSORS</a></code></td>
<td>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#BODY_SENSORS" target="_blank" rel="noopener">BODY_SENSORS</a></code></li>
</ul>
</td>
</tr>
<tr>
<td><code><a href="https://developer.android.com/reference/android/Manifest.permission_group.html#SMS" target="_blank" rel="noopener">SMS</a></code></td>
<td>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#SEND_SMS" target="_blank" rel="noopener">SEND_SMS</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#RECEIVE_SMS" target="_blank" rel="noopener">RECEIVE_SMS</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#READ_SMS" target="_blank" rel="noopener">READ_SMS</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#RECEIVE_WAP_PUSH" target="_blank" rel="noopener">RECEIVE_WAP_PUSH</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#RECEIVE_MMS" target="_blank" rel="noopener">RECEIVE_MMS</a></code></li>
</ul>
</td>
</tr>
<tr>
<td><code><a href="https://developer.android.com/reference/android/Manifest.permission_group.html#STORAGE" target="_blank" rel="noopener">STORAGE</a></code></td>
<td>
<ul>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE" target="_blank" rel="noopener">READ_EXTERNAL_STORAGE</a></code></li>
<li><code><a href="https://developer.android.com/reference/android/Manifest.permission.html#WRITE_EXTERNAL_STORAGE" target="_blank" rel="noopener">WRITE_EXTERNAL_STORAGE</a></code></li>
</ul>
</td>
</tr>
</tbody>
</table>        

<p>而通过上述危险权限来看，是有了组的概念，只要我们授权了其中一个权限，那就授权当前组的所有全新啊。而我们可以通过下面的方法获取到所有的申请权限：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PackageManager packageManager = this.getPackageManager();</span><br><span class="line">PackageInfo packageInfo =packageManager.getPackageInfo(packageName, PackageManager.GET_PERMISSIONS);</span><br><span class="line">String[] usesPermissionsArray = packageInfo.requestedPermissions;</span><br></pre></td></tr></table></figure>

<h2 id="实现历程"><a href="#实现历程" class="headerlink" title="实现历程"></a>实现历程</h2><h3 id="App-Ops"><a href="#App-Ops" class="headerlink" title="App Ops"></a>App Ops</h3><p>Google在SDK19中引入了AppOps的权限管理方式，AppOpsManager是对外的管理接口，真正实现功能的是AppOpsService。AppOpsManager里面有两个比较重要的方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AppOpsManager::checkOp(int op ,int uid ,String packageName) （hide方法)</span><br><span class="line">AppOpsManager::checkOp(String op,int uid ,String packageName)（public方法）</span><br></pre></td></tr></table></figure>

<p>所以我们可以用第二个方式检测权限的状态，uid和packageName我们可以拿到，但是op是什么呢，通过查找我们发现AppOpsManager提供了一个函数permissionToOp，通过这个函数我们可以，我们可以把标题1中获取到的uses-permission转换成op，然后我们就可以利用checkOp获取到权限的状态结果了。<br>但是在实际的操作中我们发现。发生了一个SecurityException异常。这个是为什么呢，我们通过查看源码发现。permissionToOp可能为空，这个是因为，我们标题1中获取到的permission，不一定有对应的op值。部分展示如下所示：我们发现其中有好多null值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * This maps each operation to the public string constant for it.</span><br><span class="line"> * If it doesn&apos;t have a public string constant, it maps to null.</span><br><span class="line"> */</span><br><span class="line">private static String[] sOpToString = new String[] &#123;</span><br><span class="line">        OPSTR_COARSE_LOCATION,</span><br><span class="line">        OPSTR_FINE_LOCATION,</span><br><span class="line">        null,</span><br><span class="line">        null,</span><br><span class="line">        OPSTR_READ_CONTACTS,</span><br><span class="line">        OPSTR_WRITE_CONTACTS,</span><br><span class="line">        OPSTR_READ_CALL_LOG,</span><br><span class="line">        ......,</span><br><span class="line">        ......,</span><br><span class="line">        ......,</span><br><span class="line">        ......,</span><br><span class="line">        ......,</span><br><span class="line">        null,</span><br><span class="line">        OPSTR_USE_FINGERPRINT,</span><br><span class="line">        OPSTR_BODY_SENSORS,</span><br><span class="line">        OPSTR_READ_CELL_BROADCASTS,</span><br><span class="line">        OPSTR_MOCK_LOCATION,</span><br><span class="line">        OPSTR_READ_EXTERNAL_STORAGE,</span><br><span class="line">        OPSTR_WRITE_EXTERNAL_STORAGE,</span><br><span class="line">        null,</span><br><span class="line">        OPSTR_GET_ACCOUNTS,</span><br><span class="line">        null,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>结论：</p>
<p>1、通过permissionToOp和checkOp将不能满足我们的需求。</p>
<p>2、我们发现AndroidManifest.xml中的权限要比小米手机权限列表中的要多。</p>
<h3 id="SecurityCenter"><a href="#SecurityCenter" class="headerlink" title="SecurityCenter"></a>SecurityCenter</h3><p>SecurityCenter是什么，它是小米手机权限管理的apk，通过反编译，我们可以一步步的发现小米手机获取权限列表状态的实现方式。粘一下小米的实现核心代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">public PermissionList loadInBackground() &#123;</span><br><span class="line">        PermissionList permissionList = new PermissionList();</span><br><span class="line">        permissionList.isEnabled = isEnabled();</span><br><span class="line">        HashMap cB = packagePermisson(this.mContext, packageName);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;PermissionBean&gt; arrayList = new ArrayList();</span><br><span class="line">        permissionList.hashMap = cB;</span><br><span class="line">        permissionList.PermissionBeanList = arrayList;</span><br><span class="line">        if (cB != null) &#123;</span><br><span class="line">            Iterable&lt;PermissionGroupInfo&gt; boo = mo5980boo(0);</span><br><span class="line">            Iterable&lt;PermissionInfo&gt; bop = mo5981bop(0);</span><br><span class="line">            Set keySet = cB.keySet();</span><br><span class="line">            HashMap hashMap = new HashMap();</span><br><span class="line">            for (PermissionGroupInfo permissionGroupInfo : boo) &#123;</span><br><span class="line">                PermissionBean permissionBean = new PermissionBean();</span><br><span class="line">                permissionBean.permissionGroupInfo = permissionGroupInfo;</span><br><span class="line">                hashMap.put(Integer.valueOf(permissionGroupInfo.getId()), permissionBean);</span><br><span class="line">                arrayList.add(permissionBean);</span><br><span class="line">            &#125;</span><br><span class="line">            for (PermissionInfo permissionInfo : bop) &#123;</span><br><span class="line">                if (keySet.contains(Long.valueOf(permissionInfo.getId()))) &#123;</span><br><span class="line">                    PermissionBean permissionBean2 = (PermissionBean) hashMap.get(Integer.valueOf(permissionInfo.getGroup()));</span><br><span class="line">                    if (permissionBean2 != null) &#123;</span><br><span class="line">                        permissionBean2.permissionInfoArrayList.add(permissionInfo);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ArrayList&lt;PermissionBean&gt; arrayList2 = new ArrayList();</span><br><span class="line">            for (PermissionBean permissionBean3 : arrayList) &#123;</span><br><span class="line">                if (permissionBean3.permissionInfoArrayList.size() == 0) &#123;</span><br><span class="line">                    arrayList2.add(permissionBean3);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            for (PermissionBean permissionBean32 : arrayList2) &#123;</span><br><span class="line">                arrayList.remove(permissionBean32);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return permissionList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中，packagePermisson，mo5980boo，mo5981bop，都是通过ContentResolver跨进程获取到的，然后把获取到的权限分组拼装即可。所以，通过这种方式，我们获取到的权限状态和小米手机的权限列表是一致的。</p>
<p>结论：</p>
<p>因为上述实现是基于note 4x手机的安全中心获取的，所以没有问题。但是我们的手机型号不止是4x手机，还有其他小米手机，但我在其他手机上运行的时候，发现报错，出现没有miui.permission.READ_AND_WIRTE_PERMISSION_MANAGER的异常。所以，这种实现方式，不能支撑所有手机。</p>
<h3 id="AppOpsX"><a href="#AppOpsX" class="headerlink" title="AppOpsX"></a>AppOpsX</h3><p>是一个第三方权限管理的实现，通过调用appops的权限管理器，控制权限管理。<br>[Github:<a href="https://github.com/8enet/AppOpsX]" target="_blank" rel="noopener">https://github.com/8enet/AppOpsX]</a> (<a href="https://github.com/8enet/AppOpsX),接入AppOpsX后，可以支撑所有小米手机，但是获取到的权限列表不能和小米手机的权限中心一致，这个会导致产品和运营有一定的误解，并且接入比较困难，可能对今天版本的兼容也会有问题。" target="_blank" rel="noopener">https://github.com/8enet/AppOpsX),接入AppOpsX后，可以支撑所有小米手机，但是获取到的权限列表不能和小米手机的权限中心一致，这个会导致产品和运营有一定的误解，并且接入比较困难，可能对今天版本的兼容也会有问题。</a></p>
<h3 id="checkSelfPermission"><a href="#checkSelfPermission" class="headerlink" title="checkSelfPermission"></a>checkSelfPermission</h3><h4 id="ContextCompat"><a href="#ContextCompat" class="headerlink" title="ContextCompat"></a>ContextCompat</h4><p>Android 6.0 变更:<br>此版本引入了一种新的权限模式，如今，用户可直接在运行时管理应用权限。这种模式让用户能够更好地了解和控制权限，同时为应用开发者精简了安装和自动更新过程。用户可为所安装的各个应用分别授予或撤销权限。</p>
<p>对于以 Android 6.0（API 级别 23）或更高版本为目标平台的应用，请务必在运行时检查和请求权限。要确定您的应用是否已被授予权限，请调用新增的 checkSelfPermission() 方法。要请求权限，请调用新增的 requestPermissions() 方法。即使您的应用并不以 Android 6.0（API 级别 23）为目标平台，您也应该在新权限模式下测试您的应用。</p>
<p>如需了解有关在您的应用中支持新权限模式的详情，请参阅使用系统权限。如需了解有关如何评估新模式对应用的影响的提示，请参阅权限最佳做法。</p>
<p><img src="http://nunu03.github.io/2019/07/02/permissioncheck/checkSelfPermission.png" alt="checkSelfPermission"><br>从上图可知，最终的check会到PackageManagerService. checkComponentPermission,而checkComponentPermission最终调用了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int checkUidPermission(String permName, int uid) &#123;</span><br><span class="line">    final int userId = UserHandle.getUserId(uid);</span><br><span class="line"></span><br><span class="line">    if (!sUserManager.exists(userId)) &#123;</span><br><span class="line">        return PackageManager.PERMISSION_DENIED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    synchronized (mPackages) &#123;</span><br><span class="line">        Object obj = mSettings.getUserIdLPr(UserHandle.getAppId(uid));</span><br><span class="line">        if (obj != null) &#123;</span><br><span class="line">            final SettingBase ps = (SettingBase) obj;</span><br><span class="line">            final PermissionsState permissionsState = ps.getPermissionsState();</span><br><span class="line">            if (permissionsState.hasPermission(permName, userId)) &#123;</span><br><span class="line">                return PackageManager.PERMISSION_GRANTED;</span><br><span class="line">            &#125;</span><br><span class="line">            // Special case: ACCESS_FINE_LOCATION permission includes ACCESS_COARSE_LOCATION</span><br><span class="line"> if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permName) &amp;&amp; permissionsState</span><br><span class="line">                    .hasPermission(Manifest.permission.ACCESS_FINE_LOCATION, userId)) &#123;</span><br><span class="line">                return PackageManager.PERMISSION_GRANTED;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            ArraySet&lt;String&gt; perms = mSystemPermissions.get(uid);</span><br><span class="line">            if (perms != null) &#123;</span><br><span class="line">                if (perms.contains(permName)) &#123;</span><br><span class="line">                    return PackageManager.PERMISSION_GRANTED;</span><br><span class="line">                &#125;</span><br><span class="line">                if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permName) &amp;&amp; perms</span><br><span class="line">                        .contains(Manifest.permission.ACCESS_FINE_LOCATION)) &#123;</span><br><span class="line">                    return PackageManager.PERMISSION_GRANTED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return PackageManager.PERMISSION_DENIED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里最重要的就是mSettings，所有的权限信息都通过mSettings来获取，但是mSettings是都做了什么操作呢？看下边的图：<br><img src="http://nunu03.github.io/2019/07/02/permissioncheck/setting.png" alt="setting"><br>Android6.0之前会吧所有的权限都放置在data/system/packages.xml文件中。Android6.0之后，分为运行时权限跟普通权限，普通权限还是放在data/system/packages.xml中，运行时权限防止在data/system/users/0/runtime-permissions.xml文件中。根据运行时是否动态申请去更新权限。而对于普通权限，一直都为true。<br>具体的实例信息如下：</p>
<p><strong><em>packages.xml</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;package name=&quot;com.permisison.naga&quot; codePath=&quot;/data/app/com.wuba.tinyhand-2&quot; nativeLibraryPath=&quot;/data/app/com.wuba.tinyhand-2/lib&quot; primaryCpuAbi=&quot;armeabi&quot; publicFlags=&quot;944291398&quot; privateFlags=&quot;0&quot; ft=&quot;166817e48c8&quot; it=&quot;16615425c49&quot; ut=&quot;166817e51fc&quot; version=&quot;2540&quot; userId=&quot;10141&quot;&gt;</span><br><span class="line">        &lt;sigs count=&quot;1&quot;&gt;</span><br><span class="line">            &lt;cert index=&quot;11&quot; /&gt;</span><br><span class="line">        &lt;/sigs&gt;</span><br><span class="line">        &lt;perms&gt;</span><br><span class="line">            &lt;item name=&quot;android.permission.WRITE_SETTINGS&quot; granted=&quot;true&quot; flags=&quot;0&quot; /&gt;</span><br><span class="line">            &lt;item name=&quot;android.permission.RESTART_PACKAGES&quot; granted=&quot;true&quot; flags=&quot;0&quot; /&gt;</span><br><span class="line">            &lt;item name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; granted=&quot;true&quot; flags=&quot;0&quot; /&gt;</span><br><span class="line">        &lt;/perms&gt;</span><br><span class="line">        &lt;proper-signing-keyset identifier=&quot;28&quot; /&gt;</span><br><span class="line">    &lt;/package&gt;</span><br></pre></td></tr></table></figure>

<p><strong><em>runtime-permissions.xml</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;pkg name=&quot;com.permisison.naga&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; granted=&quot;true&quot; flags=&quot;2&quot; /&gt;</span><br><span class="line">    &lt;item name=&quot;android.permission.READ_PHONE_STATE&quot; granted=&quot;true&quot; flags=&quot;2&quot; /&gt;</span><br><span class="line">    &lt;item name=&quot;android.permission.SEND_SMS&quot; granted=&quot;false&quot; flags=&quot;2&quot; /&gt;</span><br><span class="line">    &lt;item name=&quot;android.permission.PROCESS_OUTGOING_CALLS&quot; granted=&quot;true&quot; flags=&quot;2&quot; /&gt;</span><br><span class="line">    &lt;item name=&quot;android.permission.GET_ACCOUNTS&quot; granted=&quot;true&quot; flags=&quot;2&quot; /&gt;</span><br><span class="line">    &lt;item name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; granted=&quot;true&quot; flags=&quot;2&quot; /&gt;</span><br><span class="line">  &lt;/pkg&gt;</span><br></pre></td></tr></table></figure>

<p>结论：</p>
<p>1、checkSelfPermission会分别判断两个xml文件，packages.xml是普通权限，并且一直返回true，runtime-permissions.xml返回的是动态权限的状态，会根据当前设置返回0和-1，0是授予，-1是未被授予权限。</p>
<p>2、国内手机厂商的rom都是修改过了，并且增加了不少自定义的权限，所以这个方法获取的结果是不全的。</p>
<h4 id="PermissionChecker"><a href="#PermissionChecker" class="headerlink" title="PermissionChecker"></a>PermissionChecker</h4><p>直接看下关键代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public static int checkPermission(@NonNull Context context, @NonNull String permission,</span><br><span class="line">        int pid, int uid, String packageName) &#123;</span><br><span class="line">    if (context.checkPermission(permission, pid, uid) == PackageManager.PERMISSION_DENIED) &#123;</span><br><span class="line">        return PERMISSION_DENIED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String op = AppOpsManagerCompat.permissionToOp(permission);</span><br><span class="line">    if (op == null) &#123;</span><br><span class="line">        return PERMISSION_GRANTED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (packageName == null) &#123;</span><br><span class="line">        String[] packageNames = context.getPackageManager().getPackagesForUid(uid);</span><br><span class="line">        if (packageNames == null || packageNames.length &lt;= 0) &#123;</span><br><span class="line">            return PERMISSION_DENIED;</span><br><span class="line">        &#125;</span><br><span class="line">        packageName = packageNames[0];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (AppOpsManagerCompat.noteProxyOp(context, op, packageName)</span><br><span class="line">            != AppOpsManagerCompat.MODE_ALLOWED) &#123;</span><br><span class="line">        return PERMISSION_DENIED_APP_OP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return PERMISSION_GRANTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面有这么一句判断</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String op = AppOpsManagerCompat.permissionToOp(permission);</span><br><span class="line">if (op == null) &#123;</span><br><span class="line">        return PERMISSION_GRANTED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p> AppOpsManager返回为null的permission，都返回PERMISSION_GRANTED=0；这个判断就不准确了，如果一个运行时权限，没有在这个里面，那就永远为o了。即使设置了拒绝，也获取不到PERMISSION_DENIED=1。并且，小米手机设置好多10000以上都op自定义权限，肯定是获取不到，并且有些权限还没有permission。</p>
<p>结论：完全不可用。继续尝试</p>
<h3 id="AuthManager"><a href="#AuthManager" class="headerlink" title="AuthManager"></a>AuthManager</h3><p>通过上述一些列的验证，都是不可以采用的结论。最终我们再次回到note 4x的实现方案上来。由于再标题2的时候，我们只是调研了获取权限状态的方式，但是没有深入的调研底层实现。所以我们通过一些列跟踪，最终找到具体的实现地方在AuthManager这个app下。<br><img src="http://nunu03.github.io/2019/07/02/permissioncheck/authmanager.png" alt="authmanager"><br>结论：</p>
<p>1、由上图可以看出，小米手机完全自己封装了一层权限管理，它的权限状态都存储在了miui_ngen.db数据库里，并且通过PermissionManager管理并定义了权限的op和android.permission值。</p>
<p>2、既然update时完全操作了db和xml三个文件。那我们是不是可以用反射的方法实现呢？经过实现，利用反射checkOpNoThrow虽然可以获取到具体状态值，但是我们只能获取到当前的权限，不能获取到第三方app的权限，报<br>java.lang.SecurityException: uid 10141 does not have android.permission.UPDATE_APP_OPS_STATS异常。</p>
<p>3、开发过程中，发现某些运行权限op=59的权限不能改变，一致获取到的是0.即授权的状态。<br>所以利用反射我们也不能实现我们的需求，继续。</p>
<h3 id="runtime-permissions-xml与appops-xml"><a href="#runtime-permissions-xml与appops-xml" class="headerlink" title="runtime-permissions.xml与appops.xml"></a>runtime-permissions.xml与appops.xml</h3><p>经过调研后发现，当我们在修改权限的状态值时，不仅appops.xml里面的状态值在该比那，而且运行权限runtime-permissions.xml的值也在改变，那我们是不是可以比较两个文件的内容进行获取状态值呢。 首先，我们需要读取文件，但是我们没有读取文件权限，我们需要copy到sdcard进行解析。解析过程如下图：</p>
<p><img src="http://nunu03.github.io/2019/07/02/permissioncheck/verify.png" alt="verify"></p>
<h3 id="miui-ngen-db"><a href="#miui-ngen-db" class="headerlink" title="miui_ngen.db"></a>miui_ngen.db</h3><p>miui_ngen.db是什么？我们都知道是一个数据库文件，而且这个是miui的权限状态管理文件。任何的App权限状态都一一对应的存在了这个文件里。从而由上述6种的操作，我们受到了一定的启发，既然能够拿到xml文件，那我们是不是也可以直接拿到这个db文件，然后直接读取db，获取状态信息呢？经过尝试，好吧，权限检测的最终方案决定下来了，我们完全可以直接读取这个db文件，获取到准确的，和miui权限管理中心一一对应，完全匹配的权限状态。</p>
<p><strong>总结：通过以上步骤的实现过程，我们发现由于国内厂商对rom的定制，可能完全修改或者封装了权限的实现和检测机制，我们通过一步步的测试和添坑，最终还是回到了手机原本自身的检测机制上来，并且这种方式是最准确的方式。</strong></p>
<h2 id="对权限的处理场景"><a href="#对权限的处理场景" class="headerlink" title="对权限的处理场景"></a>对权限的处理场景</h2><p>如果设备运行的是 Android 6.0（API 级别 23）或更高版本，并且应用的 targetSdkVersion 是 23 或更高版本，则应用在运行时向用户请求权限。用户可随时调用权限，因此应用在每次运行时均需检查自身是否具备所需的权限。</p>
<p>如果设备运行的是 Android 5.1（API 级别 22）或更低版本，并且应用的 targetSdkVersion 是 22 或更低版本，则系统会在用户安装应用时要求用户授予权限。如果将新权限添加到更新的应用版本，系统会在用户更新应用时要求授予该权限。用户一旦安装应用，他们撤销权限的唯一方式是卸载应用。</p>
<p>如果设备运行的是 Android 6.0（API 级别 23）或更高版本，并且应用的 targetSdkVersion 是 22 或更低版本， 此时Android系统会把你申请的全部权限都给你 。 用户依然可以进入App的设置界面把权限关闭 ！</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.android.com/about/versions/marshmallow/android-6.0-changes?hl=zh-cn#behavior-runtime-permissions" target="_blank" rel="noopener">https://developer.android.com/about/versions/marshmallow/android-6.0-changes?hl=zh-cn#behavior-runtime-permissions</a><br><a href="https://blog.csdn.net/lewif/article/details/49124757" target="_blank" rel="noopener">https://blog.csdn.net/lewif/article/details/49124757</a><br><a href="https://blog.csdn.net/happylishang/article/details/53813779" target="_blank" rel="noopener">https://blog.csdn.net/happylishang/article/details/53813779</a><br><a href="https://mp.weixin.qq.com/s/OQRHEufCUXBA3d3DMZXMKQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/OQRHEufCUXBA3d3DMZXMKQ</a><br><a href="https://developer.android.com/reference/android/support/v4/content/ContextCompat#checkSelfPermission(android.content.Context,%20java.lang.String)" target="_blank" rel="noopener">https://developer.android.com/reference/android/support/v4/content/ContextCompat#checkSelfPermission(android.content.Context,%20java.lang.String)</a><br><a href="https://developer.android.com/reference/android/content/pm/PackageManager#PERMISSION_DENIED" target="_blank" rel="noopener">https://developer.android.com/reference/android/content/pm/PackageManager#PERMISSION_DENIED</a><br><a href="https://www.jianshu.com/p/0ddd129dd32b" target="_blank" rel="noopener">https://www.jianshu.com/p/0ddd129dd32b</a><br><a href="https://blog.csdn.net/happylishang/article/details/78222788" target="_blank" rel="noopener">https://blog.csdn.net/happylishang/article/details/78222788</a><br><a href="https://www.cnblogs.com/neo-java/p/7117482.html" target="_blank" rel="noopener">https://www.cnblogs.com/neo-java/p/7117482.html</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin新手使用笔记]]></title>
      <url>/2019/07/02/kotlinnotes/</url>
      <content type="html"><![CDATA[<h2 id="const关键字"><a href="#const关键字" class="headerlink" title="const关键字"></a>const关键字</h2><p>只读属性使用const关键字之后将没有get方法，举个例子<br>在kotlin文件中，写两个包级属性，一个是const，一个不是const</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const val i = 1</span><br><span class="line">val j = &quot;A&quot;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>使用java代码访问，访问方式是不同的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class TestConst &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int i = ConstKt.i;</span><br><span class="line">        ConstKt.getJ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一种是使用get方法访问，一种是直接使用类访问。说明const关键字实际上相当于java的static final。<br>需要注意的是，Const只能是kotlin的string和基本类型。<br>其实在object中const相当于@JvmField注解，比如下面的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@JvmField</span><br><span class="line">val c = 3</span><br></pre></td></tr></table></figure>

<p>就和</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const val c = 3</span><br></pre></td></tr></table></figure>

<p>效果一样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@JvmField</span><br><span class="line">val TAGS = WeixinHook.TAG + &quot;.Test&quot;</span><br><span class="line">const val TAGSG = WeixinHook.TAG + &quot;.Test&quot;</span><br><span class="line">    </span><br><span class="line">@NotNull</span><br><span class="line">@JvmField</span><br><span class="line">public static final String TAGS = &quot;hotB.wechat.Test&quot;;</span><br><span class="line">@NotNull</span><br><span class="line">public static final String TAGSG = &quot;hotB.wechat.Test&quot;;</span><br></pre></td></tr></table></figure>

<p>在class中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private const val TAG = XLog.hotPanel + &quot;DeviceUtil&quot;</span><br><span class="line">class DeviceUtil&#123;&#125;</span><br><span class="line"></span><br><span class="line">生成了另一个文件存储const</span><br><span class="line">public final class DeviceUtilKt &#123;</span><br><span class="line">    /* renamed from: MB */</span><br><span class="line">    private static final long f14MB = 1048576;</span><br><span class="line">    private static final String TAG = &quot;hotPanel.DeviceUtil&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是kotlin中const关键字的本质。<br><a href="https://blog.csdn.net/ilovewqf/article/details/78826373" target="_blank" rel="noopener">原文点击</a></p>
<h2 id="静态内部类，常量，三元运算符"><a href="#静态内部类，常量，三元运算符" class="headerlink" title="静态内部类，常量，三元运算符"></a>静态内部类，常量，三元运算符</h2><p>静态内部变量和常量定义方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">companion object &#123;</span><br><span class="line">        private const val MSG_UPDATE_PROGRESS = 1</span><br><span class="line">        private const val MSG_UPDATE_TIME= 1000</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>静态内部类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Parent&#123;</span><br><span class="line">    class Child //默认就是 java的 public static</span><br><span class="line">&#125;</span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    val inner = Parent.Child()</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>非静态内部类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Parent&#123;</span><br><span class="line">    //非静态内部类声明</span><br><span class="line">    inner class Child</span><br><span class="line">&#125;</span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    val inner = Parent().Child()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类访问外部持有类的this</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Parent&#123;</span><br><span class="line">    val a:Int = 0</span><br><span class="line">    inner class Child&#123;</span><br><span class="line">        val a:Int = 5</span><br><span class="line">        fun hello()&#123;</span><br><span class="line">            println(this@Parent.a)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    val inner = Parent().Child()</span><br><span class="line">    inner.hello()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>三元运算符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> //Java写法</span><br><span class="line">int size=list!=null?list.size:0</span><br><span class="line">//kotlin写法</span><br><span class="line">val size=if(list!=null) list.size() else 0</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_34032621/article/details/86817626" target="_blank" rel="noopener">原文点击</a></p>
<h2 id="readLine赋值为空"><a href="#readLine赋值为空" class="headerlink" title="readLine赋值为空"></a>readLine赋值为空</h2><p>Java中有一个判断是 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">if（（str=bufferedReader.readLine()）!= null）</span><br></pre></td></tr></table></figure>

<p>这句话到了kotlin转不过来,java经过强制转换成kotlin，可能最初我们是这么写的 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str=bufferedReader.readLine() </span><br><span class="line">while(str != null)&#123; </span><br><span class="line">执行代码 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可是出oom了，问题在哪呢？不说了。最后</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var line: String</span><br><span class="line">while (true) &#123;</span><br><span class="line">    line = bufferedReader.readLine() ?: break</span><br><span class="line">    buffer.append(line)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>val:val属性只提供getter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val usbState: UsbState</span><br><span class="line">    get() = sUsbState.copy()</span><br><span class="line">编译后的：</span><br><span class="line">@NotNull</span><br><span class="line">public final UsbState getUsbState() &#123;</span><br><span class="line">    return UsbMonitor.sUsbState.copy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>var：默认生成getter，setter方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var usbConnected: Boolean = false</span><br><span class="line">public final boolean getUsbConnected() &#123;</span><br><span class="line">    return this.usbConnected;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final void setUsbConnected(boolean &lt;set-?&gt;) &#123;</span><br><span class="line">    this.usbConnected = &lt;set-?&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象表达式-amp-amp-对象声明-amp-amp-伴生对象"><a href="#对象表达式-amp-amp-对象声明-amp-amp-伴生对象" class="headerlink" title="对象表达式 &amp;&amp; 对象声明 &amp;&amp; 伴生对象"></a>对象表达式 &amp;&amp; 对象声明 &amp;&amp; 伴生对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">var btn: Button = findViewById(R.id.btn)</span><br><span class="line">// 对象表达式实现匿名内部类</span><br><span class="line">btn.setOnClickListener(object: View.OnClickListener &#123;</span><br><span class="line">    override fun onClick(v: View?) &#123;</span><br><span class="line">        text.setText(&quot;$&#123;text.text&#125; $&#123;++clickTime&#125;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// OnClickListener是函数式接口，可使用Lambda表达式</span><br><span class="line">btn.setOnClickListener &#123; view -&gt;</span><br><span class="line">    text.setText(&quot;$&#123;text.text&#125; $&#123;++clickTime&#125;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">// 对象声明---单例</span><br><span class="line">object FoodManager &#123;</span><br><span class="line">    var foods: MutableList&lt;String&gt;</span><br><span class="line">    init&#123;</span><br><span class="line">        foods = mutableListOf&lt;String&gt;()</span><br><span class="line">        // 初始化食物池</span><br><span class="line">        for (i in 1..9) &#123;</span><br><span class="line">            foods.add(&quot;food$&#123;i&#125;&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var foods = FoodManager.foods // 使用对象声明</span><br><span class="line">// 伴生对象---静态成员</span><br><span class="line">interface Outputable&#123;</span><br><span class="line">    fun output(msg: String)</span><br><span class="line">&#125;</span><br><span class="line">class MyClass&#123;</span><br><span class="line">    // 定义的MyClass的伴生对象</span><br><span class="line">    companion object: Outputable&#123;</span><br><span class="line">        val name = ”name属性值” </span><br><span class="line">        </span><br><span class="line">        //重写父接口中的抽象方法</span><br><span class="line">        override fun output(msg: String) &#123;</span><br><span class="line">            for(i in 1..6)&#123;</span><br><span class="line">                println (”&lt;h$(i&#125;&gt;$&#123; msg&#125;&lt;/h$&#123;i&#125;&gt;”)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">    // 调用伴生对象里的方法与属性，与调用静态成员一样</span><br><span class="line">    MyClass.output(&quot;fkit.org&quot;)</span><br><span class="line">    println(MyClass.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="对象声明定义常量"><a href="#对象声明定义常量" class="headerlink" title="对象声明定义常量"></a>对象声明定义常量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">object NetUtils &#123;</span><br><span class="line"> /**</span><br><span class="line">     * 移动</span><br><span class="line">     */</span><br><span class="line">    const val PROVIDER_TYPE_MOVE = 1</span><br><span class="line">    /**</span><br><span class="line">     * 联通</span><br><span class="line">     */</span><br><span class="line">    const val PROVIDER_TYPE_UNICOM = 2</span><br><span class="line">    /**</span><br><span class="line">     * 电信</span><br><span class="line">     */</span><br><span class="line">    const val PROVIDER_TYPE_TELECOM = 3</span><br><span class="line"></span><br><span class="line">    val NET_TYPE_MOVE = &quot;10086&quot;</span><br><span class="line">    val NET_TYPE_UNICOM = &quot;10010&quot;</span><br><span class="line">    val NET_TYPE_TELECOM = &quot;10001&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于对象声明定义的数据单例，所以一般调用(.java)都会用Class.INSTANCE.getXXXX，(kotlin)会用Class.XXXX，但是如果对象中声明的是const常量，则只能用Class.XXXX调用。<br>举例说明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">switch (NetUtils.INSTANCE.providerType(WxVersions.CURRENT_APPLICATION)) &#123;</span><br><span class="line">            case NetUtils.PROVIDER_TYPE_MOVE:</span><br><span class="line">                destinationAddress = NetUtils.INSTANCE.getNET_TYPE_MOVE();</span><br><span class="line">                break;</span><br><span class="line">            case NetUtils.PROVIDER_TYPE_UNICOM:</span><br><span class="line">                destinationAddress = NetUtils.INSTANCE.getNET_TYPE_UNICOM();</span><br><span class="line">                break;</span><br><span class="line">            case NetUtils.PROVIDER_TYPE_TELECOM:</span><br><span class="line">                destinationAddress = NetUtils.INSTANCE.getNET_TYPE_TELECOM();</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                destinationAddress = null;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>反编译后的NetUtils</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public final class NetUtils &#123;</span><br><span class="line">    public static final NetUtils INSTANCE = new NetUtils();</span><br><span class="line">    @NotNull</span><br><span class="line">    private static final String NET_TYPE_MOVE = NET_TYPE_MOVE;</span><br><span class="line">    @NotNull</span><br><span class="line">    private static final String NET_TYPE_TELECOM = NET_TYPE_TELECOM;</span><br><span class="line">    @NotNull</span><br><span class="line">    private static final String NET_TYPE_UNICOM = NET_TYPE_UNICOM;</span><br><span class="line">    public static final int PROVIDER_TYPE_MOVE = 1;</span><br><span class="line">    public static final int PROVIDER_TYPE_TELECOM = 3;</span><br><span class="line">    public static final int PROVIDER_TYPE_UNICOM = 2;</span><br><span class="line"></span><br><span class="line">    private NetUtils() &#123;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如果定义的常量没有加const，则在调用的时候要用Class.INSTANCE.getXXXX，但是，这个时候switch，会报constant expression requierd异常。</p>
<p><strong>注意：伴生对象常量定义方式：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class MicroMsg &#123;</span><br><span class="line">	companion object &#123;</span><br><span class="line">		val DB_NAME = &quot;EnMicroMsg.db&quot;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">而下面这样写法拿不到DB_NAME</span><br><span class="line">class MicroMsg &#123;</span><br><span class="line">	val DB_NAME = &quot;EnMicroMsg.db&quot;</span><br><span class="line">	companion object &#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>伴生对象如何生成public static final</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class MicroMsg &#123;</span><br><span class="line">	companion object &#123;</span><br><span class="line">		 val TYPE_IMG = 1</span><br><span class="line">        val TYPE_FILE = 2</span><br><span class="line">        const val TYPE_VOICE = 3</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">反编译后</span><br><span class="line">private static final int TYPE_FILE = 2;</span><br><span class="line">private static final int TYPE_IMG = 1;</span><br><span class="line">public static final int TYPE_VOICE = 3;</span><br></pre></td></tr></table></figure>

<h2 id="constructor构造器"><a href="#constructor构造器" class="headerlink" title="constructor构造器"></a>constructor构造器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.主构造器</span><br><span class="line">class MultiTask&lt;TaskData, Result&gt; constructor(private val mTaskItem: TaskItem, private val mRequest: TaskData, private val mTaskCount: Int, private val mDelay: Long = 500) </span><br><span class="line"></span><br><span class="line">2.主构造器可以省略constructor</span><br><span class="line">class MultiTask&lt;TaskData, Result&gt; (private val mTaskItem: TaskItem, private val mRequest: TaskData, private val mTaskCount: Int, private val mDelay: Long = 500) </span><br><span class="line"></span><br><span class="line">3.主构造器如果有@JvmOverloads则不可以省略constructor</span><br><span class="line">class MultiTask&lt;TaskData, Result&gt; @JvmOverloads constructor(private val mTaskItem: TaskItem, private val mRequest: TaskData, private val mTaskCount: Int, private val mDelay: Long = 500) </span><br><span class="line"></span><br><span class="line">4.使用@JvmOverloads注解的主构造器，不可以再有次构造器</span><br><span class="line">	constructor(taskItem: TaskItem,mRequest: TaskData,mTaskCount: Int): this(taskItem, mRequest,mTaskCount,300) &#123;</span><br><span class="line">&#125;</span><br><span class="line">异常，hava the same JVM signature.</span><br></pre></td></tr></table></figure>

<p><strong>构造器几种使用：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">空构造器</span><br><span class="line">class OuterConstructor&#123;&#125;</span><br><span class="line"></span><br><span class="line">私有构造器</span><br><span class="line">class OuterConstructor private constructor(str:String, ins:Int)&#123;&#125;</span><br><span class="line"></span><br><span class="line">私有构造器+次构造器（可调）</span><br><span class="line">class OuterConstructor private constructor(str:String, ins:Int)&#123;</span><br><span class="line">    var s1 = &quot;123&quot;</span><br><span class="line">    init&#123;</span><br><span class="line">        this.s1 = str</span><br><span class="line">    &#125;</span><br><span class="line">    constructor(str:String):this(str,8)</span><br><span class="line">&#125;</span><br><span class="line">主构造器</span><br><span class="line">class OuterConstructor constructor(str:String, ins:Int)&#123;</span><br><span class="line">    var s1 = &quot;123&quot;</span><br><span class="line">    init&#123;</span><br><span class="line">        this.s1 = str</span><br><span class="line">    &#125;</span><br><span class="line">    constructor(str:String):this(str,8)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">主构造器省略初始化init</span><br><span class="line">class OuterConstructor &#123;</span><br><span class="line">    var s1 = &quot;123&quot;</span><br><span class="line">    init&#123;</span><br><span class="line">        this.s1 = &quot;qdf&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">主构造器初始化init</span><br><span class="line">class OuterConstructor constructor(str:String, ins:Int)&#123;</span><br><span class="line">    var s1 = &quot;123&quot;</span><br><span class="line">    init&#123;</span><br><span class="line">        this.s1 = str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="JvmOverloads作用"><a href="#JvmOverloads作用" class="headerlink" title="@JvmOverloads作用"></a>@JvmOverloads作用</h3><p>在有默认参数值的方法中使用@JvmOverloads注解，则Kotlin就会暴露多个重载方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@JvmOverloads fun f(a: String, b: Int=0, c:String=&quot;abc&quot;)&#123;</span><br><span class="line">&#125;</span><br><span class="line">反编译后：</span><br><span class="line">void f(String a)</span><br><span class="line">void f(String a, int b)</span><br><span class="line">void f(String a, int b, String c)</span><br></pre></td></tr></table></figure>

<p>所以@JvmOverloads不仅仅用于构造方法。</p>
<h3 id="constructor中参数指定val-var和没有制定的区别"><a href="#constructor中参数指定val-var和没有制定的区别" class="headerlink" title="constructor中参数指定val,var和没有制定的区别"></a>constructor中参数指定val,var和没有制定的区别</h3><h4 id="不指定"><a href="#不指定" class="headerlink" title="不指定"></a>不指定</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class OuterConstructor constructor(mHookConfig: HookConfig) </span><br><span class="line">反编译后</span><br><span class="line">public AvatarServiceImplKT(@NotNull HookConfig mHookConfig) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="val"><a href="#val" class="headerlink" title="val"></a>val</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class OuterConstructor constructor(val mHookConfig: HookConfig) </span><br><span class="line">反编译后</span><br><span class="line">private final HookConfig mHookConfig;</span><br><span class="line">public AvatarServiceImplKT(@NotNull HookConfig mHookConfig) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="var"><a href="#var" class="headerlink" title="var"></a>var</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class OuterConstructor constructor(var mHookConfig: HookConfig) </span><br><span class="line">反编译后</span><br><span class="line">private HookConfig mHookConfig;</span><br><span class="line">public AvatarServiceImplKT(@NotNull HookConfig mHookConfig) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="vararg可变参数"><a href="#vararg可变参数" class="headerlink" title="vararg可变参数"></a>vararg可变参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fun print(vararg msgs: String) &#123;</span><br><span class="line">    for (msg in msgs) &#123;</span><br><span class="line">    	println(msg)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun LogPrinters()&#123;</span><br><span class="line">	print(&quot;11&quot;,&quot;22&quot;,&quot;33&quot;,&quot;44&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是如果是下面这样调用是不可以的，会报参数匹配异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val array = arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;)</span><br><span class="line">print(array)</span><br></pre></td></tr></table></figure>

<p>如果想调用，需要使用*操作符：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(*array)</span><br></pre></td></tr></table></figure>

<p>所以我们调用带有可变参数的方法时，只能传递离散的参数值，直接传递数组会报语法错误。但是当我们手头上就是一个数组，要想传递，就需要借助运算符*(spread operator)：相当于将数组分散成一个个的个体再传入进去。</p>
<h2 id="var-get-set-xxx-方法"><a href="#var-get-set-xxx-方法" class="headerlink" title="var get() set(xxx)方法"></a>var get() set(xxx)方法</h2><p>1.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">override var name: String=&quot;ninhao&quot;</span><br><span class="line">	get() = field</span><br><span class="line">	set(value) &#123;</span><br><span class="line">		field=value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">XLog.e(&quot;------name1:&quot;,name)</span><br><span class="line">name = &quot;henhao&quot;</span><br><span class="line">XLog.e(&quot;------name2:&quot;,name)</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ninhao</span><br><span class="line">henhao</span><br></pre></td></tr></table></figure>

<p>注意：var name: String=”ninhao”，必须初始化。<br>2.可以通过fun get() 和fun set(XXX)实现。</p>
<p>3.<br>错误写法：死循环</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var name: String</span><br><span class="line">	get() = name</span><br><span class="line">	set(value) &#123;</span><br><span class="line">	name=&quot;afff&quot;</span><br><span class="line">&#125;</span><br><span class="line">反编译后</span><br><span class="line"></span><br><span class="line">@NotNull</span><br><span class="line">public String getName() &#123;</span><br><span class="line">    return getName();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void setName(@NotNull String value) &#123;</span><br><span class="line">    Intrinsics.checkParameterIsNotNull(value, UserInfo.COLUMN_value);</span><br><span class="line">    setName(&quot;afff&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/kotlin/kotlin-class-object.html" target="_blank" rel="noopener">详细注解链接</a></p>
<h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var sb = StringBuilder()</span><br><span class="line">sb.append(&quot;111,&quot;).append(&quot;222,&quot;).append(&quot;333,&quot;).append(&quot;,&quot;).append(&quot;aaa,&quot;).append(&quot;bbb,&quot;).append(&quot;ccc,&quot;).append(&quot;&quot;)</span><br><span class="line">val strs = sb.toString()</span><br><span class="line">val splits = strs.split(&quot;,&quot;.toRegex()).dropWhile &#123; !it.isEmpty() &#125;.toTypedArray()</span><br><span class="line">for(str in splits)&#123;</span><br><span class="line">	XLog.e(&quot;-------split:&quot;,str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.<strong>dropWhile</strong> 返回从第一项起，去掉满足条件的元素，直到不满足条件的一项为止；<br>it.isEmpty():</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[-------split:][main]</span><br><span class="line">[-------split:][main]aaa</span><br><span class="line">[-------split:][main]bbb</span><br><span class="line">[-------split:][main]ccc</span><br><span class="line">[-------split:][main]</span><br></pre></td></tr></table></figure>

<p>!it.isEmpty():</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[-------split:][main]111</span><br><span class="line">[-------split:][main]222</span><br><span class="line">[-------split:][main]333</span><br><span class="line">[-------split:][main]</span><br><span class="line">[-------split:][main]aaa</span><br><span class="line">[-------split:][main]bbb</span><br><span class="line">[-------split:][main]ccc</span><br><span class="line">[-------split:][main]</span><br></pre></td></tr></table></figure>

<p>2.<strong>dropLastWhile</strong> 返回从最后一项起，去掉满足条件的元素，直到不满足条件的一项为止；<br>it.isEmpty():</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[-------split:][main]111</span><br><span class="line">[-------split:][main]222</span><br><span class="line">[-------split:][main]333</span><br><span class="line">[-------split:][main]</span><br><span class="line">[-------split:][main]aaa</span><br><span class="line">[-------split:][main]bbb</span><br><span class="line">[-------split:][main]ccc</span><br></pre></td></tr></table></figure>

<p>!it.isEmpty():</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[-------split:][main]111</span><br><span class="line">[-------split:][main]222</span><br><span class="line">[-------split:][main]333</span><br><span class="line">[-------split:][main]</span><br><span class="line">[-------split:][main]aaa</span><br><span class="line">[-------split:][main]bbb</span><br><span class="line">[-------split:][main]ccc</span><br><span class="line">[-------split:][main]</span><br></pre></td></tr></table></figure>

<p>3.<strong>drop</strong> 返回去掉前n个元素后的列表；<br>drop(4)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[-------split:][main]aaa</span><br><span class="line">[-------split:][main]bbb</span><br><span class="line">[-------split:][main]ccc</span><br><span class="line">[-------split:][main]</span><br></pre></td></tr></table></figure>

<p>4.<strong>filter &amp; slice &amp; take</strong></p>
<p>filter–过滤掉所有不满足条件的元素；<br>filterNot–过滤掉所有满足条件的元素；<br>filterNotNull–过滤掉所有值为null的元素；</p>
<p>slice–过滤掉非指定下标的元素，即保留下标对应的元素过滤List中指定下标的元素（比如这里只保留下标为1，3，4的元素），当过滤list中有元素值大于目标List大小时会出现异常；</p>
<p>take–返回从第一个开始的n个元素；<br>takeLast–返回从最后一个开始的n个元素；<br>takeWhile–返回不满足条件的下标前面的所有元素的集合；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filter &#123; !it.isEmpty() &#125;</span><br><span class="line"></span><br><span class="line">[-------split:][main]111</span><br><span class="line">[-------split:][main]222</span><br><span class="line">[-------split:][main]333</span><br><span class="line">[-------split:][main]aaa</span><br><span class="line">[-------split:][main]bbb</span><br><span class="line">[-------split:][main]ccc</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/tgyf/p/6892551.html?utm_source=itdadao&utm_medium=referral" target="_blank" rel="noopener">参考链接点击</a></p>
<h2 id="显式转换-amp-强制转换"><a href="#显式转换-amp-强制转换" class="headerlink" title="显式转换&amp;强制转换"></a>显式转换&amp;强制转换</h2><p>每个数字类型支持如下的转换:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; toByte(): Byte</span><br><span class="line">&gt; toShort(): Short</span><br><span class="line">&gt; toInt(): Int</span><br><span class="line">&gt; toLong(): Long</span><br><span class="line">&gt; toFloat(): Float</span><br><span class="line">&gt; toDouble(): Double</span><br><span class="line">&gt; toChar(): Char</span><br></pre></td></tr></table></figure>

<p>强制转换<br>xxx as 类：强制转换，可能崩溃</p>
<p>xxx as? 类：安全的强制转换，转换失败返回null</p>
<p><strong>注意：数字类型的转换也可以使用as ，编译时不报错，但运行时会报错。</strong></p>
<h2 id="Lambda-argument-should-be-moved-out-of-parentheses"><a href="#Lambda-argument-should-be-moved-out-of-parentheses" class="headerlink" title="Lambda argument should be moved out of parentheses"></a>Lambda argument should be moved out of parentheses</h2><p>解决方式：option+enter；</p>
<h2 id="return-标签"><a href="#return-标签" class="headerlink" title="return@标签"></a>return@标签</h2><p>跳转到指定的位置，标签的写法很简单，只需要名字之后加@符号，要用的时候@名字就好，一般在lambda表达式中可能会用到。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">fun print(vararg msgs: String) &#123;</span><br><span class="line">        Async.io &#123;</span><br><span class="line">            for (msg in msgs) &#123;</span><br><span class="line">                XLog.e(&quot;-------print:&quot;,msg)</span><br><span class="line">            &#125;</span><br><span class="line">            return@io</span><br><span class="line">            XLog.e(&quot;-------print:&quot;,&quot;8&quot;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        XLog.e(&quot;-------print:&quot;,&quot;9&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[-------print:][main]9</span><br><span class="line">[-------print:][IOExecutor#1]a</span><br><span class="line">[-------print:][IOExecutor#1]b</span><br><span class="line">[-------print:][IOExecutor#1]c</span><br><span class="line">[-------print:][IOExecutor#1]d</span><br></pre></td></tr></table></figure>

<h2 id="for循环使用方法"><a href="#for循环使用方法" class="headerlink" title="for循环使用方法"></a>for循环使用方法</h2><p>在Kotlin中想遍历1-100的数值可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (index in 1..10)&#123;</span><br><span class="line">	print(index)//会输出1..10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样写是正序遍历，如果想倒序遍历就该使用标准库中定义的downTo()函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (index in 10 downTo 1)&#123;</span><br><span class="line">	print(index)//会输出10..1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>想不使用1作为遍历的步长，可以使用step()函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (index in 1..100 step 2)&#123;</span><br><span class="line">	print(index)//会输出1..3..5......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>要创建一个不包含末尾元素的区间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (index in 1 until 10)&#123;</span><br><span class="line">	println(index)//输出1..9</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历一个数组/列表，想同时取出下标和元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val array = arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">for ((index,e) in array.withIndex())&#123;</span><br><span class="line">	println(&quot;下标=$index----元素=$e&quot;)</span><br><span class="line">&#125;</span><br><span class="line">[-----index:][main]下标=0----元素=a</span><br><span class="line">[-----index:][main]下标=1----元素=b</span><br><span class="line">[-----index:][main]下标=2----元素=c</span><br></pre></td></tr></table></figure>

<p>遍历一个数组/列表，只取出下标:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val array = arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">for (index in array.indices)&#123;</span><br><span class="line">	println(&quot;index=$index&quot;)//输出0，1，2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历取元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val array = arrayOf(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)</span><br><span class="line">for (element in array)&#123;</span><br><span class="line">	println(&quot;element=$element&quot;)//输出a,b,c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="class"><a href="#class" class="headerlink" title=".class"></a>.class</h2><p>Service::class.java的语法展现了如何获取java.lang.Class对应的Kotlin类，这和Java中的Service.Class是完全等同的.</p>
<h2 id="java通配符-amp-kotlin声明处型变"><a href="#java通配符-amp-kotlin声明处型变" class="headerlink" title="java通配符&amp;kotlin声明处型变"></a>java通配符&amp;kotlin声明处型变</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a><strong>java</strong></h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; void copy(List&lt;? super T&gt; dest, List&lt;? extends T&gt; src) &#123;</span><br><span class="line">      // 校验略</span><br><span class="line">      ListIterator&lt;? super T&gt; di = dest.listIterator();</span><br><span class="line">      ListIterator&lt;? extends T&gt; si = src.listIterator();</span><br><span class="line">      while (si.hasNext()) &#123;</span><br><span class="line">          /**</span><br><span class="line">           * 编译时异常</span><br><span class="line">           * Incompatible types.不兼容类型；</span><br><span class="line">           * Required:T;</span><br><span class="line">           * Found:Capture&lt;? super T&gt;</span><br><span class="line">           */</span><br><span class="line">          T elementD =di.next();</span><br><span class="line"></span><br><span class="line">          T element = si.next(); //src extent 生产者 作为方法返回值类型是安全的</span><br><span class="line">          di.set(element); // dest super 消费者 作为方法参数类型是安全的</span><br><span class="line"></span><br><span class="line">          /**</span><br><span class="line">           * 编译时异常</span><br><span class="line">           * set(&lt;? extends T&gt;) in ListIterator cannot be applied.</span><br><span class="line">           * to (T)</span><br><span class="line">           */</span><br><span class="line">          si.set(elementD);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="kotlin"><a href="#kotlin" class="headerlink" title="kotlin:"></a><strong>kotlin:</strong></h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">abstract class Supplier&lt;out T&gt; &#123;</span><br><span class="line">       abstract fun get(): T</span><br><span class="line">       /**</span><br><span class="line">        * 编译期错误：</span><br><span class="line">        * Type parameter T is declared as &apos;out&apos; but occurs in &apos;in&apos; position in type T</span><br><span class="line">        */</span><br><span class="line">       abstract fun set(t: T)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   abstract class Customer&lt;in T&gt; &#123;</span><br><span class="line">       abstract fun set(t: T)</span><br><span class="line">       /**</span><br><span class="line">        * 编译期错误：</span><br><span class="line">        * Type parameter T is declared as &apos;in&apos; but occurs in &apos;out&apos; position in type T</span><br><span class="line">        */</span><br><span class="line">       abstract fun get(): T</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-List-lt-extends-T-gt-协变：-out"><a href="#1-List-lt-extends-T-gt-协变：-out" class="headerlink" title="1.List&lt;? extends T&gt;协变：== out"></a>1.List&lt;? extends T&gt;协变：== out</h3><p> 在si.set(elementD)中， elementD的类型是T，所以我们可以set（T t），以及一切参数中含有 T 的方法（称为消费者方法），T类型或者从T继承的类型都可以被set，但是因为可以set不同的类型，所以这些方法可能会破坏类型安全，所以编译器限制这些方法的调用。</p>
<p> 举kotlin例说明：<br> 有一方法</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun generate(args : Array&lt;Any&gt;)&#123;</span><br><span class="line">//todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 我们调用它：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val args : Array&lt;String&gt; = arrayOf()</span><br><span class="line">generate(args)</span><br></pre></td></tr></table></figure>

<p> 这个时候会提示异常（类型不匹配）：type mismitch，为了解决这个问题，我们只需要修改一下调用方法，使用型变out即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun generate(args : Array&lt;out Any&gt;)&#123;</span><br><span class="line"> //todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="List-lt-super-T-gt-逆变：-in"><a href="#List-lt-super-T-gt-逆变：-in" class="headerlink" title="List&lt;? super T&gt;逆变：== in"></a>List&lt;? super T&gt;逆变：== in</h3><p> 同协变正好相反，在T elementD =di.next();中，因为di的类型是&lt;? super T&gt;，所以我们通过di.next()获取的类型可能T,也可能是从T继承的类型，从而我们不能确定next的类型。注意，这次拒绝的理由跟协变中是不一样的。get方法并不会破坏泛型类的类型安全，主要原因在于我们不能确定get的返回类型。<br> <a href="https://www.jianshu.com/p/0c2948f7e656" target="_blank" rel="noopener">参考链接1</a><br> <a href="https://www.jianshu.com/p/ecacb7af79eb?from=timeline&isappinstalled=0" target="_blank" rel="noopener">参考链接2</a></p>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="?: ?. !!操作符"></a>?: ?. !!操作符</h2><h3 id="If-not-null"><a href="#If-not-null" class="headerlink" title="?. == If not null"></a>?. == If not null</h3><p>?.就是当前面的变量!= nuil 时正常调用，如果为null就为null;并且?.可以连续使用。例如user?.userName?.length</p>
<h3 id="npe"><a href="#npe" class="headerlink" title="!!! == npe"></a>!!! == npe</h3><p>!!,加在变量名后，就是当变量为null时，抛出空指针异常;</p>
<h3 id="if-null"><a href="#if-null" class="headerlink" title="?: == if null"></a>?: == if null</h3><p>?: 仅仅在左边的表达式结果为null时才会计算 ?: 后面的表达式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val map = XXXXX ?: return</span><br><span class="line">等同于</span><br><span class="line">val map = XXXXX</span><br><span class="line">if(map == null)&#123;</span><br><span class="line">	return</span><br><span class="line">&#125;</span><br><span class="line">但是if会有://Replace &apos;if&apos; with elvis operator</span><br></pre></td></tr></table></figure>

<h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Returns a string representation of the object. Can be called with a null receiver, in which case</span><br><span class="line"> * it returns the string &quot;null&quot;.</span><br><span class="line"> */</span><br><span class="line">public fun Any?.toString(): String</span><br></pre></td></tr></table></figure>

<p><strong>疑问点：</strong><br>null.toString()<br>反编译<br>String.valueOf(null)</p>
<h2 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class XXXXKT:Serializable&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>Cannot access ‘Serializable’:it is internal in ‘kotlin.io’</p>
<p>解决：import java.io.Serializable</p>
<h2 id="Suppress-“UNCHECKED-CAST”"><a href="#Suppress-“UNCHECKED-CAST”" class="headerlink" title="@Suppress(“UNCHECKED_CAST”)"></a>@Suppress(“UNCHECKED_CAST”)</h2><p>当使用 as Array<string>强转时可能会出现Unchecked cast: Any! to Array<any> 警告。解决方法就是在强转代码前加@Suppress(“UNCHECKED_CAST”)。<br>备注：@SuppressWarnings(“unchecked”)使用时机呢？</any></string></p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><a href="https://www.jianshu.com/p/e6bbc00b18f6" target="_blank" rel="noopener">详细使用点击</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.runoob.com/kotlin/kotlin-class-object.html" target="_blank" rel="noopener">Runoob</a></p>
<p><a href="https://www.kotlincn.net/docs/reference/basic-syntax.html" target="_blank" rel="noopener">kotlincn</a></p>
<p><a href="https://handsomeliuyang.github.io/2019/05/07/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">Kotlin学习笔记</a></p>
]]></content>
      
        <categories>
            
            <category> Kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
